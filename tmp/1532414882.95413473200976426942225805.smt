;  time  = {}
;  terms = 237
;  score = -1
;  stdout= {}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.div RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE (fp.mul RNE (fp.sqrt RNE x8) (fp.mul RNE x5 x9)) (fp.min (fp.add RNE x9 x9) (fp.roundToIntegral RNE x5))) (fp.min (fp.roundToIntegral RNE (fp.neg x8)) (fp.roundToIntegral RNE (fp.div RNE x7 x3))))) (fp.sqrt RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.sqrt RNE (fp.neg x4))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.mul RNE x1 x4)))))) (fp.abs (fp.neg (fp.mul RNE (fp.roundToIntegral RNE (fp.max (fp.sub RNE x6 x8) (fp.max x0 x6))) (fp.roundToIntegral RNE (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x7))))))) (fp.roundToIntegral RNE (fp.mul RNE (fp.neg (fp.roundToIntegral RNE (fp.div RNE (fp.sub RNE (fp.abs x0) (fp.roundToIntegral RNE x4)) (fp.add RNE (fp.div RNE x2 x2) (fp.abs x0))))) (fp.div RNE (fp.roundToIntegral RNE (fp.min (fp.add RNE (fp.max x1 x7) (fp.max x6 x6)) (fp.min (fp.sub RNE x5 x4) (fp.min x5 x7)))) (fp.abs (fp.sub RNE (fp.div RNE (fp.neg x3) (fp.min x0 x2)) (fp.div RNE (fp.roundToIntegral RNE x4) (fp.add RNE x7 x9)))))))) (fp.add RNE (fp.sub RNE (fp.div RNE (fp.add RNE (fp.mul RNE (fp.min (fp.max (fp.sqrt RNE x4) (fp.sub RNE x5 x1)) (fp.mul RNE (fp.add RNE x8 x7) (fp.div RNE x7 x5))) (fp.neg (fp.sqrt RNE (fp.sub RNE x2 x8)))) (fp.min (fp.roundToIntegral RNE (fp.sub RNE (fp.div RNE x5 x0) (fp.neg x2))) (fp.abs (fp.sqrt RNE (fp.sub RNE x2 x0))))) (fp.neg (fp.sqrt RNE (fp.neg (fp.div RNE (fp.mul RNE x1 x1) (fp.div RNE x5 x0)))))) (fp.sqrt RNE (fp.neg (fp.div RNE (fp.sqrt RNE (fp.neg (fp.div RNE x1 x5))) (fp.mul RNE (fp.min (fp.div RNE x1 x7) (fp.roundToIntegral RNE x0)) (fp.sub RNE (fp.add RNE x9 x0) (fp.div RNE x1 x7))))))) (fp.add RNE (fp.sqrt RNE (fp.max (fp.neg (fp.add RNE (fp.sqrt RNE (fp.add RNE x1 x7)) (fp.min (fp.roundToIntegral RNE x7) (fp.div RNE x4 x0)))) (fp.div RNE (fp.sub RNE (fp.neg (fp.min x8 x4)) (fp.max (fp.sub RNE x6 x2) (fp.div RNE x9 x1))) (fp.sub RNE (fp.abs (fp.min x0 x3)) (fp.roundToIntegral RNE (fp.add RNE x4 x3)))))) (fp.sqrt RNE (fp.add RNE (fp.min (fp.div RNE (fp.roundToIntegral RNE (fp.sub RNE x0 x0)) (fp.max (fp.roundToIntegral RNE x4) (fp.div RNE x5 x4))) (fp.neg (fp.max (fp.mul RNE x1 x2) (fp.max x3 x4)))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.neg (fp.min x4 x6)))))))))))(check-sat)