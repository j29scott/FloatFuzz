;  time  = {}
;  terms = 417
;  score = -1
;  stdout= {}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.min (fp.sqrt RNE (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE (fp.sqrt RNE (fp.add RNE (fp.mul RNE x3 x9) (fp.max x6 x4))) (fp.roundToIntegral RNE (fp.min (fp.abs x7) (fp.neg x1))))) (fp.add RNE (fp.sub RNE (fp.add RNE (fp.min (fp.abs x1) (fp.max x3 x5)) (fp.div RNE (fp.mul RNE x4 x4) (fp.abs x0))) (fp.min (fp.sqrt RNE (fp.sub RNE x5 x1)) (fp.min (fp.neg x3) (fp.sqrt RNE x0)))) (fp.min (fp.add RNE (fp.div RNE (fp.abs x4) (fp.add RNE x5 x5)) (fp.neg (fp.max x9 x9))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x7))))))) (fp.neg (fp.neg (fp.abs (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE (fp.add RNE x9 x5) (fp.add RNE x1 x2)) (fp.abs (fp.mul RNE x0 x9)))))))) (fp.abs (fp.sqrt RNE (fp.roundToIntegral RNE (fp.max (fp.sub RNE (fp.max (fp.add RNE (fp.div RNE x4 x0) (fp.roundToIntegral RNE x5)) (fp.sqrt RNE (fp.sqrt RNE x6))) (fp.div RNE (fp.sub RNE (fp.max x7 x8) (fp.div RNE x7 x5)) (fp.roundToIntegral RNE (fp.sub RNE x6 x5)))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.sqrt RNE x6) (fp.neg x9))))))))) (fp.max (fp.roundToIntegral RNE (fp.max (fp.add RNE (fp.min (fp.max (fp.sqrt RNE (fp.neg (fp.sub RNE x6 x1))) (fp.add RNE (fp.min (fp.abs x6) (fp.min x5 x8)) (fp.sqrt RNE (fp.mul RNE x0 x0)))) (fp.abs (fp.add RNE (fp.div RNE (fp.sqrt RNE x6) (fp.roundToIntegral RNE x8)) (fp.abs (fp.add RNE x6 x2))))) (fp.roundToIntegral RNE (fp.div RNE (fp.abs (fp.max (fp.max x6 x6) (fp.neg x4))) (fp.min (fp.add RNE (fp.roundToIntegral RNE x9) (fp.neg x6)) (fp.mul RNE (fp.mul RNE x2 x4) (fp.sqrt RNE x3)))))) (fp.neg (fp.max (fp.roundToIntegral RNE (fp.neg (fp.sub RNE (fp.min x0 x8) (fp.abs x0)))) (fp.max (fp.min (fp.add RNE (fp.max x6 x5) (fp.sub RNE x8 x0)) (fp.abs (fp.abs x5))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.max x7 x2)))))))) (fp.min (fp.sub RNE (fp.mul RNE (fp.min (fp.sqrt RNE (fp.mul RNE (fp.mul RNE (fp.min x5 x1) (fp.roundToIntegral RNE x4)) (fp.min (fp.sub RNE x9 x6) (fp.min x8 x0)))) (fp.max (fp.roundToIntegral RNE (fp.abs (fp.add RNE x3 x3))) (fp.sub RNE (fp.max (fp.div RNE x3 x7) (fp.roundToIntegral RNE x8)) (fp.add RNE (fp.mul RNE x4 x1) (fp.add RNE x3 x3))))) (fp.mul RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.mul RNE (fp.neg x7) (fp.neg x5)) (fp.roundToIntegral RNE (fp.neg x6)))) (fp.roundToIntegral RNE (fp.mul RNE (fp.neg (fp.abs x3)) (fp.sub RNE (fp.sqrt RNE x1) (fp.mul RNE x9 x3)))))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.max (fp.mul RNE (fp.min x0 x1) (fp.sqrt RNE x6)) (fp.neg (fp.abs x3))) (fp.add RNE (fp.roundToIntegral RNE (fp.sqrt RNE x0)) (fp.abs (fp.sub RNE x6 x3)))) (fp.neg (fp.mul RNE (fp.abs (fp.abs x9)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x3))))) (fp.min (fp.min (fp.neg (fp.mul RNE (fp.sub RNE x6 x3) (fp.sub RNE x9 x5))) (fp.roundToIntegral RNE (fp.add RNE (fp.sub RNE x8 x5) (fp.mul RNE x9 x2)))) (fp.abs (fp.roundToIntegral RNE (fp.add RNE (fp.sqrt RNE x5) (fp.min x9 x2))))))) (fp.min (fp.div RNE (fp.div RNE (fp.min (fp.max (fp.roundToIntegral RNE (fp.mul RNE x1 x6)) (fp.sqrt RNE (fp.abs x7))) (fp.div RNE (fp.sub RNE (fp.max x5 x3) (fp.sub RNE x4 x7)) (fp.max (fp.max x9 x0) (fp.div RNE x3 x5)))) (fp.max (fp.abs (fp.sqrt RNE (fp.div RNE x8 x6))) (fp.sqrt RNE (fp.div RNE (fp.sub RNE x7 x2) (fp.div RNE x0 x5))))) (fp.sub RNE (fp.abs (fp.abs (fp.sub RNE (fp.add RNE x6 x1) (fp.max x0 x8)))) (fp.max (fp.mul RNE (fp.div RNE (fp.sqrt RNE x1) (fp.div RNE x6 x2)) (fp.sub RNE (fp.abs x0) (fp.sqrt RNE x7))) (fp.abs (fp.roundToIntegral RNE (fp.add RNE x7 x6)))))) (fp.sub RNE (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE (fp.abs (fp.abs x6)))) (fp.div RNE (fp.abs (fp.max (fp.mul RNE x0 x1) (fp.abs x5))) (fp.neg (fp.sub RNE (fp.abs x5) (fp.mul RNE x7 x8))))) (fp.roundToIntegral RNE (fp.mul RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sqrt RNE x6))) (fp.sub RNE (fp.add RNE (fp.roundToIntegral RNE x9) (fp.min x3 x4)) (fp.sqrt RNE (fp.add RNE x0 x4)))))))))))(check-sat)