;  time  = {}
;  terms = 50
;  score = -1
;  stdout= {}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (fp.geq (fp.div RNE (fp.sub RNE (fp.min (fp.div RNE x4 x3) (fp.roundToIntegral RNE x0)) (fp.mul RNE (fp.div RNE x2 x0) (fp.max x4 x4))) (fp.abs (fp.neg (fp.sub RNE x4 x3)))) (fp.div RNE (fp.max (fp.add RNE (fp.neg x1) (fp.min x3 x4)) (fp.div RNE (fp.neg x0) (fp.add RNE x3 x0))) (fp.add RNE (fp.mul RNE (fp.add RNE x1 x2) (fp.sub RNE x4 x0)) (fp.add RNE (fp.min x1 x2) (fp.sub RNE x0 x0))))))(check-sat)