;  time  = {}
;  terms = 181
;  score = -1
;  stdout= {}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isPositive (fp.mul RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.add RNE (fp.neg (fp.min (fp.mul RNE (fp.sqrt RNE (fp.add RNE x8 x2)) (fp.roundToIntegral RNE (fp.add RNE x1 x5))) (fp.roundToIntegral RNE (fp.add RNE (fp.neg x8) (fp.mul RNE x3 x3))))) (fp.div RNE (fp.neg (fp.add RNE (fp.sqrt RNE (fp.add RNE x2 x7)) (fp.max (fp.sqrt RNE x8) (fp.max x3 x6)))) (fp.sqrt RNE (fp.neg (fp.roundToIntegral RNE (fp.sqrt RNE x4)))))))) (fp.add RNE (fp.neg (fp.div RNE (fp.sqrt RNE (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.max x5 x8) (fp.max x2 x4)) (fp.sub RNE (fp.sqrt RNE x0) (fp.abs x6))) (fp.div RNE (fp.max (fp.div RNE x6 x4) (fp.min x3 x0)) (fp.abs (fp.div RNE x0 x4))))) (fp.add RNE (fp.sqrt RNE (fp.max (fp.mul RNE (fp.max x8 x9) (fp.abs x2)) (fp.min (fp.neg x3) (fp.mul RNE x8 x0)))) (fp.mul RNE (fp.add RNE (fp.sqrt RNE (fp.add RNE x9 x4)) (fp.min (fp.add RNE x3 x5) (fp.max x1 x5))) (fp.max (fp.div RNE (fp.mul RNE x5 x1) (fp.sub RNE x7 x6)) (fp.add RNE (fp.div RNE x0 x9) (fp.mul RNE x8 x4))))))) (fp.sub RNE (fp.max (fp.neg (fp.sqrt RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.max x6 x5))))) (fp.abs (fp.div RNE (fp.neg (fp.add RNE (fp.abs x4) (fp.roundToIntegral RNE x2))) (fp.sub RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x9)) (fp.sqrt RNE (fp.max x7 x7)))))) (fp.neg (fp.add RNE (fp.min (fp.sqrt RNE (fp.min (fp.max x7 x9) (fp.sub RNE x5 x2))) (fp.min (fp.mul RNE (fp.add RNE x7 x2) (fp.sqrt RNE x7)) (fp.neg (fp.mul RNE x8 x0)))) (fp.div RNE (fp.min (fp.mul RNE (fp.abs x3) (fp.div RNE x8 x5)) (fp.neg (fp.neg x0))) (fp.add RNE (fp.neg (fp.div RNE x5 x1)) (fp.sqrt RNE (fp.add RNE x8 x5)))))))))))(check-sat)