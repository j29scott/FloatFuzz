;  time  = {}
;  terms = 276
;  score = -1
;  stdout= {}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.neg (fp.max (fp.min (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.div RNE (fp.abs x9) (fp.mul RNE x9 x8)) (fp.mul RNE (fp.sub RNE x2 x0) (fp.add RNE x6 x2))) (fp.add RNE (fp.sub RNE (fp.sqrt RNE x5) (fp.div RNE x4 x2)) (fp.max (fp.neg x0) (fp.add RNE x4 x6))))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.abs (fp.neg (fp.div RNE x3 x0)))))) (fp.neg (fp.neg (fp.roundToIntegral RNE (fp.abs (fp.min (fp.roundToIntegral RNE x2) (fp.min x4 x6)))))))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.max (fp.abs (fp.max (fp.neg (fp.roundToIntegral RNE (fp.neg x5))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x9 x3) (fp.mul RNE x7 x9)) (fp.sqrt RNE (fp.sqrt RNE x0))))) (fp.add RNE (fp.add RNE (fp.add RNE (fp.div RNE (fp.abs x2) (fp.div RNE x6 x4)) (fp.div RNE (fp.sub RNE x1 x9) (fp.abs x2))) (fp.neg (fp.abs (fp.sub RNE x8 x7)))) (fp.neg (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.sub RNE x9 x1))))))))) (fp.div RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE (fp.mul RNE (fp.div RNE (fp.abs x7) (fp.div RNE x3 x0)) (fp.min (fp.min x8 x6) (fp.sub RNE x1 x0))) (fp.div RNE (fp.sub RNE (fp.max x3 x5) (fp.sqrt RNE x3)) (fp.max (fp.max x8 x7) (fp.roundToIntegral RNE x9))))) (fp.mul RNE (fp.max (fp.add RNE (fp.mul RNE (fp.neg x0) (fp.sub RNE x7 x3)) (fp.mul RNE (fp.sqrt RNE x9) (fp.abs x6))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sub RNE x1 x5)))) (fp.abs (fp.min (fp.max (fp.sub RNE x9 x3) (fp.roundToIntegral RNE x5)) (fp.roundToIntegral RNE (fp.max x7 x7)))))))) (fp.div RNE (fp.roundToIntegral RNE (fp.abs (fp.sqrt RNE (fp.div RNE (fp.min (fp.sub RNE (fp.sqrt RNE x2) (fp.abs x7)) (fp.neg (fp.max x8 x0))) (fp.mul RNE (fp.min (fp.neg x5) (fp.max x5 x6)) (fp.div RNE (fp.mul RNE x2 x3) (fp.sqrt RNE x2))))))) (fp.add RNE (fp.mul RNE (fp.sqrt RNE (fp.sqrt RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.min x2 x5))))) (fp.min (fp.min (fp.abs (fp.add RNE (fp.min x4 x2) (fp.sqrt RNE x5))) (fp.sub RNE (fp.div RNE (fp.min x4 x7) (fp.sqrt RNE x0)) (fp.neg (fp.max x3 x1)))) (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.add RNE x3 x5)) (fp.abs (fp.neg x3))) (fp.sub RNE (fp.div RNE (fp.sqrt RNE x3) (fp.neg x9)) (fp.min (fp.mul RNE x4 x7) (fp.abs x2)))))) (fp.sqrt RNE (fp.sub RNE (fp.max (fp.sqrt RNE (fp.div RNE (fp.sub RNE x5 x9) (fp.min x0 x1))) (fp.add RNE (fp.abs (fp.sqrt RNE x5)) (fp.sub RNE (fp.mul RNE x9 x0) (fp.sqrt RNE x5)))) (fp.mul RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.mul RNE x7 x5))) (fp.max (fp.mul RNE (fp.neg x0) (fp.sub RNE x8 x3)) (fp.abs (fp.neg x0)))))))))))(check-sat)