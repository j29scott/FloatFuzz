;  time  = {}
;  terms = 196
;  score = -1
;  stdout= {}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isSubnormal (fp.abs (fp.div RNE (fp.div RNE (fp.sub RNE (fp.max (fp.abs (fp.add RNE (fp.neg (fp.add RNE x7 x2)) (fp.sqrt RNE (fp.max x0 x8)))) (fp.sub RNE (fp.div RNE (fp.max (fp.neg x3) (fp.sqrt RNE x5)) (fp.mul RNE (fp.div RNE x3 x2) (fp.sub RNE x7 x4))) (fp.mul RNE (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.mul RNE x5 x2)) (fp.abs (fp.div RNE x8 x6))))) (fp.add RNE (fp.div RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sub RNE x6 x8))) (fp.min (fp.neg (fp.div RNE x7 x5)) (fp.div RNE (fp.min x8 x8) (fp.sub RNE x5 x3)))) (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.min x6 x7) (fp.add RNE x1 x5)) (fp.sqrt RNE (fp.roundToIntegral RNE x1))) (fp.div RNE (fp.add RNE (fp.max x9 x0) (fp.abs x1)) (fp.roundToIntegral RNE (fp.neg x0)))))) (fp.neg (fp.sub RNE (fp.sqrt RNE (fp.add RNE (fp.sub RNE (fp.div RNE x3 x1) (fp.add RNE x6 x5)) (fp.div RNE (fp.roundToIntegral RNE x1) (fp.max x0 x4)))) (fp.mul RNE (fp.mul RNE (fp.neg (fp.mul RNE x0 x1)) (fp.sqrt RNE (fp.roundToIntegral RNE x5))) (fp.min (fp.roundToIntegral RNE (fp.neg x9)) (fp.max (fp.roundToIntegral RNE x4) (fp.div RNE x4 x5))))))) (fp.add RNE (fp.min (fp.abs (fp.max (fp.roundToIntegral RNE (fp.sqrt RNE (fp.add RNE x7 x7))) (fp.mul RNE (fp.neg (fp.add RNE x1 x1)) (fp.max (fp.max x3 x7) (fp.abs x8))))) (fp.roundToIntegral RNE (fp.sub RNE (fp.min (fp.max (fp.sqrt RNE x5) (fp.abs x1)) (fp.div RNE (fp.div RNE x3 x3) (fp.min x4 x3))) (fp.sub RNE (fp.abs (fp.max x3 x7)) (fp.div RNE (fp.add RNE x5 x2) (fp.add RNE x2 x4)))))) (fp.sub RNE (fp.sqrt RNE (fp.sqrt RNE (fp.sub RNE (fp.max (fp.abs x0) (fp.sub RNE x9 x4)) (fp.abs (fp.sub RNE x1 x6))))) (fp.neg (fp.mul RNE (fp.roundToIntegral RNE (fp.max (fp.div RNE x0 x1) (fp.abs x4))) (fp.min (fp.neg (fp.div RNE x6 x6)) (fp.abs (fp.neg x8)))))))))))(check-sat)