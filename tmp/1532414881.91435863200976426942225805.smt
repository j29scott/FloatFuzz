;  time  = {}
;  terms = 167
;  score = -1
;  stdout= {}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNormal (fp.add RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.div RNE (fp.max (fp.abs (fp.max (fp.mul RNE (fp.min x2 x3) (fp.div RNE x9 x4)) (fp.roundToIntegral RNE (fp.add RNE x5 x8)))) (fp.abs (fp.abs (fp.div RNE (fp.sqrt RNE x7) (fp.roundToIntegral RNE x9))))) (fp.roundToIntegral RNE (fp.mul RNE (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE x1) (fp.add RNE x6 x0)) (fp.abs (fp.abs x4))) (fp.add RNE (fp.div RNE (fp.sub RNE x1 x4) (fp.min x3 x3)) (fp.sqrt RNE (fp.roundToIntegral RNE x3))))))) (fp.neg (fp.mul RNE (fp.sub RNE (fp.sqrt RNE (fp.sub RNE (fp.sqrt RNE (fp.add RNE x5 x3)) (fp.sub RNE (fp.neg x8) (fp.mul RNE x4 x2)))) (fp.sqrt RNE (fp.sub RNE (fp.div RNE (fp.max x3 x0) (fp.min x0 x9)) (fp.sqrt RNE (fp.sqrt RNE x0))))) (fp.max (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.sqrt RNE x8) (fp.roundToIntegral RNE x9)) (fp.mul RNE (fp.add RNE x8 x5) (fp.div RNE x4 x1))) (fp.add RNE (fp.neg (fp.sqrt RNE x8)) (fp.sqrt RNE (fp.mul RNE x8 x1)))) (fp.max (fp.add RNE (fp.sub RNE (fp.sub RNE x9 x5) (fp.min x4 x1)) (fp.max (fp.min x6 x6) (fp.roundToIntegral RNE x7))) (fp.add RNE (fp.sub RNE (fp.sub RNE x9 x1) (fp.neg x7)) (fp.sqrt RNE (fp.max x2 x7)))))))) (fp.abs (fp.mul RNE (fp.neg (fp.abs (fp.sub RNE (fp.mul RNE (fp.neg (fp.roundToIntegral RNE x8)) (fp.abs (fp.sqrt RNE x0))) (fp.neg (fp.roundToIntegral RNE (fp.abs x4)))))) (fp.abs (fp.min (fp.abs (fp.max (fp.div RNE (fp.abs x5) (fp.abs x8)) (fp.neg (fp.max x3 x2)))) (fp.max (fp.div RNE (fp.neg (fp.abs x8)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x2))) (fp.neg (fp.abs (fp.add RNE x8 x0)))))))))))(check-sat)