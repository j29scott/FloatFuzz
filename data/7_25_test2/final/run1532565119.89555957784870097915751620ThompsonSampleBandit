;  time  = {'mathsat': 156.92432570457458}
;  terms = 79
;  score = 156.92432570457458
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isPositive (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x6 x5) (fp.div RNE x3 x9)) (fp.max (fp.div RNE x1 (fp.abs x0)) (fp.div RNE x7 x7))) (fp.sqrt RNE (fp.div RNE (fp.div RNE (fp.div RNE x0 x7) (fp.div RNE x3 x7)) (fp.div RNE (fp.div RNE x4 x8) (fp.div RNE x2 x6))))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.div RNE x9 (fp.div RNE x9 x6)) (fp.sqrt RNE x6)) (fp.div RNE (fp.div RNE x8 (fp.sqrt RNE x1)) (fp.div RNE (fp.max x3 x9) (fp.abs x3)))) (fp.div RNE (fp.div RNE (fp.mul RNE x0 x3) (fp.div RNE (fp.neg x9) (fp.max x9 x2))) (fp.add RNE (fp.neg (fp.mul RNE x7 x8)) (fp.mul RNE (fp.div RNE x3 x4) (fp.add RNE x8 x8))))))))(check-sat)