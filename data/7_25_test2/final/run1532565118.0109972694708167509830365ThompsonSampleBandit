;  time  = {'mathsat': 335.2586760520935}
;  terms = 126
;  score = 335.2586760520935
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.min x1 x3) (fp.div RNE (fp.div RNE x4 x7) (fp.div RNE x7 x4))) (fp.sub RNE (fp.div RNE x3 (fp.sqrt RNE x2)) (fp.div RNE x8 (fp.abs x8)))) (fp.mul RNE (fp.sub RNE (fp.max (fp.neg x4) (fp.sqrt RNE x0)) (fp.sqrt RNE (fp.div RNE x5 x5))) (fp.sub RNE (fp.div RNE (fp.div RNE x3 x9) (fp.div RNE x9 x3)) (fp.div RNE (fp.mul RNE x4 x5) (fp.div RNE x3 x9))))) (fp.roundToIntegral RNE (fp.mul RNE (fp.add RNE (fp.div RNE x6 (fp.div RNE x3 x2)) (fp.min x1 x8)) (fp.div RNE (fp.div RNE x7 x6) (fp.div RNE x3 (fp.div RNE x7 x1)))))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE (fp.div RNE x1 (fp.abs x1)) (fp.max x3 x6)) (fp.div RNE (fp.div RNE x5 x0) (fp.div RNE (fp.min x6 x9) (fp.div RNE x0 x0))))) (fp.sub RNE (fp.neg (fp.div RNE (fp.min x3 x0) (fp.mul RNE (fp.sqrt RNE x3) (fp.abs x8)))) (fp.div RNE (fp.div RNE (fp.sub RNE x7 x5) (fp.div RNE x7 (fp.div RNE x5 x4))) (fp.min (fp.div RNE (fp.div RNE x2 x4) (fp.div RNE x7 x7)) (fp.div RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x7))))))))(check-sat)