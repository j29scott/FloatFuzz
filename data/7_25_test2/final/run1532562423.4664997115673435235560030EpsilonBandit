;  time  = {'mathsat': 265.52473640441895}
;  terms = 131
;  score = 265.52473640441895
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.sub RNE (fp.add RNE x4 x6) (fp.mul RNE x4 x8)) (fp.sub RNE (fp.sub RNE x6 x2) (fp.div RNE x3 x8))) (fp.div RNE (fp.max (fp.div RNE x3 x5) (fp.add RNE x5 x0)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE x1 x2))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x0 x1) (fp.max (fp.div RNE x4 x4) (fp.max x7 x0))) (fp.sqrt RNE (fp.div RNE x9 x8))) (fp.div RNE (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE x7) (fp.div RNE x0 x3)) (fp.div RNE (fp.max x8 x2) (fp.abs x3))) (fp.max (fp.max (fp.div RNE x8 x0) (fp.div RNE x6 x3)) (fp.div RNE (fp.div RNE x9 x0) (fp.div RNE x7 x1)))))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE x3 (fp.sub RNE x8 x0)) (fp.abs (fp.neg x3))) (fp.sub RNE (fp.div RNE (fp.mul RNE x9 x8) (fp.sub RNE x5 x3)) (fp.div RNE (fp.div RNE x5 x6) (fp.abs x7)))) (fp.sqrt RNE (fp.div RNE (fp.min x2 x8) (fp.div RNE (fp.div RNE x7 x0) (fp.div RNE x0 x3))))) (fp.abs (fp.neg (fp.div RNE (fp.div RNE (fp.div RNE x3 x1) (fp.add RNE x8 x6)) (fp.max (fp.abs x7) (fp.min x2 x1))))))))(check-sat)