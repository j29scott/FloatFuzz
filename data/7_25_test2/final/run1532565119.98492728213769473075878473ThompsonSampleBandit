;  time  = {'mathsat': 137.05471420288086}
;  terms = 76
;  score = 137.05471420288086
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sqrt RNE (fp.div RNE (fp.abs (fp.roundToIntegral RNE (fp.sub RNE x1 x1))) (fp.sub RNE (fp.div RNE (fp.div RNE x6 (fp.div RNE x3 x5)) (fp.neg (fp.div RNE x4 x8))) (fp.sqrt RNE (fp.mul RNE x4 x2))))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.neg (fp.div RNE x2 x1)) (fp.max (fp.div RNE x9 x8) (fp.div RNE x9 (fp.add RNE x9 x9)))) (fp.abs (fp.div RNE (fp.div RNE x5 (fp.div RNE x5 x0)) (fp.div RNE x5 x2)))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.neg x0) (fp.div RNE x5 (fp.div RNE x6 x7))) (fp.min (fp.neg (fp.neg x5)) (fp.min (fp.max x1 x9) (fp.div RNE x4 x9)))) (fp.abs (fp.abs (fp.sqrt RNE (fp.div RNE x9 x9))))))))(check-sat)