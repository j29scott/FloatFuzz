;  time  = {'mathsat': 247.22104334831238}
;  terms = 88
;  score = 247.22104334831238
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.max (fp.sub RNE (fp.div RNE (fp.sub RNE x7 x3) (fp.div RNE x4 (fp.mul RNE x6 x2))) (fp.mul RNE (fp.add RNE x9 x2) (fp.roundToIntegral RNE x8))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.max x0 x8)))) (fp.max (fp.sub RNE (fp.neg (fp.add RNE x2 x5)) (fp.roundToIntegral RNE (fp.min x2 x6))) (fp.neg (fp.mul RNE (fp.sqrt RNE x9) (fp.div RNE x8 (fp.sub RNE x2 x2)))))) (fp.div RNE (fp.sqrt RNE (fp.min (fp.sqrt RNE (fp.roundToIntegral RNE x9)) (fp.div RNE (fp.div RNE x9 x6) (fp.add RNE x9 x4)))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.neg x6) (fp.min x3 x9)) (fp.div RNE (fp.add RNE x0 x5) (fp.roundToIntegral RNE x0))) (fp.sub RNE (fp.max (fp.div RNE (fp.add RNE x9 x7) (fp.div RNE x7 x2)) (fp.roundToIntegral RNE (fp.div RNE x2 x2))) (fp.abs (fp.neg (fp.div RNE x5 x6))))))))(check-sat)