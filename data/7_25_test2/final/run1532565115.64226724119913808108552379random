;  time  = {'mathsat': 36.21300411224365}
;  terms = 71
;  score = 36.21300411224365
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.div RNE (fp.sqrt RNE (fp.min x2 x5)) (fp.abs (fp.neg x0))) (fp.max (fp.sub RNE (fp.max x5 x9) (fp.roundToIntegral RNE x1)) (fp.abs (fp.neg (fp.max x0 x5))))) (fp.add RNE (fp.add RNE (fp.sub RNE (fp.add RNE (fp.roundToIntegral RNE x4) (fp.roundToIntegral RNE x8)) (fp.roundToIntegral RNE (fp.abs x7))) (fp.min (fp.div RNE (fp.abs x5) (fp.mul RNE x1 x6)) (fp.sqrt RNE (fp.div RNE x5 x3)))) (fp.sqrt RNE (fp.max (fp.add RNE (fp.sqrt RNE x7) (fp.abs x4)) (fp.div RNE (fp.mul RNE x4 x7) (fp.neg x0)))))) (fp.roundToIntegral RNE (fp.abs (fp.div RNE (fp.add RNE (fp.mul RNE x5 x8) (fp.abs x7)) (fp.neg (fp.div RNE x8 x6)))))))(check-sat)