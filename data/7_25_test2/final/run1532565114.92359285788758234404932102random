;  time  = {'mathsat': 95.40812397003174}
;  terms = 81
;  score = 95.40812397003174
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.min (fp.min (fp.min (fp.neg x8) (fp.max x1 x4)) (fp.sqrt RNE (fp.roundToIntegral RNE x3))) (fp.div RNE (fp.abs (fp.roundToIntegral RNE (fp.div RNE x3 x5))) (fp.max (fp.neg (fp.sub RNE x5 x3)) (fp.sqrt RNE (fp.neg x9))))) (fp.add RNE (fp.div RNE (fp.mul RNE (fp.div RNE (fp.roundToIntegral RNE x4) (fp.div RNE x8 x5)) (fp.sub RNE (fp.sqrt RNE x2) (fp.div RNE x5 x3))) (fp.max (fp.max (fp.add RNE x0 x8) (fp.sub RNE x0 x0)) (fp.neg (fp.max x2 x6)))) (fp.sqrt RNE (fp.div RNE (fp.abs (fp.abs x5)) (fp.roundToIntegral RNE (fp.mul RNE x0 x4)))))) (fp.roundToIntegral RNE (fp.add RNE (fp.roundToIntegral RNE (fp.abs (fp.max x2 x9))) (fp.mul RNE (fp.neg (fp.sub RNE x5 x2)) (fp.min (fp.sub RNE x1 x4) (fp.neg x2)))))))(check-sat)