;  time  = {'mathsat': 232.1663303375244}
;  terms = 68
;  score = 232.1663303375244
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.roundToIntegral RNE (fp.max (fp.add RNE (fp.mul RNE (fp.min x9 x4) (fp.add RNE x3 x0)) (fp.add RNE (fp.sqrt RNE x7) (fp.max x5 x9))) (fp.sqrt RNE (fp.abs (fp.neg x4))))) (fp.div RNE (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE (fp.mul RNE x4 x7)) (fp.div RNE (fp.div RNE x6 x0) (fp.roundToIntegral RNE x6))) (fp.mul RNE (fp.add RNE (fp.div RNE x1 x9) (fp.sqrt RNE x1)) (fp.sub RNE (fp.roundToIntegral RNE x2) (fp.roundToIntegral RNE x6)))) (fp.mul RNE (fp.roundToIntegral RNE (fp.div RNE (fp.abs x0) (fp.max x2 x0))) (fp.max (fp.abs (fp.max x5 x5)) (fp.min (fp.div RNE x5 (fp.add RNE x3 x5)) (fp.div RNE x4 x3)))))))(check-sat)