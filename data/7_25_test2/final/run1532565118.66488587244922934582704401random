;  time  = {'mathsat': 23.913188934326172}
;  terms = 81
;  score = 23.913188934326172
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.sqrt RNE (fp.abs (fp.sub RNE (fp.roundToIntegral RNE x1) (fp.sub RNE x6 x0)))) (fp.sqrt RNE (fp.max (fp.sqrt RNE (fp.roundToIntegral RNE x2)) (fp.sub RNE (fp.roundToIntegral RNE x1) (fp.abs x5))))) (fp.min (fp.div RNE (fp.min (fp.roundToIntegral RNE (fp.roundToIntegral RNE x4)) (fp.max (fp.div RNE x8 (fp.abs x8)) (fp.roundToIntegral RNE (fp.add RNE x7 x3)))) (fp.mul RNE (fp.min (fp.mul RNE (fp.div RNE x5 x1) (fp.sqrt RNE x7)) (fp.max (fp.abs x9) (fp.sqrt RNE x7))) (fp.mul RNE (fp.add RNE (fp.max x1 x6) (fp.abs x0)) (fp.neg (fp.neg x2))))) (fp.mul RNE (fp.roundToIntegral RNE (fp.neg (fp.min x6 x6))) (fp.sub RNE (fp.abs (fp.div RNE x2 x0)) (fp.sub RNE (fp.min (fp.add RNE x4 x0) (fp.min x4 x5)) (fp.neg (fp.sub RNE x0 x8))))))))(check-sat)