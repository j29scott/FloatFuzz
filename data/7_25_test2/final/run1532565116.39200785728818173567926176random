;  time  = {'mathsat': 172.28955173492432}
;  terms = 88
;  score = 172.28955173492432
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.abs (fp.sqrt RNE (fp.roundToIntegral RNE (fp.add RNE x0 x0)))) (fp.max (fp.div RNE (fp.add RNE (fp.sub RNE x0 x9) (fp.abs x9)) (fp.min (fp.div RNE (fp.min x1 x2) (fp.sub RNE x7 x9)) (fp.min (fp.min x3 x3) (fp.add RNE x6 x8)))) (fp.min (fp.sqrt RNE (fp.neg x7)) (fp.mul RNE (fp.div RNE x8 x1) (fp.abs x3))))) (fp.min (fp.div RNE (fp.div RNE (fp.sub RNE (fp.abs x8) (fp.roundToIntegral RNE x0)) (fp.div RNE (fp.min x1 x9) (fp.neg x0))) (fp.mul RNE (fp.sqrt RNE (fp.div RNE x0 x1)) (fp.roundToIntegral RNE (fp.abs x0)))) (fp.sub RNE (fp.neg (fp.add RNE (fp.abs (fp.max x2 x2)) (fp.mul RNE (fp.neg x4) (fp.neg x4)))) (fp.roundToIntegral RNE (fp.max (fp.roundToIntegral RNE (fp.max x9 x5)) (fp.div RNE (fp.div RNE x9 x5) (fp.div RNE x4 x4))))))))(check-sat)