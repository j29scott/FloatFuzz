;  time  = {'mathsat': 58.91112661361694}
;  terms = 82
;  score = 58.91112661361694
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.sqrt RNE (fp.neg (fp.add RNE (fp.mul RNE x2 x8) (fp.abs x9)))) (fp.min (fp.sub RNE (fp.mul RNE (fp.add RNE x8 x2) (fp.min (fp.max x1 x9) (fp.abs x0))) (fp.neg (fp.add RNE x4 x2))) (fp.add RNE (fp.sqrt RNE (fp.div RNE x2 x8)) (fp.add RNE (fp.sqrt RNE x6) (fp.sub RNE x0 x8))))) (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.sqrt RNE x2) (fp.neg x9)) (fp.add RNE (fp.neg x8) (fp.max x0 x9))) (fp.min (fp.sub RNE (fp.sqrt RNE x5) (fp.mul RNE x3 x9)) (fp.div RNE (fp.sub RNE x5 x9) (fp.mul RNE x4 (fp.sqrt RNE x6))))) (fp.neg (fp.mul RNE (fp.max (fp.mul RNE x2 x0) (fp.mul RNE x5 x0)) (fp.max (fp.min x3 x9) (fp.div RNE x1 x6)))))))(check-sat)