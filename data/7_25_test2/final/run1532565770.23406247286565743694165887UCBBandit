;  time  = {'mathsat': 284.74532675743103}
;  terms = 76
;  score = 284.74532675743103
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.sub RNE (fp.max (fp.mul RNE (fp.div RNE (fp.div RNE x6 (fp.abs x0)) (fp.mul RNE (fp.min x6 x8) (fp.neg x1))) (fp.div RNE (fp.div RNE x3 (fp.div RNE x6 x3)) (fp.div RNE x6 x5))) (fp.mul RNE (fp.div RNE (fp.div RNE x2 (fp.div RNE x1 x8)) (fp.div RNE (fp.min x2 x3) (fp.abs x5))) (fp.div RNE (fp.mul RNE x4 x5) (fp.add RNE (fp.neg x8) (fp.roundToIntegral RNE x6))))) (fp.min (fp.div RNE (fp.add RNE (fp.div RNE x5 x1) (fp.abs x9)) (fp.max (fp.roundToIntegral RNE x5) (fp.div RNE x4 (fp.sqrt RNE x3)))) (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE x2) (fp.div RNE x7 x6)) (fp.abs (fp.div RNE (fp.div RNE x2 x1) (fp.div RNE x4 x8))))))))(check-sat)