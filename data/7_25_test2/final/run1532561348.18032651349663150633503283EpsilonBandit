;  time  = {'mathsat': 69.66299962997437}
;  terms = 76
;  score = 69.66299962997437
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.neg (fp.div RNE (fp.min (fp.abs x1) (fp.abs x7)) (fp.sub RNE (fp.mul RNE x5 x8) (fp.min x2 x5)))) (fp.min (fp.min (fp.div RNE (fp.sqrt RNE x3) (fp.roundToIntegral RNE x8)) (fp.min (fp.div RNE x2 x4) (fp.abs x6))) (fp.max (fp.add RNE (fp.mul RNE x4 x7) (fp.div RNE x2 x5)) (fp.add RNE (fp.max x3 x1) (fp.neg x6))))) (fp.add RNE (fp.min (fp.add RNE (fp.neg (fp.min x7 x2)) (fp.div RNE (fp.sqrt RNE x7) (fp.mul RNE x2 x9))) (fp.add RNE (fp.abs (fp.sqrt RNE x1)) (fp.roundToIntegral RNE (fp.mul RNE x5 x1)))) (fp.neg (fp.min (fp.max (fp.sqrt RNE x5) (fp.max x8 x9)) (fp.roundToIntegral RNE (fp.div RNE x8 x0)))))))(check-sat)