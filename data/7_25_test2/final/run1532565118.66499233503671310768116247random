;  time  = {'mathsat': 61.522825717926025}
;  terms = 73
;  score = 61.522825717926025
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.min (fp.roundToIntegral RNE (fp.add RNE (fp.neg (fp.min x7 x7)) (fp.abs (fp.sub RNE (fp.mul RNE x5 x3) (fp.mul RNE x9 x8))))) (fp.min (fp.abs (fp.mul RNE (fp.add RNE x3 x8) (fp.abs x2))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE x3) (fp.neg x6)) (fp.max (fp.add RNE (fp.add RNE x6 x5) (fp.roundToIntegral RNE x6)) (fp.mul RNE (fp.mul RNE x8 x6) (fp.add RNE x1 x2)))))) (fp.add RNE (fp.div RNE (fp.min (fp.min (fp.div RNE x0 x1) (fp.roundToIntegral RNE x9)) (fp.sub RNE (fp.sub RNE x3 x3) (fp.neg x1))) (fp.sqrt RNE (fp.min (fp.min x2 x3) (fp.neg x9)))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.add RNE (fp.sqrt RNE x0) (fp.roundToIntegral RNE x2)))))))(check-sat)