;  time  = {'mathsat': 72.32083225250244}
;  terms = 83
;  score = 72.32083225250244
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.max (fp.add RNE (fp.sqrt RNE (fp.add RNE x2 x2)) (fp.sub RNE (fp.max x7 x7) (fp.div RNE x9 x3))) (fp.sqrt RNE (fp.add RNE (fp.max x4 x2) (fp.roundToIntegral RNE x8)))) (fp.div RNE (fp.sub RNE (fp.abs (fp.abs x4)) (fp.sqrt RNE (fp.min x0 x9))) (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE x8 x6) (fp.roundToIntegral RNE x8))))) (fp.mul RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.neg (fp.sub RNE x1 x0))) (fp.min (fp.add RNE (fp.min x9 (fp.min x7 x8)) (fp.add RNE x6 (fp.div RNE x3 x9))) (fp.sub RNE (fp.sub RNE x8 x6) (fp.max x9 x2)))) (fp.min (fp.max (fp.add RNE (fp.max x4 x9) (fp.abs x6)) (fp.sub RNE (fp.abs x8) (fp.div RNE x2 x4))) (fp.neg (fp.sqrt RNE (fp.div RNE x4 x7)))))))(check-sat)