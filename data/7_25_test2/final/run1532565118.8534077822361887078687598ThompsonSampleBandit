;  time  = {'mathsat': 600}
;  terms = 80
;  score = 600
;  stdout= {'mathsat': ''}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.add RNE (fp.neg (fp.div RNE x2 (fp.abs x8))) (fp.div RNE (fp.div RNE x6 (fp.div RNE x6 x1)) (fp.add RNE x7 x7))) (fp.max (fp.sqrt RNE (fp.roundToIntegral RNE x1)) (fp.max (fp.div RNE x1 (fp.div RNE x0 x2)) (fp.abs x4)))) (fp.max (fp.div RNE (fp.roundToIntegral RNE (fp.abs x2)) (fp.div RNE (fp.max (fp.neg x2) (fp.neg x8)) (fp.sub RNE (fp.neg x9) (fp.add RNE x0 x3)))) (fp.div RNE (fp.div RNE (fp.div RNE x4 x9) (fp.sub RNE x6 x4)) (fp.div RNE (fp.sqrt RNE x2) (fp.div RNE x6 x8))))) (fp.abs (fp.max (fp.mul RNE (fp.neg (fp.sub RNE x1 x7)) (fp.div RNE (fp.abs x4) (fp.sqrt RNE (fp.add RNE x1 x7)))) (fp.abs (fp.abs (fp.min x4 x8)))))))(check-sat)