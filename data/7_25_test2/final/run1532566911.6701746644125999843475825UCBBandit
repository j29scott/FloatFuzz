;  time  = {'mathsat': 305.2839376926422}
;  terms = 96
;  score = 305.2839376926422
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.div RNE (fp.min (fp.sub RNE x9 x6) (fp.roundToIntegral RNE x7)) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.max x8 x6)))) (fp.div RNE (fp.div RNE (fp.abs x4) (fp.max (fp.max x9 x2) (fp.min x7 x3))) (fp.sub RNE (fp.mul RNE x4 x5) (fp.sqrt RNE x3)))) (fp.div RNE (fp.div RNE (fp.max (fp.div RNE x5 x1) (fp.mul RNE x6 x6)) (fp.add RNE (fp.div RNE x2 x3) (fp.min x3 x5))) (fp.abs (fp.div RNE (fp.roundToIntegral RNE x6) (fp.max x6 x4))))) (fp.div RNE (fp.sqrt RNE (fp.sub RNE (fp.min (fp.div RNE x5 x8) (fp.div RNE x3 (fp.max x8 x7))) (fp.neg (fp.div RNE x2 (fp.min x0 x7))))) (fp.max (fp.roundToIntegral RNE (fp.div RNE (fp.sub RNE x9 x5) (fp.neg x5))) (fp.max (fp.max (fp.add RNE x3 x3) (fp.div RNE x2 x8)) (fp.min (fp.mul RNE x4 x1) (fp.mul RNE x1 x4)))))))(check-sat)