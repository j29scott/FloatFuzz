;  time  = {'mathsat': 54.58999300003052}
;  terms = 96
;  score = 54.58999300003052
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE x4) (fp.roundToIntegral RNE (fp.neg x1))) (fp.min (fp.max x1 x3) (fp.abs x8))) (fp.add RNE (fp.neg (fp.neg x9)) (fp.mul RNE (fp.mul RNE x7 x7) (fp.min x4 x8)))) (fp.add RNE (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.roundToIntegral RNE x6)) (fp.roundToIntegral RNE (fp.div RNE x4 x7))) (fp.sub RNE (fp.abs (fp.abs x9)) (fp.sub RNE (fp.abs x0) (fp.abs x9)))) (fp.sqrt RNE (fp.div RNE (fp.abs (fp.div RNE x6 x5)) (fp.mul RNE (fp.abs x7) (fp.max x1 x3)))))) (fp.div RNE (fp.mul RNE (fp.max (fp.add RNE (fp.roundToIntegral RNE x1) (fp.min x3 x3)) (fp.mul RNE (fp.roundToIntegral RNE x1) (fp.add RNE x7 x2))) (fp.max (fp.sqrt RNE (fp.abs x5)) (fp.abs (fp.add RNE x7 x3)))) (fp.abs (fp.sub RNE (fp.sub RNE (fp.add RNE x6 x4) (fp.mul RNE x5 x7)) (fp.sub RNE (fp.roundToIntegral RNE x3) (fp.add RNE x8 x4)))))))(check-sat)