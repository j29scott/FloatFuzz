;  time  = {'mathsat': 306.023894071579}
;  terms = 114
;  score = 306.023894071579
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.abs (fp.div RNE x7 (fp.roundToIntegral RNE x4)))) (fp.roundToIntegral RNE (fp.abs (fp.div RNE x5 (fp.div RNE x6 x9))))) (fp.sub RNE (fp.mul RNE (fp.neg (fp.sqrt RNE x7)) (fp.div RNE (fp.div RNE x1 x8) (fp.div RNE (fp.sqrt RNE x5) (fp.add RNE x9 x8)))) (fp.div RNE (fp.div RNE (fp.div RNE x4 (fp.roundToIntegral RNE x1)) (fp.div RNE x8 x9)) (fp.div RNE (fp.neg (fp.abs x1)) (fp.add RNE (fp.div RNE x6 x9) (fp.abs x1)))))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.sub RNE (fp.neg x6) (fp.mul RNE x3 x1)) (fp.min (fp.div RNE x1 x8) (fp.abs x9))) (fp.div RNE (fp.div RNE (fp.max x3 x3) (fp.div RNE (fp.div RNE x4 x9) (fp.sqrt RNE x9))) (fp.sqrt RNE (fp.div RNE x1 (fp.abs x3))))) (fp.div RNE (fp.min (fp.neg (fp.min x5 x3)) (fp.div RNE (fp.div RNE x5 x1) (fp.add RNE (fp.neg x8) (fp.roundToIntegral RNE x2)))) (fp.div RNE (fp.add RNE (fp.min x0 x8) (fp.sqrt RNE x4)) (fp.sub RNE (fp.add RNE (fp.max x8 x8) (fp.abs x7)) (fp.neg (fp.mul RNE x6 x4))))))))(check-sat)