;  time  = {'mathsat': 272.0644052028656}
;  terms = 106
;  score = 272.0644052028656
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.div RNE (fp.max (fp.div RNE x2 (fp.abs x4)) (fp.div RNE x7 x1)) (fp.sub RNE (fp.div RNE (fp.sub RNE x0 x1) (fp.mul RNE x9 x7)) (fp.neg (fp.add RNE x3 x7)))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x6 (fp.div RNE x8 x8))) (fp.div RNE (fp.sqrt RNE (fp.div RNE x9 x1)) (fp.neg (fp.add RNE x3 x3))))) (fp.div RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.mul RNE x9 x7) (fp.neg x1))) (fp.add RNE (fp.min (fp.div RNE x9 x0) (fp.add RNE x2 x4)) (fp.min (fp.div RNE x9 x9) (fp.div RNE x7 x4))))) (fp.div RNE (fp.neg (fp.div RNE (fp.sub RNE (fp.add RNE x3 x2) (fp.mul RNE x3 x0)) (fp.div RNE (fp.add RNE (fp.add RNE x6 x9) (fp.max x1 x7)) (fp.neg (fp.add RNE x0 x5))))) (fp.sqrt RNE (fp.div RNE (fp.mul RNE (fp.div RNE x6 x8) (fp.div RNE x2 x4)) (fp.add RNE (fp.max (fp.mul RNE x8 x3) (fp.abs x2)) (fp.div RNE (fp.roundToIntegral RNE x2) (fp.sqrt RNE x2))))))))(check-sat)