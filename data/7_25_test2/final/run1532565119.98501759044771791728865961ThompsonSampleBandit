;  time  = {'mathsat': 238.51867055892944}
;  terms = 126
;  score = 238.51867055892944
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x4 x1) (fp.div RNE x5 (fp.roundToIntegral RNE x9))) (fp.sub RNE (fp.sqrt RNE (fp.min x5 x5)) (fp.div RNE (fp.abs x4) (fp.div RNE x7 x1)))) (fp.add RNE (fp.min (fp.neg (fp.div RNE x6 x6)) (fp.div RNE (fp.sqrt RNE x9) (fp.min x9 x7))) (fp.min (fp.div RNE (fp.min x4 x9) (fp.div RNE x0 x8)) (fp.div RNE (fp.min x7 x2) (fp.sqrt RNE x7))))) (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE x4 (fp.sub RNE x4 x1))) (fp.div RNE (fp.div RNE x7 x1) (fp.roundToIntegral RNE (fp.mul RNE x5 x0)))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x7 x3) (fp.neg x0))) (fp.sqrt RNE (fp.abs (fp.div RNE x2 x9)))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.neg (fp.sqrt RNE x3)) (fp.min (fp.abs (fp.div RNE x5 x3)) (fp.roundToIntegral RNE (fp.max x3 x8)))) (fp.div RNE (fp.div RNE (fp.sqrt RNE x7) (fp.neg (fp.min x4 x3))) (fp.sub RNE (fp.max x1 x6) (fp.div RNE x9 (fp.max x8 x4))))) (fp.neg (fp.div RNE (fp.div RNE (fp.div RNE x8 (fp.div RNE x5 x9)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x6))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.div RNE x8 x6))))))))(check-sat)