;  time  = {'mathsat': 6.101561069488525}
;  terms = 116
;  score = 6.101561069488525
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.max (fp.add RNE (fp.min (fp.sqrt RNE (fp.div RNE x4 x0)) (fp.roundToIntegral RNE (fp.div RNE x2 x7))) (fp.div RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x1 x4) (fp.neg x1)) (fp.neg (fp.sub RNE x9 x0))) (fp.div RNE (fp.add RNE (fp.abs x8) (fp.roundToIntegral RNE x5)) (fp.sub RNE (fp.min x9 x5) (fp.max x8 x0))))) (fp.min (fp.max (fp.add RNE (fp.max (fp.min x9 x0) (fp.div RNE x4 x7)) (fp.max (fp.sqrt RNE x3) (fp.div RNE x5 x8))) (fp.sqrt RNE (fp.mul RNE (fp.mul RNE x1 x5) (fp.sub RNE x7 x0)))) (fp.roundToIntegral RNE (fp.neg (fp.neg (fp.neg x8)))))) (fp.sub RNE (fp.add RNE (fp.roundToIntegral RNE (fp.neg (fp.div RNE x8 x9))) (fp.sub RNE (fp.min (fp.add RNE x6 (fp.sub RNE x4 x3)) (fp.div RNE x7 x4)) (fp.sqrt RNE (fp.add RNE (fp.add RNE x5 x6) (fp.mul RNE x5 x0))))) (fp.min (fp.sqrt RNE (fp.abs (fp.div RNE (fp.roundToIntegral RNE x2) (fp.neg x5)))) (fp.div RNE (fp.div RNE (fp.abs (fp.sub RNE x9 x4)) (fp.neg (fp.max x4 x7))) (fp.min (fp.neg (fp.neg x6)) (fp.neg (fp.neg x7))))))))(check-sat)