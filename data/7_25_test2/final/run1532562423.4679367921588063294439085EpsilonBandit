;  time  = {'mathsat': 189.42048501968384}
;  terms = 89
;  score = 189.42048501968384
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sqrt RNE (fp.div RNE (fp.neg (fp.div RNE (fp.div RNE x6 (fp.add RNE x2 x8)) (fp.abs x6))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE x9 x2) (fp.div RNE x6 x1)) (fp.sqrt RNE (fp.abs x3))) (fp.sub RNE (fp.sqrt RNE (fp.div RNE x8 x3)) (fp.div RNE (fp.div RNE x6 x9) (fp.abs x8)))))) (fp.div RNE (fp.abs (fp.div RNE (fp.min (fp.sub RNE x1 x7) (fp.add RNE x3 x1)) (fp.div RNE (fp.div RNE x7 (fp.abs x7)) (fp.neg x7)))) (fp.add RNE (fp.div RNE (fp.mul RNE (fp.sqrt RNE x1) (fp.sub RNE x6 x5)) (fp.div RNE (fp.div RNE x9 x2) (fp.abs x2))) (fp.div RNE (fp.div RNE (fp.sub RNE x3 x5) (fp.div RNE (fp.neg x4) (fp.abs x0))) (fp.div RNE (fp.mul RNE (fp.div RNE x2 x4) (fp.neg x7)) (fp.sub RNE (fp.sub RNE x9 x3) (fp.abs x9))))))))(check-sat)