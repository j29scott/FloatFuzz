;  time  = {'mathsat': 56.61347413063049}
;  terms = 75
;  score = 56.61347413063049
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.div RNE (fp.mul RNE (fp.max x6 x2) (fp.roundToIntegral RNE x3)) (fp.sqrt RNE (fp.sqrt RNE x9))) (fp.div RNE (fp.mul RNE (fp.sub RNE x4 x0) (fp.mul RNE x7 x9)) (fp.mul RNE (fp.max x6 x5) (fp.min x2 x1)))) (fp.min (fp.abs (fp.roundToIntegral RNE (fp.min x1 x9))) (fp.sub RNE (fp.min (fp.abs x9) (fp.abs x2)) (fp.sub RNE (fp.abs x2) (fp.neg x5))))) (fp.max (fp.add RNE (fp.roundToIntegral RNE (fp.min (fp.roundToIntegral RNE x9) (fp.neg x2))) (fp.sqrt RNE (fp.sub RNE (fp.min x6 x9) (fp.neg x4)))) (fp.neg (fp.min (fp.mul RNE (fp.min x1 x9) (fp.mul RNE x3 x7)) (fp.max (fp.neg x1) (fp.sub RNE x5 x1)))))))(check-sat)