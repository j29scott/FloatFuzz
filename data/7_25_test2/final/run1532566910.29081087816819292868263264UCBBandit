;  time  = {'mathsat': 578.6414141654968}
;  terms = 118
;  score = 578.6414141654968
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.min (fp.min (fp.min (fp.div RNE (fp.div RNE x5 x1) (fp.max x1 x8)) (fp.div RNE (fp.sub RNE x8 x4) (fp.div RNE (fp.max x3 x6) (fp.div RNE x3 x9)))) (fp.sub RNE (fp.roundToIntegral RNE (fp.sub RNE x5 x7)) (fp.sqrt RNE (fp.div RNE x0 (fp.mul RNE x8 x8))))) (fp.mul RNE (fp.abs (fp.mul RNE (fp.div RNE x2 (fp.div RNE x4 x3)) (fp.min x3 x8))) (fp.div RNE (fp.sub RNE (fp.div RNE x5 x4) (fp.div RNE x6 (fp.div RNE x4 x7))) (fp.div RNE (fp.mul RNE x4 x6) (fp.roundToIntegral RNE (fp.div RNE x3 x0)))))) (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.div RNE x7 x6) (fp.mul RNE x3 x3)) (fp.div RNE (fp.div RNE x2 (fp.sqrt RNE x4)) (fp.mul RNE x7 x5))) (fp.add RNE (fp.neg (fp.div RNE x8 x4)) (fp.add RNE (fp.div RNE x6 x1) (fp.div RNE x3 x0)))) (fp.mul RNE (fp.div RNE (fp.abs (fp.roundToIntegral RNE x5)) (fp.div RNE (fp.div RNE x0 (fp.max x0 x9)) (fp.div RNE x8 (fp.min x9 x1)))) (fp.sub RNE (fp.sub RNE (fp.abs x1) (fp.div RNE x1 x3)) (fp.roundToIntegral RNE (fp.abs x9)))))))(check-sat)