;  time  = {'mathsat': 455.0767958164215}
;  terms = 89
;  score = 455.0767958164215
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.abs (fp.add RNE (fp.min x7 x4) (fp.div RNE x4 x7))) (fp.min (fp.abs (fp.sub RNE x3 x3)) (fp.max (fp.abs x3) (fp.add RNE x4 x2)))) (fp.sub RNE (fp.abs (fp.div RNE (fp.max x8 x2) (fp.sub RNE x8 x3))) (fp.add RNE (fp.sub RNE (fp.add RNE x4 x6) (fp.neg x0)) (fp.sub RNE (fp.add RNE x4 x4) (fp.add RNE x8 x2))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.mul RNE (fp.div RNE x0 (fp.min x3 x7)) (fp.mul RNE x3 x8)) (fp.sub RNE (fp.mul RNE x6 x8) (fp.add RNE x7 x5))) (fp.div RNE (fp.add RNE (fp.neg x0) (fp.roundToIntegral RNE x3)) (fp.sqrt RNE (fp.min x3 x3)))) (fp.add RNE (fp.sqrt RNE (fp.max (fp.add RNE x4 x8) (fp.roundToIntegral RNE x9))) (fp.neg (fp.sub RNE (fp.roundToIntegral RNE x6) (fp.div RNE x2 x6)))))))(check-sat)