;  time  = {'mathsat': 160.20728468894958}
;  terms = 82
;  score = 160.20728468894958
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x9 x2) (fp.div RNE (fp.div RNE x9 x8) (fp.min x9 x1))) (fp.div RNE (fp.div RNE (fp.div RNE x0 x1) (fp.div RNE x8 x7)) (fp.div RNE (fp.div RNE x1 x3) (fp.sub RNE x3 x8)))) (fp.div RNE (fp.max (fp.div RNE x3 x0) (fp.div RNE x6 x4)) (fp.roundToIntegral RNE (fp.min x9 x0)))) (fp.div RNE (fp.abs (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE x2 x6)) (fp.max (fp.abs x5) (fp.div RNE x1 x0)))) (fp.div RNE (fp.add RNE (fp.min (fp.min x9 x4) (fp.div RNE x7 x4)) (fp.sqrt RNE (fp.div RNE x4 x3))) (fp.add RNE (fp.div RNE (fp.max x1 x0) (fp.sqrt RNE x0)) (fp.mul RNE (fp.div RNE x4 x5) (fp.max x4 x3))))))))(check-sat)