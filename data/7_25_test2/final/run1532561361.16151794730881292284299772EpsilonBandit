;  time  = {'mathsat': 564.9813935756683}
;  terms = 113
;  score = 564.9813935756683
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x8 x4) (fp.div RNE x4 x0)) (fp.sub RNE (fp.div RNE (fp.abs x0) (fp.div RNE x9 x5)) (fp.neg (fp.min x1 x9)))) (fp.abs (fp.abs (fp.div RNE (fp.abs x8) (fp.div RNE x4 x3))))) (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.neg x3) (fp.div RNE (fp.roundToIntegral RNE x7) (fp.neg x3))) (fp.div RNE (fp.max x0 x8) (fp.min x9 x4))) (fp.div RNE (fp.div RNE (fp.sub RNE x1 x8) (fp.add RNE (fp.abs x9) (fp.div RNE x4 x8))) (fp.div RNE (fp.min x5 x3) (fp.neg x4))))) (fp.div RNE (fp.neg (fp.div RNE (fp.div RNE (fp.sub RNE x2 x2) (fp.sub RNE x4 x6)) (fp.mul RNE (fp.neg x0) (fp.div RNE x6 x7)))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x2 x1) (fp.div RNE (fp.min x7 x1) (fp.roundToIntegral RNE x8))) (fp.div RNE (fp.div RNE (fp.neg x7) (fp.min x4 x8)) (fp.mul RNE (fp.sqrt RNE x7) (fp.div RNE x7 x7)))) (fp.sqrt RNE (fp.sqrt RNE (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.div RNE x8 x5))))))))(check-sat)