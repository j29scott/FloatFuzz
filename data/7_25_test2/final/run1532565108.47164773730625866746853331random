;  time  = {'mathsat': 302.40795636177063}
;  terms = 75
;  score = 302.40795636177063
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.abs (fp.min (fp.roundToIntegral RNE (fp.max (fp.min x3 x3) (fp.sub RNE x4 x7))) (fp.neg (fp.max (fp.abs x2) (fp.roundToIntegral RNE x6))))) (fp.sub RNE (fp.add RNE (fp.add RNE (fp.sub RNE (fp.min x4 x8) (fp.div RNE (fp.sub RNE x6 x4) (fp.neg x5))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x7 x1) (fp.neg x4)) (fp.roundToIntegral RNE (fp.abs x0)))) (fp.neg (fp.mul RNE (fp.sub RNE x1 x6) (fp.add RNE x7 x3)))) (fp.div RNE (fp.abs (fp.min (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x6)) (fp.mul RNE (fp.max x2 x3) (fp.mul RNE x6 x7)))) (fp.roundToIntegral RNE (fp.sub RNE (fp.add RNE (fp.min x4 x3) (fp.abs x2)) (fp.neg (fp.div RNE x6 x6))))))))(check-sat)