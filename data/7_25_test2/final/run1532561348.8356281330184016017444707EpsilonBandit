;  time  = {'mathsat': 291.4274938106537}
;  terms = 83
;  score = 291.4274938106537
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.min (fp.neg (fp.div RNE (fp.sqrt RNE x4) (fp.div RNE x5 (fp.div RNE x5 x6)))) (fp.min (fp.abs (fp.sqrt RNE x1)) (fp.abs (fp.sub RNE x4 x6)))) (fp.div RNE (fp.abs (fp.max (fp.roundToIntegral RNE x4) (fp.min x6 x3))) (fp.min (fp.div RNE (fp.add RNE (fp.min x2 x2) (fp.sqrt RNE x9)) (fp.div RNE (fp.neg x6) (fp.max x8 x1))) (fp.roundToIntegral RNE (fp.max (fp.max x7 x7) (fp.div RNE x3 x8)))))) (fp.mul RNE (fp.neg (fp.add RNE (fp.add RNE (fp.mul RNE x6 x5) (fp.max x4 x0)) (fp.div RNE (fp.min x0 x8) (fp.mul RNE x4 x2)))) (fp.div RNE (fp.sqrt RNE (fp.abs (fp.abs x6))) (fp.sub RNE (fp.roundToIntegral RNE (fp.mul RNE x6 x1)) (fp.min (fp.sqrt RNE x2) (fp.min x4 x4)))))))(check-sat)