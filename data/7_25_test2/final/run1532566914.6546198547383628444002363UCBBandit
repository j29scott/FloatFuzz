;  time  = {'mathsat': 213.87381649017334}
;  terms = 147
;  score = 213.87381649017334
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.div RNE (fp.div RNE (fp.sqrt RNE (fp.mul RNE x0 x1)) (fp.div RNE (fp.div RNE x9 x9) (fp.min (fp.sqrt RNE x6) (fp.div RNE x8 x6)))) (fp.max (fp.min (fp.div RNE x7 x4) (fp.add RNE x1 x6)) (fp.roundToIntegral RNE (fp.sub RNE x5 x1)))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x6 x6) (fp.neg x3)) (fp.div RNE (fp.div RNE x3 (fp.div RNE x0 x4)) (fp.div RNE x2 (fp.div RNE x3 x1)))) (fp.div RNE (fp.sqrt RNE (fp.div RNE (fp.div RNE x9 x0) (fp.sqrt RNE x0))) (fp.neg (fp.neg (fp.sqrt RNE x1)))))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.max (fp.neg x8) (fp.neg x6)) (fp.div RNE (fp.sub RNE (fp.sub RNE x7 x9) (fp.max x5 x1)) (fp.div RNE (fp.sqrt RNE x2) (fp.sub RNE x9 x8)))) (fp.div RNE (fp.roundToIntegral RNE (fp.max x1 x2)) (fp.div RNE (fp.neg x7) (fp.div RNE (fp.div RNE x0 x8) (fp.min x7 x1))))) (fp.sub RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.div RNE (fp.roundToIntegral RNE x4) (fp.sub RNE x4 x9))) (fp.div RNE (fp.div RNE (fp.div RNE x7 x8) (fp.min x3 x8)) (fp.div RNE (fp.neg x7) (fp.sqrt RNE x5)))) (fp.div RNE (fp.div RNE (fp.min (fp.add RNE x9 x6) (fp.div RNE x1 x6)) (fp.div RNE (fp.div RNE x7 x5) (fp.div RNE x2 x1))) (fp.min (fp.neg (fp.neg x1)) (fp.mul RNE (fp.add RNE x2 x1) (fp.sub RNE x6 x3))))))))(check-sat)