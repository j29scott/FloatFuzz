;  time  = {'mathsat': 262.17323875427246}
;  terms = 108
;  score = 262.17323875427246
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE x6 x8) (fp.div RNE x7 x4)))) (fp.min (fp.neg (fp.mul RNE (fp.sub RNE (fp.mul RNE x4 x6) (fp.div RNE x5 x7)) (fp.sub RNE (fp.sub RNE x5 x7) (fp.add RNE x7 x8)))) (fp.sub RNE (fp.div RNE (fp.abs (fp.sqrt RNE x3)) (fp.neg (fp.roundToIntegral RNE x1))) (fp.sub RNE (fp.add RNE (fp.neg x3) (fp.sub RNE x0 x2)) (fp.abs (fp.add RNE x6 x4)))))) (fp.add RNE (fp.sub RNE (fp.add RNE (fp.min (fp.div RNE x8 x9) (fp.div RNE x6 (fp.roundToIntegral RNE x5))) (fp.div RNE (fp.div RNE x8 x3) (fp.div RNE x8 x2))) (fp.neg (fp.sub RNE (fp.abs x9) (fp.sub RNE x7 x9)))) (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.div RNE x4 (fp.div RNE x2 x3)) (fp.div RNE (fp.div RNE x1 x6) (fp.abs x2))) (fp.div RNE (fp.neg x7) (fp.roundToIntegral RNE (fp.sqrt RNE x2)))) (fp.div RNE (fp.sub RNE (fp.sub RNE x1 x1) (fp.div RNE x1 x4)) (fp.sub RNE (fp.div RNE x7 x7) (fp.div RNE x5 (fp.sqrt RNE x3))))))))(check-sat)