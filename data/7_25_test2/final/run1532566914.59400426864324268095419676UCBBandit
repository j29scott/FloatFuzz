;  time  = {'mathsat': 155.53433394432068}
;  terms = 98
;  score = 155.53433394432068
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.div RNE (fp.sub RNE (fp.add RNE (fp.mul RNE x0 x2) (fp.neg x7)) (fp.max (fp.neg x5) (fp.min x6 x7))) (fp.sqrt RNE (fp.sqrt RNE (fp.div RNE x1 x6)))) (fp.abs (fp.div RNE (fp.div RNE (fp.div RNE x9 (fp.roundToIntegral RNE x3)) (fp.div RNE x0 x1)) (fp.neg (fp.mul RNE x4 x5))))) (fp.sub RNE (fp.max (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE x1) (fp.div RNE x6 (fp.abs x9))) (fp.sqrt RNE (fp.div RNE (fp.min x1 x4) (fp.neg x1)))) (fp.add RNE (fp.neg (fp.add RNE x5 x3)) (fp.roundToIntegral RNE (fp.max x9 x4)))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE x2 x6) (fp.min (fp.max x5 x8) (fp.roundToIntegral RNE x2))) (fp.div RNE (fp.abs x0) (fp.sub RNE (fp.abs x6) (fp.div RNE x7 x4)))) (fp.div RNE (fp.div RNE (fp.div RNE x8 x2) (fp.div RNE x6 x3)) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x0 x0)) (fp.roundToIntegral RNE (fp.abs x8))))))))(check-sat)