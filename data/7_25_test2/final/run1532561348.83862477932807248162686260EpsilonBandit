;  time  = {'mathsat': 425.0212302207947}
;  terms = 107
;  score = 425.0212302207947
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.sub RNE (fp.div RNE (fp.div RNE (fp.div RNE x7 (fp.neg x5)) (fp.min x6 x2)) (fp.div RNE (fp.sub RNE x2 x9) (fp.mul RNE (fp.div RNE x8 x6) (fp.abs x7)))) (fp.neg (fp.div RNE (fp.div RNE x7 x5) (fp.div RNE (fp.div RNE x7 x9) (fp.div RNE x2 x1))))) (fp.abs (fp.sub RNE (fp.roundToIntegral RNE (fp.add RNE x8 x9)) (fp.div RNE (fp.abs x0) (fp.sub RNE x5 x2))))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.neg (fp.neg x7)) (fp.div RNE (fp.div RNE x7 x7) (fp.roundToIntegral RNE x1))) (fp.div RNE (fp.neg (fp.sub RNE x1 x7)) (fp.roundToIntegral RNE (fp.add RNE (fp.mul RNE x0 x3) (fp.sub RNE x3 x2))))) (fp.sub RNE (fp.div RNE (fp.div RNE (fp.div RNE x4 x1) (fp.sqrt RNE (fp.add RNE x4 x5))) (fp.div RNE (fp.sub RNE (fp.mul RNE x1 x7) (fp.div RNE x0 x0)) (fp.min (fp.mul RNE x5 x7) (fp.sqrt RNE x7)))) (fp.div RNE (fp.sqrt RNE (fp.div RNE x3 x9)) (fp.add RNE (fp.roundToIntegral RNE x5) (fp.div RNE x3 (fp.roundToIntegral RNE x6))))))))(check-sat)