;  time  = {'mathsat': 158.2003879547119}
;  terms = 126
;  score = 158.2003879547119
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.max (fp.min x0 x6) (fp.div RNE x6 (fp.div RNE x3 x1))) (fp.sub RNE (fp.abs x5) (fp.div RNE x0 x6))) (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE x5)) (fp.div RNE (fp.div RNE (fp.mul RNE x5 x6) (fp.roundToIntegral RNE x2)) (fp.add RNE (fp.add RNE x8 x8) (fp.max x9 x8))))) (fp.mul RNE (fp.add RNE (fp.div RNE (fp.abs x2) (fp.abs (fp.sub RNE x0 x1))) (fp.div RNE (fp.abs x3) (fp.div RNE x9 (fp.div RNE x8 x9)))) (fp.div RNE (fp.div RNE (fp.div RNE x8 (fp.min x6 x6)) (fp.max x3 x7)) (fp.div RNE (fp.max (fp.div RNE x4 x4) (fp.roundToIntegral RNE x4)) (fp.abs (fp.neg x9)))))) (fp.min (fp.sub RNE (fp.div RNE (fp.div RNE (fp.div RNE x3 (fp.div RNE x7 x3)) (fp.div RNE x2 x3)) (fp.neg (fp.min x0 x6))) (fp.mul RNE (fp.div RNE (fp.neg x5) (fp.abs x9)) (fp.div RNE (fp.div RNE x1 x6) (fp.min x2 x8)))) (fp.min (fp.abs (fp.div RNE (fp.div RNE x8 x6) (fp.sub RNE (fp.mul RNE x3 x4) (fp.add RNE x5 x2)))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x0 x8) (fp.div RNE x8 (fp.min x6 x6))))))))(check-sat)