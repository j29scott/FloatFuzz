;  time  = {'mathsat': 128.7544445991516}
;  terms = 63
;  score = 128.7544445991516
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sqrt RNE (fp.mul RNE (fp.min (fp.roundToIntegral RNE (fp.add RNE x3 x3)) (fp.min (fp.abs x2) (fp.mul RNE x8 x9))) (fp.sub RNE (fp.sub RNE (fp.add RNE x9 x0) (fp.max x3 x4)) (fp.mul RNE (fp.div RNE x0 x3) (fp.mul RNE x4 x5))))) (fp.sub RNE (fp.abs (fp.max (fp.add RNE (fp.min x8 x0) (fp.neg (fp.add RNE x0 x7))) (fp.div RNE (fp.div RNE x8 x7) (fp.abs x4)))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.sqrt RNE x0)) (fp.neg (fp.add RNE x0 x2))) (fp.neg (fp.div RNE (fp.min x2 x5) (fp.div RNE x4 x3)))))))(check-sat)