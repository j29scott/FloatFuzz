;  time  = {'mathsat': 224.18534994125366}
;  terms = 149
;  score = 224.18534994125366
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x4 x2) (fp.mul RNE (fp.abs x8) (fp.mul RNE x6 x1))) (fp.roundToIntegral RNE (fp.div RNE (fp.min x1 x5) (fp.div RNE x9 x2)))) (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE x7 x1)) (fp.div RNE (fp.mul RNE x6 x3) (fp.max x0 x4))) (fp.sub RNE (fp.abs (fp.min x6 x6)) (fp.max (fp.sqrt RNE x0) (fp.abs x9))))) (fp.div RNE (fp.div RNE (fp.max (fp.div RNE x1 x8) (fp.max x5 x3)) (fp.div RNE (fp.sub RNE (fp.sqrt RNE x2) (fp.sub RNE x2 x1)) (fp.add RNE (fp.mul RNE x0 x6) (fp.neg x1)))) (fp.div RNE (fp.div RNE (fp.abs x1) (fp.div RNE (fp.max x9 x0) (fp.add RNE x2 x7))) (fp.max (fp.div RNE (fp.div RNE x6 x3) (fp.div RNE x2 x0)) (fp.mul RNE (fp.sqrt RNE x6) (fp.max x1 x4)))))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.mul RNE (fp.div RNE x5 x9) (fp.sub RNE x6 x9)) (fp.sqrt RNE (fp.sqrt RNE x0))) (fp.div RNE (fp.div RNE (fp.neg x7) (fp.mul RNE (fp.div RNE x1 x1) (fp.neg x0))) (fp.abs (fp.min x8 x9)))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x0 x8) (fp.neg (fp.abs x6))) (fp.mul RNE (fp.neg x9) (fp.abs x7))) (fp.sub RNE (fp.div RNE (fp.min x5 x4) (fp.roundToIntegral RNE x0)) (fp.add RNE (fp.div RNE x6 x7) (fp.div RNE x6 (fp.sub RNE x2 x9))))))))(check-sat)