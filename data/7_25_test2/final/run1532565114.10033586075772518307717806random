;  time  = {'mathsat': 112.3458878993988}
;  terms = 83
;  score = 112.3458878993988
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.neg (fp.min x0 x0)) (fp.div RNE (fp.max x2 x5) (fp.mul RNE x7 x8)))) (fp.add RNE (fp.div RNE (fp.div RNE (fp.abs x6) (fp.sub RNE x4 x0)) (fp.max (fp.mul RNE x5 x5) (fp.div RNE x6 (fp.sqrt RNE x5)))) (fp.div RNE (fp.max (fp.sub RNE x1 x4) (fp.abs x8)) (fp.sqrt RNE (fp.roundToIntegral RNE x0))))) (fp.min (fp.div RNE (fp.neg (fp.sqrt RNE (fp.mul RNE x0 x9))) (fp.abs (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.neg x3)))) (fp.div RNE (fp.mul RNE (fp.max (fp.min x7 x5) (fp.div RNE x0 x9)) (fp.roundToIntegral RNE (fp.add RNE x4 x9))) (fp.add RNE (fp.neg (fp.sub RNE (fp.max x5 x7) (fp.mul RNE x8 x2))) (fp.abs (fp.mul RNE (fp.add RNE x6 x9) (fp.sqrt RNE x9))))))))(check-sat)