;  time  = {'mathsat': 600}
;  terms = 80
;  score = 600
;  stdout= {'mathsat': ''}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.max (fp.div RNE (fp.max x1 x9) (fp.div RNE x5 x4)) (fp.sqrt RNE (fp.max x5 x8))) (fp.min (fp.add RNE (fp.abs x2) (fp.sub RNE x4 x7)) (fp.add RNE (fp.div RNE x7 x3) (fp.sub RNE x1 x8)))) (fp.neg (fp.div RNE (fp.sub RNE (fp.abs x5) (fp.div RNE x3 (fp.sqrt RNE x7))) (fp.div RNE (fp.add RNE x9 x6) (fp.sqrt RNE x0))))) (fp.sub RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.neg x2) (fp.neg x7))) (fp.sqrt RNE (fp.div RNE (fp.sub RNE x0 x6) (fp.div RNE x2 (fp.add RNE x7 x4))))) (fp.mul RNE (fp.max (fp.sqrt RNE (fp.roundToIntegral RNE x3)) (fp.neg (fp.sub RNE x9 x5))) (fp.add RNE (fp.roundToIntegral RNE (fp.mul RNE x4 x9)) (fp.abs (fp.div RNE x8 x1)))))))(check-sat)