;  time  = {'mathsat': 437.3743534088135}
;  terms = 159
;  score = 437.3743534088135
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.abs x9) (fp.div RNE (fp.mul RNE x1 x3) (fp.sub RNE x5 x9))) (fp.add RNE (fp.div RNE x0 x7) (fp.add RNE x1 x7))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.max x5 x4) (fp.min x3 x2)) (fp.sub RNE (fp.div RNE x9 x0) (fp.max x2 x2))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x0 x5) (fp.sqrt RNE x4)) (fp.div RNE (fp.div RNE x7 x4) (fp.roundToIntegral RNE x5))))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE (fp.min (fp.div RNE x2 x9) (fp.add RNE x2 x8)) (fp.abs (fp.abs x0))) (fp.min (fp.div RNE (fp.div RNE x1 x8) (fp.div RNE x8 x4)) (fp.div RNE (fp.neg x2) (fp.min x9 x7)))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE x4) (fp.mul RNE (fp.div RNE x8 x7) (fp.div RNE x5 x2))) (fp.div RNE (fp.div RNE x2 x9) (fp.div RNE x9 x4))) (fp.div RNE (fp.max (fp.sqrt RNE x3) (fp.div RNE x9 x0)) (fp.div RNE (fp.div RNE (fp.div RNE x1 x3) (fp.div RNE x3 x2)) (fp.min (fp.sub RNE x7 x9) (fp.add RNE x0 x7))))) (fp.div RNE (fp.max (fp.div RNE (fp.min (fp.neg x0) (fp.div RNE x7 x5)) (fp.div RNE (fp.abs x8) (fp.abs x8))) (fp.min (fp.min (fp.sub RNE x5 x2) (fp.roundToIntegral RNE x7)) (fp.sqrt RNE (fp.roundToIntegral RNE x1)))) (fp.sqrt RNE (fp.mul RNE (fp.div RNE (fp.div RNE x1 x0) (fp.add RNE x5 x6)) (fp.add RNE (fp.div RNE x2 x4) (fp.div RNE x0 x9))))))))(check-sat)