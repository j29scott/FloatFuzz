;  time  = {'mathsat': 37.627344608306885}
;  terms = 75
;  score = 37.627344608306885
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.mul RNE (fp.max (fp.min (fp.sub RNE x7 x0) (fp.sub RNE x0 x0)) (fp.roundToIntegral RNE (fp.abs x3))) (fp.neg (fp.roundToIntegral RNE (fp.neg x3)))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.div RNE x1 x5) (fp.mul RNE x4 x3)) (fp.add RNE (fp.min x7 x4) (fp.min x1 x4))) (fp.abs (fp.sqrt RNE (fp.abs x8))))) (fp.div RNE (fp.sqrt RNE (fp.max (fp.sub RNE (fp.sub RNE x1 x7) (fp.neg x2)) (fp.min (fp.sub RNE x5 x3) (fp.min x5 x6)))) (fp.div RNE (fp.roundToIntegral RNE (fp.max (fp.sqrt RNE x0) (fp.neg (fp.max x8 x1)))) (fp.sub RNE (fp.sqrt RNE (fp.mul RNE x1 x1)) (fp.add RNE (fp.min x2 x0) (fp.mul RNE x5 x2)))))))(check-sat)