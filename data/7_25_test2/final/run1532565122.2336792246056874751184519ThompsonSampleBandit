;  time  = {'mathsat': 73.0054886341095}
;  terms = 102
;  score = 73.0054886341095
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.neg (fp.div RNE (fp.div RNE x8 x9) (fp.min x4 x8))) (fp.div RNE (fp.div RNE (fp.sub RNE (fp.abs x3) (fp.sqrt RNE x8)) (fp.div RNE (fp.add RNE x5 x2) (fp.div RNE x4 x3))) (fp.add RNE (fp.neg (fp.sub RNE x9 x9)) (fp.max (fp.div RNE x3 x0) (fp.mul RNE x0 x2))))) (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.max x7 x6) (fp.div RNE x9 x9)) (fp.div RNE (fp.min x0 x8) (fp.div RNE x9 (fp.div RNE x4 x5)))) (fp.div RNE (fp.div RNE (fp.div RNE x3 (fp.div RNE x1 x9)) (fp.sub RNE (fp.abs x2) (fp.div RNE x1 x9))) (fp.abs (fp.abs (fp.div RNE x8 x8)))))) (fp.div RNE (fp.neg (fp.roundToIntegral RNE (fp.sqrt RNE (fp.min x7 x3)))) (fp.mul RNE (fp.add RNE (fp.div RNE (fp.div RNE x7 (fp.div RNE x7 x7)) (fp.sub RNE (fp.max x9 x3) (fp.sqrt RNE x8))) (fp.neg (fp.sqrt RNE x9))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.min x9 x7)))))))(check-sat)