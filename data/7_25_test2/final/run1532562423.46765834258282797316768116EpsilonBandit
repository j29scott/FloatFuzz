;  time  = {'mathsat': 126.96124339103699}
;  terms = 109
;  score = 126.96124339103699
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.sqrt RNE (fp.div RNE (fp.neg (fp.sqrt RNE x9)) (fp.sub RNE (fp.neg x1) (fp.max x4 x4)))) (fp.max (fp.div RNE (fp.max (fp.roundToIntegral RNE x2) (fp.abs x6)) (fp.max (fp.roundToIntegral RNE (fp.max x6 x5)) (fp.max (fp.min x9 x0) (fp.div RNE x8 x1)))) (fp.sub RNE (fp.mul RNE (fp.div RNE x3 x7) (fp.add RNE x2 x4)) (fp.neg (fp.div RNE x6 x4))))) (fp.min (fp.max (fp.min (fp.div RNE (fp.mul RNE x2 x9) (fp.div RNE (fp.div RNE x2 x8) (fp.max x0 x5))) (fp.max (fp.div RNE x3 x1) (fp.div RNE x3 x7))) (fp.div RNE (fp.div RNE (fp.sub RNE x1 x4) (fp.sqrt RNE x9)) (fp.sub RNE (fp.div RNE (fp.mul RNE x1 x0) (fp.roundToIntegral RNE x7)) (fp.div RNE (fp.sub RNE x7 x4) (fp.div RNE x1 x6))))) (fp.div RNE (fp.max (fp.sqrt RNE (fp.roundToIntegral RNE x6)) (fp.min (fp.div RNE x4 (fp.sub RNE x6 x4)) (fp.roundToIntegral RNE x3))) (fp.max (fp.neg (fp.div RNE x9 (fp.div RNE x9 x5))) (fp.roundToIntegral RNE (fp.sqrt RNE x8)))))))(check-sat)