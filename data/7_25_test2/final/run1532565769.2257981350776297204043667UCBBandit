;  time  = {'mathsat': 600}
;  terms = 122
;  score = 600
;  stdout= {'mathsat': ''}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.abs x0) (fp.min (fp.neg x2) (fp.sub RNE x7 x1))) (fp.sub RNE (fp.div RNE x5 x4) (fp.sqrt RNE x2))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.max x1 x5) (fp.roundToIntegral RNE x9)) (fp.mul RNE (fp.div RNE x7 x1) (fp.sub RNE x0 x5))) (fp.div RNE (fp.div RNE (fp.max x6 x8) (fp.min x4 x9)) (fp.sub RNE (fp.sub RNE x0 x4) (fp.div RNE x2 x6))))) (fp.abs (fp.mul RNE (fp.div RNE (fp.div RNE x7 (fp.sub RNE x8 x9)) (fp.div RNE x7 (fp.min x6 x1))) (fp.abs (fp.div RNE x1 (fp.roundToIntegral RNE x8)))))) (fp.add RNE (fp.div RNE (fp.div RNE (fp.max (fp.div RNE x3 (fp.div RNE x9 x5)) (fp.div RNE x0 x2)) (fp.mul RNE (fp.div RNE (fp.max x9 x3) (fp.add RNE x2 x3)) (fp.sub RNE (fp.div RNE x8 x4) (fp.div RNE x2 x9)))) (fp.sub RNE (fp.add RNE (fp.div RNE x8 x2) (fp.min x9 x8)) (fp.max (fp.max x7 x7) (fp.div RNE x0 (fp.div RNE x1 x1))))) (fp.abs (fp.neg (fp.div RNE (fp.div RNE x5 (fp.div RNE x3 x2)) (fp.div RNE x9 x5)))))))(check-sat)