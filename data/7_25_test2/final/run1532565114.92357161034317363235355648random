;  time  = {'mathsat': 162.9631495475769}
;  terms = 102
;  score = 162.9631495475769
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.mul RNE (fp.min (fp.min (fp.abs x7) (fp.min x5 x0)) (fp.div RNE (fp.add RNE x3 x0) (fp.neg x5))) (fp.sqrt RNE (fp.mul RNE (fp.mul RNE (fp.sqrt RNE x3) (fp.min x4 x3)) (fp.abs (fp.sqrt RNE x7))))) (fp.sqrt RNE (fp.max (fp.sqrt RNE (fp.abs (fp.roundToIntegral RNE x2))) (fp.sqrt RNE (fp.sub RNE (fp.mul RNE x9 x1) (fp.add RNE x6 x4)))))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.abs (fp.div RNE x9 x7)) (fp.abs (fp.neg x0))) (fp.add RNE (fp.sub RNE (fp.max x4 x5) (fp.add RNE x4 x0)) (fp.mul RNE (fp.max x4 x9) (fp.mul RNE x1 x3)))) (fp.div RNE (fp.add RNE (fp.neg (fp.max (fp.mul RNE x5 x1) (fp.div RNE x8 x8))) (fp.neg (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.sub RNE x0 x8)))) (fp.add RNE (fp.min (fp.mul RNE (fp.abs x4) (fp.div RNE x5 x8)) (fp.sqrt RNE (fp.mul RNE x8 x5))) (fp.neg (fp.max (fp.max x0 x1) (fp.abs x4))))))))(check-sat)