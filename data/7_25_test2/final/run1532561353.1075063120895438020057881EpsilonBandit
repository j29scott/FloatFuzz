;  time  = {'mathsat': 137.41583967208862}
;  terms = 104
;  score = 137.41583967208862
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x8 x0) (fp.neg x9)) (fp.div RNE (fp.abs x3) (fp.div RNE x9 x7))) (fp.min (fp.div RNE (fp.sqrt RNE x5) (fp.sqrt RNE (fp.add RNE x1 x1))) (fp.div RNE (fp.add RNE x6 x3) (fp.div RNE x0 x6)))) (fp.div RNE (fp.min (fp.div RNE (fp.div RNE x6 (fp.div RNE x8 x5)) (fp.add RNE (fp.roundToIntegral RNE x5) (fp.mul RNE x1 x2))) (fp.div RNE (fp.div RNE x7 (fp.roundToIntegral RNE x2)) (fp.div RNE x7 (fp.mul RNE x5 x6)))) (fp.sub RNE (fp.div RNE (fp.div RNE x1 (fp.min x5 x4)) (fp.abs x2)) (fp.div RNE (fp.div RNE x8 x5) (fp.div RNE x6 x9))))) (fp.neg (fp.div RNE (fp.div RNE (fp.sqrt RNE (fp.min x8 x7)) (fp.sub RNE (fp.add RNE (fp.abs x1) (fp.div RNE x1 x9)) (fp.sub RNE (fp.min x9 x0) (fp.max x8 x1)))) (fp.mul RNE (fp.sqrt RNE (fp.mul RNE x3 x7)) (fp.div RNE (fp.min x0 x6) (fp.max x8 x2)))))))(check-sat)