;  time  = {'mathsat': 336.8266203403473}
;  terms = 79
;  score = 336.8266203403473
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.div RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x0 x5) (fp.div RNE x3 x7)) (fp.max (fp.add RNE x8 x0) (fp.div RNE x4 (fp.min x4 x8)))) (fp.div RNE (fp.max (fp.sqrt RNE x9) (fp.sub RNE x3 x6)) (fp.div RNE (fp.max x0 x8) (fp.add RNE x8 x4)))) (fp.div RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.neg x3))) (fp.div RNE (fp.div RNE (fp.sub RNE x7 x7) (fp.div RNE x7 (fp.max x8 x1))) (fp.div RNE (fp.div RNE x2 (fp.div RNE x4 x0)) (fp.add RNE x8 x6))))) (fp.sqrt RNE (fp.add RNE (fp.neg (fp.mul RNE (fp.sub RNE x0 x6) (fp.sqrt RNE x4))) (fp.sub RNE (fp.div RNE (fp.abs x5) (fp.div RNE x5 x7)) (fp.div RNE (fp.sqrt RNE x0) (fp.sqrt RNE x1)))))))(check-sat)