;  time  = {'mathsat': 197.7708122730255}
;  terms = 111
;  score = 197.7708122730255
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.sub RNE x7 x0) (fp.min x9 x2)) (fp.add RNE (fp.abs (fp.sub RNE x2 x9)) (fp.neg (fp.neg x2)))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x0 x3) (fp.add RNE (fp.min x5 x0) (fp.neg x9))))) (fp.max (fp.sqrt RNE (fp.sqrt RNE (fp.mul RNE (fp.neg x4) (fp.sub RNE x9 x9)))) (fp.sub RNE (fp.div RNE (fp.div RNE (fp.sub RNE x6 x9) (fp.sub RNE x1 x6)) (fp.max (fp.min x4 x0) (fp.min x2 x0))) (fp.div RNE (fp.min (fp.sqrt RNE x1) (fp.add RNE x4 x5)) (fp.roundToIntegral RNE (fp.div RNE x7 x1)))))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x5 x5)) (fp.add RNE (fp.div RNE x2 (fp.sqrt RNE x8)) (fp.max x2 x3))) (fp.div RNE (fp.mul RNE (fp.div RNE x0 x0) (fp.max x5 x8)) (fp.sub RNE (fp.div RNE (fp.div RNE x8 x2) (fp.roundToIntegral RNE x8)) (fp.sub RNE (fp.abs x2) (fp.div RNE x7 x5))))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE (fp.max x3 x2) (fp.div RNE x6 x4)))))))(check-sat)