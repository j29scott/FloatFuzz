;  time  = {'mathsat': 475.4384045600891}
;  terms = 134
;  score = 475.4384045600891
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.max (fp.div RNE (fp.abs (fp.mul RNE x0 x2)) (fp.sub RNE (fp.add RNE x2 x7) (fp.max x9 x3))) (fp.div RNE (fp.div RNE (fp.mul RNE x0 x9) (fp.div RNE (fp.roundToIntegral RNE x7) (fp.neg x5))) (fp.min (fp.div RNE x0 (fp.mul RNE x1 x8)) (fp.min x1 x1)))) (fp.min (fp.sub RNE (fp.div RNE (fp.sqrt RNE (fp.div RNE x1 x4)) (fp.div RNE (fp.min x8 x2) (fp.max x9 x0))) (fp.div RNE (fp.abs (fp.roundToIntegral RNE x7)) (fp.div RNE (fp.min x4 x0) (fp.sub RNE x9 x2)))) (fp.div RNE (fp.neg (fp.roundToIntegral RNE (fp.mul RNE x4 x0))) (fp.add RNE (fp.neg (fp.min x3 x8)) (fp.roundToIntegral RNE (fp.abs x4)))))) (fp.add RNE (fp.sqrt RNE (fp.div RNE (fp.sqrt RNE (fp.sub RNE x7 x0)) (fp.min (fp.div RNE (fp.add RNE x9 x7) (fp.sub RNE x0 x5)) (fp.mul RNE (fp.div RNE x4 x9) (fp.min x8 x1))))) (fp.div RNE (fp.add RNE (fp.add RNE (fp.div RNE x7 (fp.abs x4)) (fp.div RNE x9 (fp.min x9 x7))) (fp.div RNE (fp.div RNE x9 (fp.neg x4)) (fp.mul RNE (fp.div RNE x8 x0) (fp.max x2 x9)))) (fp.min (fp.div RNE (fp.max x5 x4) (fp.neg (fp.add RNE x4 x8))) (fp.add RNE (fp.sqrt RNE x1) (fp.sub RNE x0 x3)))))))(check-sat)