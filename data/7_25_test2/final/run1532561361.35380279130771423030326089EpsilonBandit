;  time  = {'mathsat': 347.61470103263855}
;  terms = 79
;  score = 347.61470103263855
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.min (fp.sub RNE (fp.add RNE (fp.div RNE (fp.div RNE x3 x1) (fp.min x7 x0)) (fp.add RNE (fp.div RNE x0 x2) (fp.max x8 x1))) (fp.max (fp.add RNE (fp.div RNE x0 (fp.neg x0)) (fp.div RNE x9 (fp.div RNE x4 x3))) (fp.mul RNE (fp.div RNE x5 x2) (fp.div RNE x5 (fp.div RNE x9 x8))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.max x2 x9) (fp.sqrt RNE x0)) (fp.mul RNE (fp.sqrt RNE (fp.add RNE x7 x4)) (fp.max (fp.max x3 x1) (fp.min x9 x2)))) (fp.max (fp.sqrt RNE (fp.max (fp.div RNE x3 x3) (fp.sqrt RNE x9))) (fp.max (fp.div RNE (fp.sqrt RNE x6) (fp.min x2 x9)) (fp.mul RNE (fp.mul RNE x1 x7) (fp.roundToIntegral RNE x6))))))))(check-sat)