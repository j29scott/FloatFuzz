;  time  = {'mathsat': 131.10426926612854}
;  terms = 105
;  score = 131.10426926612854
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.max x8 x1) (fp.neg x4)) (fp.min (fp.add RNE (fp.div RNE x4 x4) (fp.roundToIntegral RNE x0)) (fp.abs (fp.neg x9)))) (fp.sub RNE (fp.div RNE (fp.max (fp.roundToIntegral RNE x2) (fp.sub RNE x4 x4)) (fp.div RNE (fp.sqrt RNE x7) (fp.div RNE x3 x0))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.sqrt RNE x6))))) (fp.div RNE (fp.max (fp.add RNE (fp.div RNE x7 x9) (fp.abs x5)) (fp.abs (fp.neg x9))) (fp.min (fp.add RNE (fp.div RNE x5 x1) (fp.neg x8)) (fp.neg (fp.abs x9))))) (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.sqrt RNE (fp.div RNE x1 (fp.abs x5)))) (fp.add RNE (fp.sub RNE (fp.abs x3) (fp.sub RNE x4 x8)) (fp.neg (fp.div RNE x3 (fp.mul RNE x7 x3))))) (fp.max (fp.div RNE (fp.add RNE (fp.div RNE x1 x8) (fp.min x5 x0)) (fp.max (fp.div RNE x0 (fp.add RNE x9 x0)) (fp.add RNE x5 x3))) (fp.abs (fp.max (fp.roundToIntegral RNE x8) (fp.mul RNE x8 x6)))))))(check-sat)