;  time  = {'mathsat': 16.62189555168152}
;  terms = 57
;  score = 16.62189555168152
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.roundToIntegral RNE (fp.max (fp.abs (fp.roundToIntegral RNE x3)) (fp.max (fp.min x2 x4) (fp.abs x7)))) (fp.abs (fp.neg (fp.neg (fp.sub RNE x6 x6))))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.min x7 x5) (fp.sub RNE x0 x5))) (fp.mul RNE (fp.div RNE (fp.min x7 x3) (fp.sqrt RNE (fp.max x7 x5))) (fp.max (fp.abs x4) (fp.roundToIntegral RNE x7)))) (fp.abs (fp.sqrt RNE (fp.min (fp.min (fp.sub RNE x9 x2) (fp.add RNE x6 x0)) (fp.neg (fp.sub RNE x7 x9))))))))(check-sat)