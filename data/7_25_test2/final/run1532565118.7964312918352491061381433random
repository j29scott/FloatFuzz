;  time  = {'mathsat': 273.1952464580536}
;  terms = 94
;  score = 273.1952464580536
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.max (fp.min (fp.roundToIntegral RNE (fp.roundToIntegral RNE x1)) (fp.min (fp.max x2 x5) (fp.sqrt RNE x2))) (fp.min (fp.add RNE (fp.sub RNE x3 x7) (fp.add RNE x3 x1)) (fp.min (fp.sub RNE x4 x3) (fp.min x1 x0)))) (fp.mul RNE (fp.sqrt RNE (fp.sqrt RNE (fp.abs x0))) (fp.abs (fp.abs (fp.abs x6))))) (fp.sub RNE (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.sqrt RNE x7) (fp.div RNE x0 x7)) (fp.sub RNE (fp.sqrt RNE (fp.abs x9)) (fp.add RNE (fp.sub RNE x2 x7) (fp.max x5 x8)))) (fp.min (fp.sub RNE (fp.div RNE (fp.div RNE x5 x6) (fp.div RNE x4 x8)) (fp.abs (fp.sqrt RNE x8))) (fp.neg (fp.min (fp.roundToIntegral RNE x3) (fp.div RNE x4 x6))))) (fp.sub RNE (fp.neg (fp.neg (fp.max (fp.mul RNE x4 x1) (fp.roundToIntegral RNE x5)))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.max (fp.min x2 x2) (fp.max x9 x5))))))))(check-sat)