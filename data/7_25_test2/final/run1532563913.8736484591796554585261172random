;  time  = {'mathsat': 162.64572620391846}
;  terms = 64
;  score = 162.64572620391846
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isSubnormal (fp.max (fp.div RNE (fp.add RNE (fp.mul RNE (fp.add RNE x9 x5) (fp.add RNE x8 x5)) (fp.max (fp.min x6 x6) (fp.div RNE x8 x3))) (fp.min (fp.neg (fp.mul RNE x0 x5)) (fp.mul RNE (fp.sub RNE x6 x6) (fp.neg x4)))) (fp.mul RNE (fp.add RNE (fp.min (fp.roundToIntegral RNE (fp.abs x5)) (fp.sub RNE (fp.roundToIntegral RNE x4) (fp.min x5 x7))) (fp.max (fp.neg (fp.neg x4)) (fp.sqrt RNE (fp.div RNE x6 x5)))) (fp.max (fp.mul RNE (fp.neg (fp.neg x5)) (fp.abs (fp.neg x6))) (fp.neg (fp.div RNE (fp.add RNE x2 x7) (fp.neg x5))))))))(check-sat)