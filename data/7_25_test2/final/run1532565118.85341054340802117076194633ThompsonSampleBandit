;  time  = {'mathsat': 76.2384421825409}
;  terms = 65
;  score = 76.2384421825409
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.div RNE (fp.min (fp.div RNE (fp.min (fp.div RNE x7 x0) (fp.neg x9)) (fp.mul RNE (fp.neg x3) (fp.div RNE x6 (fp.sqrt RNE x4)))) (fp.div RNE (fp.div RNE (fp.neg x1) (fp.max x7 x1)) (fp.min (fp.roundToIntegral RNE (fp.min x9 x4)) (fp.sub RNE (fp.roundToIntegral RNE x1) (fp.min x1 x6))))) (fp.div RNE (fp.div RNE (fp.neg (fp.div RNE x8 x8)) (fp.max (fp.div RNE x3 x6) (fp.div RNE x3 x1))) (fp.max (fp.add RNE (fp.max x9 x5) (fp.div RNE x4 (fp.sub RNE x5 x6))) (fp.div RNE (fp.div RNE x5 x7) (fp.neg (fp.roundToIntegral RNE x9))))))))(check-sat)