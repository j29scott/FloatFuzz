;  time  = {'mathsat': 238.02278232574463}
;  terms = 89
;  score = 238.02278232574463
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.abs (fp.max (fp.min x3 x0) (fp.sqrt RNE x3))) (fp.roundToIntegral RNE (fp.neg (fp.max x0 x9)))) (fp.sub RNE (fp.neg (fp.div RNE (fp.div RNE x3 x6) (fp.div RNE x8 x7))) (fp.max (fp.div RNE (fp.mul RNE x6 x2) (fp.sub RNE x5 x7)) (fp.div RNE (fp.sqrt RNE x1) (fp.sub RNE x6 x2))))) (fp.mul RNE (fp.mul RNE (fp.sqrt RNE (fp.max (fp.add RNE x6 x8) (fp.mul RNE x2 x0))) (fp.add RNE (fp.mul RNE (fp.roundToIntegral RNE x6) (fp.neg x4)) (fp.neg (fp.mul RNE x9 x7)))) (fp.div RNE (fp.sub RNE (fp.sub RNE (fp.add RNE x0 x6) (fp.min x2 x8)) (fp.min (fp.min x7 x2) (fp.neg x1))) (fp.mul RNE (fp.div RNE (fp.sub RNE x4 x6) (fp.neg (fp.mul RNE x7 x2))) (fp.div RNE (fp.max x6 x6) (fp.add RNE x6 x4)))))))(check-sat)