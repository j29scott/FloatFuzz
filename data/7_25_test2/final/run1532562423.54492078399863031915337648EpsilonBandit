;  time  = {'mathsat': 354.6674380302429}
;  terms = 111
;  score = 354.6674380302429
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.add RNE (fp.add RNE (fp.div RNE (fp.div RNE x9 (fp.div RNE x9 x2)) (fp.div RNE x0 x7)) (fp.add RNE (fp.max (fp.sqrt RNE x8) (fp.sub RNE x3 x8)) (fp.max (fp.min x4 x3) (fp.abs x0)))) (fp.neg (fp.div RNE (fp.min x1 x1) (fp.div RNE x6 x9)))) (fp.abs (fp.div RNE (fp.min (fp.div RNE (fp.div RNE x3 x6) (fp.div RNE x9 x6)) (fp.add RNE (fp.mul RNE x4 x6) (fp.max x0 x7))) (fp.div RNE (fp.neg (fp.neg x1)) (fp.min (fp.div RNE x1 x1) (fp.add RNE x5 x4)))))) (fp.div RNE (fp.div RNE (fp.abs (fp.div RNE (fp.roundToIntegral RNE x6) (fp.sub RNE x1 x2))) (fp.div RNE (fp.div RNE (fp.sub RNE (fp.sqrt RNE x4) (fp.add RNE x7 x6)) (fp.abs (fp.roundToIntegral RNE x8))) (fp.abs (fp.sub RNE (fp.div RNE x6 x6) (fp.div RNE x5 x6))))) (fp.div RNE (fp.abs (fp.div RNE (fp.neg (fp.add RNE x3 x5)) (fp.max (fp.div RNE x1 x7) (fp.roundToIntegral RNE x0)))) (fp.abs (fp.sqrt RNE (fp.div RNE (fp.sqrt RNE x6) (fp.add RNE x7 x8))))))))(check-sat)