;  time  = {'mathsat': 433.0969183444977}
;  terms = 86
;  score = 433.0969183444977
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE (fp.sqrt RNE (fp.sub RNE x1 x6)) (fp.add RNE (fp.sqrt RNE x5) (fp.div RNE x6 x0))) (fp.sub RNE (fp.add RNE (fp.div RNE x6 x2) (fp.roundToIntegral RNE x4)) (fp.sqrt RNE (fp.abs x0))))) (fp.sub RNE (fp.div RNE (fp.div RNE (fp.add RNE (fp.div RNE x2 x6) (fp.div RNE x7 x6)) (fp.neg (fp.min x2 x8))) (fp.div RNE (fp.div RNE (fp.div RNE x3 (fp.div RNE x3 x6)) (fp.mul RNE x6 x2)) (fp.sub RNE (fp.min (fp.max x5 x3) (fp.div RNE x8 x6)) (fp.sqrt RNE (fp.mul RNE x9 x4))))) (fp.mul RNE (fp.max (fp.abs (fp.div RNE x1 x4)) (fp.div RNE (fp.max x8 x9) (fp.div RNE x0 (fp.mul RNE x6 x2)))) (fp.sqrt RNE (fp.div RNE (fp.div RNE x1 (fp.div RNE x2 x7)) (fp.div RNE x4 (fp.roundToIntegral RNE x4))))))))(check-sat)