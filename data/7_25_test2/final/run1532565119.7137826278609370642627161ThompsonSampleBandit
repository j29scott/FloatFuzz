;  time  = {'mathsat': 503.82630491256714}
;  terms = 99
;  score = 503.82630491256714
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.min (fp.div RNE (fp.div RNE (fp.add RNE x7 x4) (fp.min (fp.div RNE x5 x1) (fp.neg x3))) (fp.sub RNE (fp.div RNE x7 x6) (fp.sqrt RNE x7))) (fp.max (fp.max (fp.abs x2) (fp.sqrt RNE x1)) (fp.div RNE (fp.mul RNE x6 x5) (fp.max x3 x7)))) (fp.max (fp.max (fp.min (fp.sub RNE x3 x1) (fp.neg x4)) (fp.sub RNE (fp.div RNE x4 x5) (fp.div RNE x5 x7))) (fp.add RNE (fp.min (fp.div RNE x9 x9) (fp.mul RNE x8 x3)) (fp.sub RNE (fp.sqrt RNE x3) (fp.abs x9))))) (fp.sub RNE (fp.sqrt RNE (fp.mul RNE (fp.sqrt RNE (fp.add RNE x1 x4)) (fp.div RNE (fp.max x1 x8) (fp.sub RNE x7 x9)))) (fp.sub RNE (fp.add RNE (fp.add RNE (fp.abs x5) (fp.div RNE x3 x1)) (fp.div RNE (fp.min x9 x9) (fp.add RNE (fp.div RNE x8 x1) (fp.div RNE x1 x4)))) (fp.abs (fp.abs (fp.div RNE x3 x9)))))))(check-sat)