;  time  = {'mathsat': 29.566709518432617}
;  terms = 61
;  score = 29.566709518432617
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.max (fp.min (fp.sqrt RNE (fp.sub RNE (fp.div RNE x4 x1) (fp.min x8 x1))) (fp.mul RNE (fp.max (fp.neg x0) (fp.mul RNE x6 x7)) (fp.roundToIntegral RNE (fp.abs x6)))) (fp.roundToIntegral RNE (fp.div RNE (fp.neg (fp.mul RNE x3 x6)) (fp.sub RNE (fp.add RNE x5 x2) (fp.abs x4))))) (fp.sqrt RNE (fp.max (fp.sub RNE (fp.add RNE (fp.sub RNE x2 x4) (fp.add RNE x6 x5)) (fp.add RNE (fp.sqrt RNE x2) (fp.div RNE x2 x1))) (fp.max (fp.mul RNE (fp.mul RNE x5 x0) (fp.max x8 x0)) (fp.neg (fp.min x1 x1)))))))(check-sat)