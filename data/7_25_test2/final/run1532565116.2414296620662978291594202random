;  time  = {'mathsat': 110.71824765205383}
;  terms = 60
;  score = 110.71824765205383
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.neg (fp.sub RNE (fp.div RNE (fp.abs (fp.abs x3)) (fp.roundToIntegral RNE (fp.sqrt RNE x3))) (fp.sub RNE (fp.sqrt RNE (fp.div RNE x2 x9)) (fp.mul RNE (fp.roundToIntegral RNE x1) (fp.sqrt RNE x0))))) (fp.max (fp.abs (fp.mul RNE (fp.add RNE (fp.div RNE x1 (fp.min x4 x6)) (fp.mul RNE x1 x1)) (fp.min (fp.sub RNE (fp.add RNE x2 x6) (fp.sqrt RNE x3)) (fp.add RNE (fp.div RNE x4 x6) (fp.max x4 x3))))) (fp.neg (fp.mul RNE (fp.add RNE (fp.mul RNE x3 x9) (fp.neg x2)) (fp.max (fp.max x1 x2) (fp.roundToIntegral RNE x5)))))))(check-sat)