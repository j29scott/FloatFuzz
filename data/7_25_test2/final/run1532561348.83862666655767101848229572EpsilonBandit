;  time  = {'mathsat': 186.73202252388}
;  terms = 93
;  score = 186.73202252388
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.neg (fp.abs (fp.add RNE (fp.div RNE x6 (fp.div RNE x2 x1)) (fp.neg x8)))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x5 (fp.add RNE x2 x7)) (fp.max x3 x1)) (fp.mul RNE (fp.mul RNE x5 x4) (fp.div RNE x4 x6))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE x7) (fp.abs x1)) (fp.abs (fp.div RNE x1 (fp.abs x2)))))) (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.add RNE x3 x0) (fp.max x3 x0)) (fp.neg (fp.sub RNE (fp.add RNE x0 x2) (fp.roundToIntegral RNE x7)))) (fp.mul RNE (fp.mul RNE (fp.div RNE x7 (fp.add RNE x6 x9)) (fp.div RNE x7 x9)) (fp.sqrt RNE (fp.max x6 x4)))) (fp.neg (fp.div RNE (fp.div RNE (fp.div RNE x3 x5) (fp.div RNE x7 (fp.sub RNE x1 x0))) (fp.div RNE (fp.div RNE x3 x0) (fp.add RNE (fp.div RNE x6 x9) (fp.neg x8))))))))(check-sat)