;  time  = {'mathsat': 279.22668504714966}
;  terms = 105
;  score = 279.22668504714966
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.abs (fp.add RNE (fp.min (fp.div RNE (fp.abs x1) (fp.div RNE (fp.mul RNE x9 x9) (fp.roundToIntegral RNE x0))) (fp.div RNE (fp.div RNE x4 (fp.neg x1)) (fp.div RNE x4 (fp.roundToIntegral RNE x8)))) (fp.div RNE (fp.neg (fp.div RNE x4 (fp.neg x0))) (fp.div RNE (fp.abs x3) (fp.div RNE x7 x1))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.mul RNE x1 x9) (fp.div RNE x2 (fp.div RNE x5 x8))) (fp.div RNE (fp.add RNE x7 x7) (fp.roundToIntegral RNE (fp.mul RNE x2 x7)))) (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.div RNE x7 x9) (fp.sub RNE x8 x9)) (fp.div RNE (fp.div RNE x1 x1) (fp.div RNE x7 x0))) (fp.roundToIntegral RNE (fp.neg (fp.abs x8))))) (fp.roundToIntegral RNE (fp.div RNE (fp.max (fp.min (fp.roundToIntegral RNE x6) (fp.sub RNE x4 x2)) (fp.min (fp.sub RNE x5 x0) (fp.div RNE x4 x1))) (fp.div RNE (fp.add RNE (fp.div RNE x8 x8) (fp.div RNE x6 x2)) (fp.div RNE (fp.div RNE x4 x1) (fp.mul RNE x2 x5))))))))(check-sat)