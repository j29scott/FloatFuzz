;  time  = {'mathsat': 57.47016787528992}
;  terms = 69
;  score = 57.47016787528992
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.min (fp.min (fp.mul RNE (fp.min (fp.add RNE x2 x5) (fp.min x0 x1)) (fp.max (fp.max x3 x7) (fp.sub RNE x1 x7))) (fp.add RNE (fp.add RNE (fp.mul RNE (fp.neg x4) (fp.max x5 x9)) (fp.abs (fp.div RNE x8 x9))) (fp.sub RNE (fp.div RNE (fp.add RNE x5 x6) (fp.max x9 x7)) (fp.div RNE (fp.min x1 x7) (fp.max x9 x0))))) (fp.sub RNE (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE x1) (fp.abs x3)) (fp.sqrt RNE (fp.abs x0))) (fp.sub RNE (fp.min (fp.sub RNE x4 x0) (fp.add RNE x7 x6)) (fp.min (fp.min x0 x9) (fp.abs x0)))))))(check-sat)