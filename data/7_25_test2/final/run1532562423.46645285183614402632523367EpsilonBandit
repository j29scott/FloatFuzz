;  time  = {'mathsat': 266.92147946357727}
;  terms = 80
;  score = 266.92147946357727
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.abs (fp.div RNE (fp.sub RNE (fp.div RNE x3 (fp.mul RNE x0 x1)) (fp.min x2 x7)) (fp.max (fp.neg x1) (fp.sqrt RNE x2)))) (fp.abs (fp.sqrt RNE (fp.div RNE (fp.sqrt RNE x8) (fp.mul RNE x3 x6))))) (fp.div RNE (fp.min (fp.min (fp.min (fp.div RNE x3 x4) (fp.roundToIntegral RNE x8)) (fp.div RNE (fp.min x0 x4) (fp.roundToIntegral RNE x5))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x8 (fp.roundToIntegral RNE x0))) (fp.add RNE (fp.roundToIntegral RNE x7) (fp.neg x2)))) (fp.sqrt RNE (fp.min (fp.mul RNE (fp.div RNE (fp.add RNE x9 x4) (fp.neg x1)) (fp.add RNE (fp.sqrt RNE x3) (fp.abs x8))) (fp.max (fp.div RNE (fp.div RNE x2 x3) (fp.add RNE x4 x3)) (fp.div RNE (fp.max x6 x8) (fp.sqrt RNE x1))))))))(check-sat)