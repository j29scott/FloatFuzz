;  time  = {'mathsat': 99.36996030807495}
;  terms = 91
;  score = 99.36996030807495
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.min (fp.roundToIntegral RNE (fp.sub RNE (fp.abs x8) (fp.div RNE (fp.sqrt RNE x3) (fp.div RNE x8 x0)))) (fp.abs (fp.sqrt RNE (fp.neg (fp.add RNE x8 x4))))) (fp.sqrt RNE (fp.mul RNE (fp.sub RNE (fp.max (fp.abs x8) (fp.sqrt RNE x1)) (fp.sub RNE (fp.sub RNE x2 x8) (fp.neg x2))) (fp.add RNE (fp.sqrt RNE (fp.mul RNE x5 x5)) (fp.add RNE (fp.sub RNE x2 x0) (fp.sub RNE x8 x5)))))) (fp.sub RNE (fp.min (fp.abs (fp.mul RNE (fp.neg x9) (fp.roundToIntegral RNE x5))) (fp.abs (fp.sub RNE (fp.div RNE x8 x5) (fp.min x1 x1)))) (fp.add RNE (fp.sub RNE (fp.max (fp.neg (fp.roundToIntegral RNE x6)) (fp.roundToIntegral RNE (fp.abs x4))) (fp.abs (fp.mul RNE (fp.sqrt RNE x8) (fp.add RNE x4 x9)))) (fp.add RNE (fp.neg (fp.div RNE (fp.roundToIntegral RNE x5) (fp.min x8 x3))) (fp.roundToIntegral RNE (fp.div RNE (fp.roundToIntegral RNE x4) (fp.roundToIntegral RNE x2))))))))(check-sat)