;  time  = {'mathsat': 321.294291973114}
;  terms = 130
;  score = 321.294291973114
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.max (fp.div RNE (fp.div RNE x8 (fp.mul RNE x1 x4)) (fp.div RNE x0 (fp.sub RNE x5 x5))) (fp.div RNE (fp.div RNE x6 (fp.div RNE x3 x6)) (fp.div RNE x0 x8))) (fp.min (fp.add RNE (fp.abs (fp.abs x6)) (fp.div RNE (fp.div RNE x3 x0) (fp.div RNE x5 x0))) (fp.mul RNE (fp.div RNE (fp.abs x9) (fp.min x1 x2)) (fp.abs (fp.roundToIntegral RNE x5))))) (fp.add RNE (fp.neg (fp.mul RNE (fp.min x8 x6) (fp.max x5 x7))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x3 x9) (fp.div RNE x7 x3))))) (fp.div RNE (fp.sub RNE (fp.add RNE (fp.min (fp.max x2 x6) (fp.min x2 x1)) (fp.div RNE (fp.abs x3) (fp.sqrt RNE (fp.add RNE x7 x2)))) (fp.neg (fp.div RNE (fp.min x3 x0) (fp.sub RNE x6 x7)))) (fp.div RNE (fp.div RNE (fp.min (fp.sqrt RNE x0) (fp.div RNE x5 x6)) (fp.max (fp.div RNE x3 x1) (fp.div RNE x6 x7))) (fp.min (fp.div RNE (fp.min (fp.roundToIntegral RNE x1) (fp.max x9 x2)) (fp.sub RNE (fp.neg x8) (fp.abs x7))) (fp.mul RNE (fp.add RNE (fp.div RNE x0 x7) (fp.neg x2)) (fp.div RNE (fp.sub RNE x4 x6) (fp.mul RNE x9 x8))))))))(check-sat)