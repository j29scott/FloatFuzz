;  time  = {'mathsat': 531.2219777107239}
;  terms = 80
;  score = 531.2219777107239
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.abs (fp.mul RNE (fp.abs (fp.sub RNE x0 x7)) (fp.div RNE (fp.sub RNE x0 x3) (fp.min x7 x9)))) (fp.div RNE (fp.div RNE (fp.min (fp.abs x9) (fp.sub RNE x9 x3)) (fp.div RNE (fp.add RNE x3 x6) (fp.max x0 x3))) (fp.add RNE (fp.add RNE (fp.max x8 x3) (fp.abs x7)) (fp.div RNE (fp.max x0 x3) (fp.add RNE x6 x3))))) (fp.sub RNE (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE (fp.sqrt RNE x4))) (fp.mul RNE (fp.add RNE (fp.abs x0) (fp.min x1 x3)) (fp.mul RNE (fp.div RNE x2 x0) (fp.add RNE x5 x3)))) (fp.max (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE x1) (fp.max x3 x4)) (fp.abs (fp.abs x3))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.sub RNE x5 x1)))))))(check-sat)