;  time  = {'mathsat': 143.60193133354187}
;  terms = 117
;  score = 143.60193133354187
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.abs (fp.add RNE (fp.div RNE (fp.div RNE x2 (fp.div RNE x0 x7)) (fp.max (fp.sqrt RNE x9) (fp.mul RNE x0 x2))) (fp.div RNE (fp.div RNE x5 x1) (fp.roundToIntegral RNE (fp.neg x7))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x5 (fp.roundToIntegral RNE x8)) (fp.div RNE (fp.div RNE x7 x4) (fp.div RNE x7 x5))) (fp.div RNE (fp.max (fp.div RNE x7 x4) (fp.div RNE x1 x8)) (fp.div RNE (fp.div RNE x6 x4) (fp.div RNE x7 x7)))) (fp.add RNE (fp.max (fp.div RNE (fp.div RNE x5 x8) (fp.add RNE x9 x3)) (fp.div RNE (fp.sub RNE x2 x8) (fp.roundToIntegral RNE x4))) (fp.add RNE (fp.div RNE (fp.div RNE x4 x0) (fp.div RNE x0 x1)) (fp.mul RNE (fp.min x9 x6) (fp.div RNE x4 x0)))))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE (fp.neg (fp.div RNE x9 x7)) (fp.sub RNE (fp.div RNE x8 x0) (fp.div RNE x3 x8))) (fp.div RNE (fp.div RNE (fp.div RNE x2 (fp.min x3 x2)) (fp.div RNE x0 (fp.abs x4))) (fp.div RNE (fp.div RNE x7 x5) (fp.div RNE (fp.div RNE x0 x2) (fp.sqrt RNE x6))))))))(check-sat)