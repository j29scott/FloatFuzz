;  time  = {'mathsat': 85.60523533821106}
;  terms = 113
;  score = 85.60523533821106
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.min (fp.div RNE (fp.div RNE (fp.max x0 x2) (fp.div RNE x9 x2)) (fp.sub RNE (fp.div RNE x6 x9) (fp.div RNE x8 (fp.sub RNE x9 x5)))) (fp.min (fp.abs (fp.neg x7)) (fp.div RNE (fp.add RNE x0 x0) (fp.div RNE (fp.sqrt RNE x3) (fp.neg x5))))) (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.abs (fp.roundToIntegral RNE x3)) (fp.min (fp.div RNE x3 x7) (fp.div RNE x5 x8))) (fp.div RNE (fp.div RNE (fp.mul RNE x5 x8) (fp.neg x7)) (fp.add RNE (fp.sub RNE x6 x0) (fp.sub RNE x4 x8)))) (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.div RNE x4 x9) (fp.div RNE x2 x3)) (fp.mul RNE (fp.roundToIntegral RNE x5) (fp.div RNE x4 x0))) (fp.div RNE (fp.div RNE (fp.add RNE x1 x6) (fp.max x8 x0)) (fp.div RNE (fp.roundToIntegral RNE x6) (fp.sub RNE x9 x8)))))) (fp.roundToIntegral RNE (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x0 x1) (fp.div RNE x2 (fp.min x5 x8)))) (fp.div RNE (fp.neg (fp.div RNE x8 x7)) (fp.add RNE (fp.div RNE x7 x9) (fp.min x1 x8)))))))(check-sat)