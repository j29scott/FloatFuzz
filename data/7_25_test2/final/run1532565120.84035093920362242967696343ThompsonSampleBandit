;  time  = {'mathsat': 356.14404249191284}
;  terms = 72
;  score = 356.14404249191284
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.add RNE (fp.min (fp.max x6 x5) (fp.mul RNE x8 x8)) (fp.sqrt RNE (fp.add RNE x5 x7))) (fp.neg (fp.sub RNE (fp.max x9 x7) (fp.max x1 x0)))) (fp.sqrt RNE (fp.mul RNE (fp.abs (fp.roundToIntegral RNE x0)) (fp.div RNE (fp.roundToIntegral RNE x2) (fp.neg x1))))) (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.neg (fp.sqrt RNE x9)) (fp.add RNE (fp.mul RNE x1 x1) (fp.abs x1))) (fp.sub RNE (fp.abs (fp.mul RNE x5 x0)) (fp.min (fp.sub RNE x6 x3) (fp.roundToIntegral RNE x0)))) (fp.div RNE (fp.mul RNE (fp.abs (fp.mul RNE x4 x1)) (fp.abs (fp.neg x1))) (fp.abs (fp.add RNE (fp.sqrt RNE x5) (fp.add RNE x3 x9)))))))(check-sat)