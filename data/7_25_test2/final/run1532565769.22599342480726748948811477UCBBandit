;  time  = {'mathsat': 600}
;  terms = 82
;  score = 600
;  stdout= {'mathsat': ''}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.abs (fp.div RNE (fp.abs (fp.neg (fp.div RNE x8 (fp.min x5 x0)))) (fp.sub RNE (fp.mul RNE (fp.min (fp.neg x1) (fp.sub RNE x5 x3)) (fp.div RNE (fp.add RNE x0 x2) (fp.min x7 x9))) (fp.add RNE (fp.neg (fp.max x7 x0)) (fp.max (fp.sub RNE x3 x1) (fp.neg x5)))))) (fp.min (fp.div RNE (fp.max (fp.abs (fp.min x7 x7)) (fp.min (fp.div RNE x0 (fp.roundToIntegral RNE x1)) (fp.abs x6))) (fp.neg (fp.min (fp.abs (fp.sqrt RNE x4)) (fp.neg (fp.min x2 x9))))) (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x6)) (fp.abs (fp.div RNE x8 x5))) (fp.div RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.max x0 x6))) (fp.abs (fp.div RNE (fp.max x7 x8) (fp.max x2 x7))))))))(check-sat)