;  time  = {'mathsat': 451.1572425365448}
;  terms = 116
;  score = 451.1572425365448
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.min (fp.div RNE (fp.max (fp.div RNE (fp.mul RNE x0 x1) (fp.neg x5)) (fp.mul RNE (fp.abs x8) (fp.max x6 x1))) (fp.div RNE (fp.div RNE (fp.div RNE x9 x7) (fp.div RNE x0 x4)) (fp.sub RNE (fp.neg x7) (fp.mul RNE x5 x8)))) (fp.add RNE (fp.min (fp.div RNE (fp.div RNE x6 (fp.max x9 x5)) (fp.min x7 x0)) (fp.div RNE (fp.div RNE x6 x1) (fp.max x2 x7))) (fp.add RNE (fp.div RNE (fp.abs x4) (fp.div RNE (fp.div RNE x2 x2) (fp.min x5 x8))) (fp.sub RNE (fp.mul RNE x0 x4) (fp.min x3 x9))))) (fp.sub RNE (fp.sqrt RNE (fp.div RNE (fp.div RNE (fp.sqrt RNE x8) (fp.div RNE x1 (fp.div RNE x9 x8))) (fp.div RNE (fp.sub RNE (fp.sub RNE x9 x9) (fp.sqrt RNE x7)) (fp.max (fp.abs x4) (fp.max x0 x5))))) (fp.div RNE (fp.add RNE (fp.add RNE (fp.abs x0) (fp.mul RNE x6 x4)) (fp.max (fp.roundToIntegral RNE x7) (fp.roundToIntegral RNE x3))) (fp.div RNE (fp.div RNE (fp.div RNE x3 x4) (fp.mul RNE x6 x4)) (fp.div RNE (fp.sqrt RNE x8) (fp.neg x5)))))))(check-sat)