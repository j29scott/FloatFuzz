;  time  = {'mathsat': 145.5071120262146}
;  terms = 131
;  score = 145.5071120262146
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.max (fp.div RNE (fp.abs (fp.sub RNE x9 x7)) (fp.div RNE (fp.sqrt RNE x3) (fp.sqrt RNE x7))) (fp.div RNE (fp.roundToIntegral RNE (fp.neg x0)) (fp.div RNE (fp.div RNE x3 x9) (fp.div RNE (fp.div RNE x6 x1) (fp.min x0 x4))))) (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE (fp.neg x1) (fp.div RNE x2 x3)) (fp.sub RNE (fp.min x6 x7) (fp.div RNE x0 x3)))) (fp.div RNE (fp.abs (fp.max (fp.max x0 x2) (fp.abs x6))) (fp.div RNE (fp.roundToIntegral RNE (fp.min x4 x1)) (fp.min (fp.sub RNE x4 x1) (fp.roundToIntegral RNE x4)))))) (fp.div RNE (fp.div RNE (fp.add RNE (fp.div RNE (fp.neg x7) (fp.sub RNE x2 x1)) (fp.mul RNE (fp.div RNE x6 x9) (fp.div RNE x5 x6))) (fp.div RNE (fp.neg (fp.max x5 x8)) (fp.abs (fp.max x5 x7)))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.max x4 x2) (fp.neg x0)) (fp.div RNE (fp.abs x3) (fp.roundToIntegral RNE x8))) (fp.sub RNE (fp.neg (fp.div RNE x8 x0)) (fp.neg (fp.max x9 x6)))) (fp.div RNE (fp.div RNE (fp.add RNE (fp.div RNE x8 x4) (fp.div RNE x9 x1)) (fp.neg (fp.add RNE x6 x4))) (fp.abs (fp.div RNE (fp.sqrt RNE x5) (fp.max x6 x1))))))))(check-sat)