;  time  = {'mathsat': 21.55500626564026}
;  terms = 58
;  score = 21.55500626564026
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.abs (fp.abs (fp.max (fp.add RNE (fp.sqrt RNE x1) (fp.min x2 x7)) (fp.div RNE (fp.max x2 x2) (fp.div RNE x8 x3))))) (fp.add RNE (fp.div RNE (fp.abs (fp.sub RNE (fp.max x2 x1) (fp.abs x3))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.mul RNE x4 x0)))) (fp.min (fp.add RNE (fp.max (fp.roundToIntegral RNE x0) (fp.min x5 x4)) (fp.max (fp.mul RNE x8 x1) (fp.roundToIntegral RNE x0))) (fp.div RNE (fp.add RNE (fp.max x9 x7) (fp.sqrt RNE x4)) (fp.min (fp.abs x2) (fp.add RNE x0 x7)))))))(check-sat)