;  time  = {'mathsat': 216.56287026405334}
;  terms = 143
;  score = 216.56287026405334
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.add RNE (fp.div RNE (fp.div RNE (fp.abs x1) (fp.add RNE x9 x9)) (fp.max (fp.sqrt RNE (fp.min x4 x5)) (fp.neg (fp.mul RNE x4 x4)))) (fp.div RNE (fp.div RNE (fp.div RNE x9 x8) (fp.neg x2)) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.add RNE x7 x1))))) (fp.max (fp.add RNE (fp.div RNE (fp.add RNE x6 x1) (fp.max (fp.min x2 x7) (fp.neg x8))) (fp.add RNE (fp.div RNE x7 x8) (fp.div RNE x7 x9))) (fp.div RNE (fp.div RNE (fp.div RNE x6 x9) (fp.neg x2)) (fp.abs (fp.add RNE (fp.neg x6) (fp.div RNE x6 x6)))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.max (fp.abs x8) (fp.div RNE x9 (fp.mul RNE x6 x2))) (fp.add RNE (fp.div RNE x0 x4) (fp.div RNE x8 (fp.div RNE x5 x1)))) (fp.max (fp.add RNE (fp.div RNE x0 (fp.div RNE x5 x3)) (fp.div RNE x4 x6)) (fp.div RNE (fp.mul RNE x2 x3) (fp.div RNE (fp.neg x3) (fp.sqrt RNE x8))))) (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.max (fp.add RNE x7 x8) (fp.div RNE x0 x8)) (fp.abs (fp.div RNE x8 x1))) (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE x2 x2) (fp.add RNE x2 x5)))) (fp.max (fp.div RNE (fp.div RNE (fp.sqrt RNE x8) (fp.neg x6)) (fp.sub RNE (fp.div RNE x7 x7) (fp.div RNE x9 x3))) (fp.abs (fp.neg (fp.roundToIntegral RNE x3))))))))(check-sat)