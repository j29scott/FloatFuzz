;  time  = {'mathsat': 284.122656583786}
;  terms = 151
;  score = 284.122656583786
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x1 (fp.div RNE x8 x8))) (fp.sqrt RNE (fp.add RNE (fp.div RNE x0 x2) (fp.sub RNE x6 x2)))) (fp.div RNE (fp.div RNE (fp.min (fp.roundToIntegral RNE x8) (fp.sub RNE x1 x5)) (fp.abs (fp.max x3 x0))) (fp.sub RNE (fp.div RNE (fp.abs x9) (fp.mul RNE x2 x8)) (fp.div RNE (fp.max x3 x7) (fp.add RNE x7 x5))))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.div RNE x5 (fp.neg x4)) (fp.div RNE (fp.neg x2) (fp.min x0 x4))) (fp.div RNE (fp.min x0 x5) (fp.max (fp.max x1 x8) (fp.div RNE x2 x0)))) (fp.div RNE (fp.mul RNE (fp.neg (fp.div RNE x0 x6)) (fp.neg (fp.add RNE x5 x7))) (fp.max (fp.div RNE (fp.sqrt RNE x3) (fp.sqrt RNE x8)) (fp.min (fp.sub RNE x8 x8) (fp.sub RNE x2 x8)))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE x4) (fp.neg (fp.add RNE x5 x3))) (fp.div RNE (fp.div RNE x5 x1) (fp.add RNE x4 x2))) (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.div RNE x8 x5) (fp.min x9 x4)) (fp.min (fp.div RNE x1 x9) (fp.div RNE x1 x7))))) (fp.div RNE (fp.div RNE (fp.neg (fp.div RNE (fp.div RNE x0 x0) (fp.div RNE x5 x3))) (fp.mul RNE (fp.sqrt RNE (fp.mul RNE x7 x5)) (fp.neg (fp.neg x6)))) (fp.sqrt RNE (fp.neg (fp.min (fp.max x7 x0) (fp.min x0 x7))))))))(check-sat)