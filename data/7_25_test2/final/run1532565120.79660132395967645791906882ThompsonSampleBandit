;  time  = {'mathsat': 212.55055737495422}
;  terms = 114
;  score = 212.55055737495422
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.sqrt RNE x5) (fp.div RNE x7 x3)) (fp.add RNE (fp.sub RNE x2 x7) (fp.div RNE x0 (fp.roundToIntegral RNE x0)))) (fp.sub RNE (fp.roundToIntegral RNE (fp.add RNE (fp.sub RNE x4 x3) (fp.sqrt RNE x8))) (fp.div RNE (fp.div RNE (fp.mul RNE x8 x7) (fp.div RNE x5 x6)) (fp.div RNE (fp.div RNE x3 x4) (fp.abs x5))))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.sqrt RNE x0) (fp.div RNE x9 (fp.mul RNE x5 x7))) (fp.div RNE (fp.add RNE x1 x0) (fp.sqrt RNE x1))) (fp.div RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.max x9 x3) (fp.div RNE x7 x1))) (fp.div RNE (fp.roundToIntegral RNE (fp.sqrt RNE x0)) (fp.div RNE (fp.neg x3) (fp.min x0 x7)))))) (fp.sqrt RNE (fp.div RNE (fp.sub RNE (fp.div RNE (fp.div RNE x7 (fp.roundToIntegral RNE x2)) (fp.mul RNE x7 x9)) (fp.div RNE (fp.div RNE x8 x1) (fp.neg x2))) (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.neg x3) (fp.neg x8)) (fp.mul RNE (fp.sqrt RNE x0) (fp.div RNE x3 x2))) (fp.div RNE (fp.neg (fp.mul RNE x5 x0)) (fp.abs (fp.max x8 x9))))))))(check-sat)