;  time  = {'mathsat': 367.1627857685089}
;  terms = 85
;  score = 367.1627857685089
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.neg (fp.roundToIntegral RNE (fp.sqrt RNE (fp.abs x6)))) (fp.add RNE (fp.div RNE (fp.div RNE (fp.min x1 x2) (fp.neg x1)) (fp.roundToIntegral RNE (fp.div RNE x1 x3))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.neg x9) (fp.add RNE x6 x5)) (fp.roundToIntegral RNE (fp.sub RNE x3 x8))) (fp.add RNE (fp.sub RNE (fp.min x1 x5) (fp.roundToIntegral RNE x2)) (fp.neg (fp.neg x9)))))) (fp.mul RNE (fp.min (fp.sqrt RNE (fp.mul RNE (fp.sub RNE x0 x0) (fp.abs x7))) (fp.roundToIntegral RNE (fp.div RNE (fp.max x7 x6) (fp.add RNE (fp.div RNE x3 x5) (fp.div RNE x0 x2))))) (fp.add RNE (fp.min (fp.mul RNE (fp.max x2 x7) (fp.mul RNE x6 x4)) (fp.div RNE (fp.neg x1) (fp.roundToIntegral RNE x2))) (fp.max (fp.roundToIntegral RNE (fp.div RNE x2 x8)) (fp.sqrt RNE (fp.min x6 x3)))))))(check-sat)