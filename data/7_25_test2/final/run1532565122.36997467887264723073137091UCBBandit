;  time  = {'mathsat': 600}
;  terms = 84
;  score = 600
;  stdout= {'mathsat': ''}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.roundToIntegral RNE (fp.abs (fp.abs (fp.roundToIntegral RNE x9)))) (fp.max (fp.div RNE (fp.mul RNE (fp.max x0 x8) (fp.div RNE x2 (fp.add RNE x0 x6))) (fp.sub RNE (fp.add RNE (fp.abs x6) (fp.abs x0)) (fp.roundToIntegral RNE (fp.div RNE x1 x8)))) (fp.div RNE (fp.min (fp.div RNE x8 x6) (fp.neg x2)) (fp.roundToIntegral RNE (fp.min x9 x3))))) (fp.sub RNE (fp.min (fp.div RNE (fp.div RNE (fp.div RNE x1 x3) (fp.mul RNE (fp.min x4 x1) (fp.min x8 x7))) (fp.sub RNE (fp.div RNE x0 x4) (fp.div RNE x8 x1))) (fp.sqrt RNE (fp.div RNE (fp.div RNE x9 (fp.add RNE x6 x7)) (fp.div RNE x8 (fp.abs x3))))) (fp.abs (fp.sub RNE (fp.max (fp.min x0 x3) (fp.div RNE x5 x7)) (fp.sqrt RNE (fp.div RNE x5 x6)))))))(check-sat)