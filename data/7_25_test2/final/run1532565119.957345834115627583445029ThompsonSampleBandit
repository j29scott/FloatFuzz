;  time  = {'mathsat': 246.80578064918518}
;  terms = 133
;  score = 246.80578064918518
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.abs (fp.sub RNE x4 x8)) (fp.div RNE (fp.sub RNE x7 x5) (fp.add RNE (fp.sub RNE x9 x2) (fp.sub RNE x3 x6)))) (fp.div RNE (fp.add RNE (fp.sub RNE x5 x2) (fp.div RNE x0 (fp.max x8 x8))) (fp.abs (fp.div RNE x9 x3)))) (fp.div RNE (fp.neg (fp.div RNE (fp.abs x1) (fp.mul RNE (fp.div RNE x7 x8) (fp.max x9 x8)))) (fp.roundToIntegral RNE (fp.min (fp.sqrt RNE (fp.abs x5)) (fp.div RNE (fp.max x4 x3) (fp.mul RNE x4 x6)))))) (fp.div RNE (fp.sub RNE (fp.neg (fp.div RNE (fp.mul RNE x2 x9) (fp.roundToIntegral RNE (fp.div RNE x3 x8)))) (fp.div RNE (fp.mul RNE (fp.mul RNE x4 x8) (fp.neg x0)) (fp.max (fp.add RNE x3 x1) (fp.neg x5)))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x7 x6) (fp.div RNE x1 x3)) (fp.div RNE (fp.min x9 x0) (fp.div RNE x0 x0))) (fp.mul RNE (fp.roundToIntegral RNE (fp.add RNE x1 x9)) (fp.div RNE (fp.div RNE x7 x2) (fp.sub RNE x7 x6)))) (fp.sub RNE (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x6 x5) (fp.max x1 x9))) (fp.max (fp.div RNE (fp.mul RNE x6 x8) (fp.div RNE x7 x6)) (fp.div RNE (fp.min x6 x1) (fp.roundToIntegral RNE x2))))))))(check-sat)