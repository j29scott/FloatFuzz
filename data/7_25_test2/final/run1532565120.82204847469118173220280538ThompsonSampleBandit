;  time  = {'mathsat': 256.1854383945465}
;  terms = 142
;  score = 256.1854383945465
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.div RNE x7 x3) (fp.div RNE x4 x4)) (fp.div RNE (fp.div RNE x1 (fp.div RNE x5 x4)) (fp.roundToIntegral RNE (fp.min x9 x6)))) (fp.div RNE (fp.div RNE (fp.sqrt RNE x7) (fp.div RNE x8 (fp.div RNE x5 x0))) (fp.div RNE (fp.roundToIntegral RNE x0) (fp.min (fp.max x1 x1) (fp.mul RNE x3 x1))))) (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE (fp.min x7 x4)) (fp.div RNE (fp.mul RNE x5 x8) (fp.div RNE x0 x0))) (fp.min (fp.sub RNE (fp.div RNE x1 (fp.sqrt RNE x5)) (fp.roundToIntegral RNE x3)) (fp.div RNE (fp.div RNE x2 (fp.sub RNE x8 x2)) (fp.min x1 x5))))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE (fp.div RNE x5 x2) (fp.div RNE x3 (fp.sub RNE x0 x5))) (fp.min (fp.div RNE x0 x8) (fp.sqrt RNE x5)))) (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.div RNE (fp.div RNE x7 x7) (fp.abs x2)) (fp.sqrt RNE (fp.add RNE x7 x5))) (fp.add RNE (fp.min (fp.div RNE x4 x6) (fp.sqrt RNE x9)) (fp.sub RNE (fp.div RNE x9 x3) (fp.div RNE x0 x2)))) (fp.min (fp.min (fp.div RNE (fp.neg x5) (fp.mul RNE x8 x5)) (fp.div RNE (fp.div RNE x9 x1) (fp.min x7 x9))) (fp.div RNE (fp.max (fp.mul RNE x0 x7) (fp.div RNE x1 x3)) (fp.abs (fp.div RNE x4 x8))))))))(check-sat)