;  time  = {'mathsat': 29.330294132232666}
;  terms = 86
;  score = 29.330294132232666
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.add RNE (fp.sub RNE (fp.mul RNE x3 x9) (fp.roundToIntegral RNE x9)) (fp.add RNE (fp.sub RNE x5 x4) (fp.neg x8))) (fp.sqrt RNE (fp.max (fp.sqrt RNE x8) (fp.min x0 x6)))) (fp.div RNE (fp.mul RNE (fp.max (fp.sub RNE x2 x9) (fp.sub RNE x7 x2)) (fp.min (fp.add RNE x4 x6) (fp.mul RNE x8 x1))) (fp.abs (fp.div RNE (fp.max x1 x0) (fp.div RNE x3 x8))))) (fp.add RNE (fp.mul RNE (fp.div RNE (fp.max (fp.abs x4) (fp.add RNE x7 x5)) (fp.add RNE (fp.sub RNE (fp.div RNE x6 x6) (fp.mul RNE x2 x2)) (fp.sub RNE (fp.max x9 x7) (fp.div RNE x3 x2)))) (fp.div RNE (fp.roundToIntegral RNE (fp.max x2 x8)) (fp.roundToIntegral RNE (fp.max x9 x5)))) (fp.abs (fp.roundToIntegral RNE (fp.neg (fp.add RNE x5 x2)))))))(check-sat)