;  time  = {'mathsat': 59.88628315925598}
;  terms = 76
;  score = 59.88628315925598
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.abs (fp.mul RNE (fp.neg x3) (fp.div RNE x7 x8))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x4 x2) (fp.max (fp.div RNE x7 x3) (fp.sub RNE x8 x2))))) (fp.abs (fp.mul RNE (fp.max (fp.div RNE x2 x1) (fp.abs x4)) (fp.roundToIntegral RNE (fp.abs x6))))) (fp.div RNE (fp.neg (fp.div RNE (fp.div RNE (fp.max x4 x8) (fp.roundToIntegral RNE x7)) (fp.neg (fp.abs (fp.div RNE x9 x2))))) (fp.div RNE (fp.div RNE (fp.max (fp.div RNE x6 x9) (fp.div RNE x4 x9)) (fp.div RNE (fp.neg x5) (fp.abs x7))) (fp.div RNE (fp.sqrt RNE (fp.max x3 x2)) (fp.div RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x2)) (fp.div RNE (fp.sub RNE x5 x0) (fp.abs x5))))))))(check-sat)