;  time  = {'mathsat': 283.88244247436523}
;  terms = 119
;  score = 283.88244247436523
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x5 x1) (fp.div RNE x2 x7)) (fp.div RNE (fp.mul RNE x5 x4) (fp.div RNE x4 (fp.add RNE x9 x3)))) (fp.div RNE (fp.add RNE (fp.div RNE x3 x3) (fp.neg x1)) (fp.div RNE (fp.max x6 x9) (fp.add RNE x3 x8)))) (fp.div RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.mul RNE x2 x2) (fp.div RNE x3 x7))) (fp.div RNE (fp.neg (fp.mul RNE x9 x3)) (fp.div RNE (fp.add RNE x4 x0) (fp.roundToIntegral RNE (fp.add RNE x5 x1)))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x4 x8) (fp.div RNE (fp.sub RNE x2 x7) (fp.sub RNE x6 x0))) (fp.div RNE (fp.add RNE x6 x9) (fp.mul RNE (fp.min x0 x5) (fp.neg x7)))) (fp.sqrt RNE (fp.sub RNE (fp.div RNE x9 (fp.sub RNE x1 x6)) (fp.div RNE x4 (fp.sqrt RNE x2))))) (fp.sqrt RNE (fp.min (fp.min (fp.max (fp.mul RNE x0 x9) (fp.div RNE x0 x4)) (fp.div RNE (fp.div RNE x8 x9) (fp.roundToIntegral RNE x0))) (fp.mul RNE (fp.neg (fp.max x6 x9)) (fp.add RNE (fp.max x5 x4) (fp.div RNE x6 x7))))))))(check-sat)