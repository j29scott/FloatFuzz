;  time  = {'mathsat': 368.18854546546936}
;  terms = 102
;  score = 368.18854546546936
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.abs (fp.sqrt RNE (fp.min (fp.div RNE (fp.div RNE x3 x7) (fp.mul RNE x3 x7)) (fp.div RNE (fp.max x9 x0) (fp.div RNE x6 x8))))) (fp.max (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x5 (fp.mul RNE x9 x0)) (fp.abs x8)) (fp.div RNE (fp.div RNE x8 x5) (fp.mul RNE (fp.div RNE x0 x5) (fp.sqrt RNE x7)))) (fp.div RNE (fp.abs (fp.min x2 x8)) (fp.sub RNE (fp.mul RNE (fp.div RNE x4 x4) (fp.add RNE x0 x5)) (fp.div RNE (fp.div RNE x2 x5) (fp.mul RNE x3 x9))))) (fp.mul RNE (fp.mul RNE (fp.sqrt RNE (fp.roundToIntegral RNE x8)) (fp.min (fp.min (fp.div RNE x4 x8) (fp.sqrt RNE x1)) (fp.max (fp.mul RNE x3 x1) (fp.div RNE x3 x1)))) (fp.add RNE (fp.min (fp.roundToIntegral RNE (fp.mul RNE x3 x0)) (fp.sub RNE (fp.div RNE x6 x9) (fp.mul RNE x0 x4))) (fp.max (fp.sqrt RNE (fp.sub RNE x7 x3)) (fp.mul RNE (fp.add RNE x3 x1) (fp.sqrt RNE x5))))))))(check-sat)