;  time  = {'mathsat': 67.76278138160706}
;  terms = 91
;  score = 67.76278138160706
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.min (fp.mul RNE (fp.max (fp.add RNE (fp.max x8 x3) (fp.max x6 x1)) (fp.div RNE (fp.neg (fp.roundToIntegral RNE x8)) (fp.abs (fp.max x4 x4)))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.add RNE x2 x1)))) (fp.mul RNE (fp.max (fp.abs (fp.add RNE x6 x1)) (fp.add RNE (fp.abs x3) (fp.div RNE x8 x0))) (fp.div RNE (fp.div RNE (fp.abs x5) (fp.sqrt RNE x8)) (fp.abs (fp.roundToIntegral RNE x1))))) (fp.sub RNE (fp.min (fp.max (fp.roundToIntegral RNE (fp.max x4 x2)) (fp.div RNE (fp.mul RNE x3 x0) (fp.sqrt RNE x4))) (fp.add RNE (fp.min (fp.abs x9) (fp.mul RNE x2 x0)) (fp.abs (fp.sub RNE x6 x3)))) (fp.max (fp.min (fp.neg (fp.roundToIntegral RNE x9)) (fp.abs (fp.abs x5))) (fp.sub RNE (fp.add RNE (fp.div RNE x6 x8) (fp.div RNE x4 x8)) (fp.min (fp.abs x4) (fp.neg (fp.neg x3))))))))(check-sat)