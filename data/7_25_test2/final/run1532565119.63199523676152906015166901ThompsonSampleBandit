;  time  = {'mathsat': 193.60493063926697}
;  terms = 135
;  score = 193.60493063926697
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x2 x7) (fp.div RNE x0 x9)) (fp.sub RNE (fp.sqrt RNE (fp.div RNE x9 x1)) (fp.roundToIntegral RNE (fp.div RNE x9 x5)))) (fp.max (fp.min (fp.mul RNE x5 x6) (fp.sqrt RNE x3)) (fp.min (fp.abs x5) (fp.div RNE x5 x2)))) (fp.abs (fp.div RNE (fp.div RNE (fp.div RNE x7 (fp.roundToIntegral RNE x2)) (fp.roundToIntegral RNE x7)) (fp.div RNE (fp.sqrt RNE x1) (fp.min x1 x8))))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x0 x5) (fp.div RNE (fp.max x2 x4) (fp.mul RNE x1 x2))) (fp.abs (fp.div RNE (fp.div RNE x3 x8) (fp.div RNE x5 x7)))) (fp.div RNE (fp.sqrt RNE (fp.div RNE (fp.neg x0) (fp.div RNE x0 x7))) (fp.div RNE (fp.min (fp.roundToIntegral RNE x3) (fp.add RNE x1 x2)) (fp.sub RNE (fp.neg x1) (fp.add RNE x3 x0))))) (fp.div RNE (fp.div RNE (fp.max (fp.div RNE x4 (fp.add RNE x8 x7)) (fp.min x7 x1)) (fp.neg (fp.div RNE x2 (fp.div RNE x5 x9)))) (fp.add RNE (fp.sub RNE (fp.add RNE (fp.sub RNE x6 x9) (fp.mul RNE x8 x3)) (fp.max (fp.add RNE x4 x1) (fp.abs x7))) (fp.div RNE (fp.sqrt RNE (fp.div RNE x2 x0)) (fp.max (fp.div RNE x7 x0) (fp.div RNE x2 x7))))))))(check-sat)