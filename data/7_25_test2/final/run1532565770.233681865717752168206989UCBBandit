;  time  = {'mathsat': 526.3986542224884}
;  terms = 116
;  score = 526.3986542224884
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.div RNE (fp.abs (fp.div RNE (fp.roundToIntegral RNE x1) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x4)))) (fp.max (fp.div RNE (fp.abs (fp.neg x4)) (fp.sub RNE (fp.neg x6) (fp.add RNE x8 x7))) (fp.sqrt RNE (fp.div RNE (fp.mul RNE x1 x5) (fp.div RNE x5 x9))))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.div RNE x7 x3) (fp.div RNE x0 x5)) (fp.neg (fp.div RNE x7 x8))) (fp.min (fp.div RNE (fp.sqrt RNE x4) (fp.div RNE x6 (fp.div RNE x8 x7))) (fp.div RNE (fp.div RNE x3 x6) (fp.neg x0))))) (fp.add RNE (fp.min (fp.div RNE (fp.div RNE (fp.div RNE x9 x6) (fp.div RNE (fp.div RNE x2 x8) (fp.abs x3))) (fp.sqrt RNE (fp.div RNE x0 x4))) (fp.max (fp.abs (fp.max x0 x1)) (fp.div RNE (fp.min x8 x9) (fp.div RNE x2 (fp.div RNE x3 x0))))) (fp.mul RNE (fp.sqrt RNE (fp.div RNE (fp.abs x9) (fp.neg (fp.sub RNE x9 x0)))) (fp.sub RNE (fp.div RNE (fp.div RNE x9 x5) (fp.min x5 x6)) (fp.div RNE (fp.mul RNE x8 x6) (fp.min (fp.mul RNE x7 x0) (fp.add RNE x3 x8))))))))(check-sat)