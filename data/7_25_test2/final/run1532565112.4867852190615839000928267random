;  time  = {'mathsat': 12.403666496276855}
;  terms = 55
;  score = 12.403666496276855
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNormal (fp.mul RNE (fp.sub RNE (fp.neg (fp.mul RNE (fp.abs x9) (fp.div RNE x4 x7))) (fp.neg (fp.neg (fp.neg x1)))) (fp.sub RNE (fp.max (fp.add RNE (fp.mul RNE (fp.min x3 x7) (fp.mul RNE x8 x8)) (fp.sub RNE (fp.min x3 x9) (fp.add RNE x4 x4))) (fp.mul RNE (fp.neg (fp.add RNE x5 x3)) (fp.sqrt RNE (fp.add RNE x8 x1)))) (fp.sub RNE (fp.min (fp.abs (fp.sqrt RNE x9)) (fp.abs (fp.min x8 x6))) (fp.neg (fp.max (fp.roundToIntegral RNE x7) (fp.abs x8))))))))(check-sat)