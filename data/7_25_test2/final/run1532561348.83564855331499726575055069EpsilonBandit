;  time  = {'mathsat': 270.03751707077026}
;  terms = 87
;  score = 270.03751707077026
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.mul RNE (fp.neg (fp.add RNE (fp.neg x7) (fp.min x2 x1))) (fp.mul RNE (fp.min (fp.sub RNE x8 x7) (fp.div RNE x3 x2)) (fp.neg (fp.max x4 x6)))) (fp.min (fp.roundToIntegral RNE (fp.max (fp.max x4 x7) (fp.max x9 x7))) (fp.abs (fp.neg (fp.div RNE x7 (fp.mul RNE x0 x2)))))) (fp.max (fp.div RNE (fp.sub RNE (fp.add RNE (fp.max x3 x3) (fp.sub RNE x5 x4)) (fp.div RNE (fp.add RNE x6 x2) (fp.add RNE x1 x3))) (fp.add RNE (fp.sub RNE (fp.add RNE x0 x2) (fp.max x6 x0)) (fp.div RNE (fp.max x7 x0) (fp.div RNE x1 x2)))) (fp.abs (fp.div RNE (fp.div RNE (fp.max x5 x4) (fp.div RNE x4 (fp.roundToIntegral RNE x7))) (fp.min (fp.sub RNE x7 x8) (fp.sub RNE x3 x1)))))))(check-sat)