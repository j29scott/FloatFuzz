;  time  = {'mathsat': 35.32233428955078}
;  terms = 62
;  score = 35.32233428955078
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isPositive (fp.mul RNE (fp.div RNE (fp.div RNE (fp.mul RNE (fp.mul RNE x9 (fp.max x5 x7)) (fp.mul RNE (fp.div RNE x6 x3) (fp.add RNE x5 x4))) (fp.mul RNE (fp.sub RNE x8 x3) (fp.div RNE x8 x0))) (fp.neg (fp.sub RNE (fp.min x0 x2) (fp.neg x9)))) (fp.min (fp.min (fp.min (fp.mul RNE x9 x2) (fp.mul RNE x3 x7)) (fp.mul RNE (fp.mul RNE x3 x4) (fp.min x6 x9))) (fp.sub RNE (fp.neg (fp.add RNE x6 x1)) (fp.add RNE (fp.add RNE x1 x7) (fp.min (fp.roundToIntegral RNE x8) (fp.sub RNE x9 x0))))))))(check-sat)