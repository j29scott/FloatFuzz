;  time  = {'mathsat': 140.07328724861145}
;  terms = 77
;  score = 140.07328724861145
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.add RNE (fp.sub RNE (fp.min (fp.min x6 x6) (fp.min x0 x2)) (fp.sqrt RNE (fp.roundToIntegral RNE x0))) (fp.sqrt RNE (fp.neg (fp.div RNE x6 x9)))) (fp.add RNE (fp.div RNE (fp.max (fp.sub RNE x8 x6) (fp.neg x6)) (fp.mul RNE (fp.div RNE x2 x0) (fp.div RNE x7 (fp.mul RNE x7 x0)))) (fp.neg (fp.neg (fp.div RNE x7 x8))))) (fp.div RNE (fp.max (fp.neg (fp.abs (fp.add RNE x5 x7))) (fp.sqrt RNE (fp.add RNE (fp.mul RNE x9 x2) (fp.min x3 x3)))) (fp.add RNE (fp.div RNE (fp.abs (fp.max x2 (fp.neg x1))) (fp.add RNE (fp.mul RNE x7 x1) (fp.min x2 x8))) (fp.roundToIntegral RNE (fp.mul RNE (fp.roundToIntegral RNE x1) (fp.mul RNE x8 x1)))))))(check-sat)