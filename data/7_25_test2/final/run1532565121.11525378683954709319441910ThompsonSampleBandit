;  time  = {'mathsat': 181.58560729026794}
;  terms = 132
;  score = 181.58560729026794
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.sqrt RNE (fp.add RNE (fp.max (fp.roundToIntegral RNE x9) (fp.div RNE x9 (fp.sub RNE x5 x5))) (fp.sqrt RNE (fp.div RNE x1 x9)))) (fp.roundToIntegral RNE (fp.div RNE (fp.min (fp.abs (fp.max x7 x7)) (fp.roundToIntegral RNE (fp.mul RNE x7 x2))) (fp.div RNE (fp.div RNE (fp.sqrt RNE x5) (fp.neg x1)) (fp.div RNE (fp.min x0 x0) (fp.sqrt RNE x8)))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.abs (fp.min x6 x7)) (fp.div RNE (fp.div RNE (fp.neg x6) (fp.roundToIntegral RNE x0)) (fp.add RNE (fp.sub RNE x3 x6) (fp.div RNE x5 x6)))) (fp.div RNE (fp.abs (fp.div RNE x0 (fp.sqrt RNE x9))) (fp.div RNE (fp.sqrt RNE (fp.sub RNE x6 x1)) (fp.min (fp.div RNE x2 x5) (fp.div RNE x7 x1))))) (fp.div RNE (fp.div RNE (fp.abs (fp.max (fp.div RNE x1 x1) (fp.div RNE x6 x1))) (fp.div RNE (fp.div RNE (fp.add RNE x0 x0) (fp.div RNE x1 x1)) (fp.sub RNE (fp.div RNE x4 x5) (fp.sub RNE x6 x0)))) (fp.sub RNE (fp.max (fp.sub RNE (fp.div RNE x6 x3) (fp.div RNE x2 x2)) (fp.div RNE (fp.div RNE x7 x4) (fp.sub RNE x3 x2))) (fp.div RNE (fp.div RNE (fp.div RNE x2 x9) (fp.div RNE x7 x7)) (fp.sub RNE (fp.abs x7) (fp.div RNE x8 x8))))))))(check-sat)