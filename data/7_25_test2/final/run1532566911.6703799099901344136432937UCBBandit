;  time  = {'mathsat': 57.433674335479736}
;  terms = 84
;  score = 57.433674335479736
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.div RNE x6 (fp.neg x4)) (fp.div RNE (fp.div RNE x5 x6) (fp.add RNE x3 x1))) (fp.add RNE (fp.roundToIntegral RNE x7) (fp.div RNE x2 x6))) (fp.div RNE (fp.div RNE (fp.mul RNE x7 x8) (fp.max x0 x6)) (fp.div RNE (fp.div RNE x2 x5) (fp.div RNE (fp.abs x9) (fp.sub RNE x6 x0))))) (fp.div RNE (fp.min (fp.sub RNE (fp.sqrt RNE (fp.div RNE x2 x4)) (fp.sqrt RNE (fp.div RNE x4 x3))) (fp.div RNE (fp.div RNE (fp.div RNE x1 x7) (fp.sub RNE x1 x7)) (fp.abs (fp.add RNE x3 x0)))) (fp.div RNE (fp.div RNE (fp.sub RNE (fp.div RNE x5 x6) (fp.sqrt RNE x7)) (fp.sub RNE (fp.sqrt RNE x0) (fp.min x7 x3))) (fp.sqrt RNE (fp.div RNE (fp.roundToIntegral RNE x0) (fp.div RNE x9 x0))))))))(check-sat)