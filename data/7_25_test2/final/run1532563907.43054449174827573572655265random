;  time  = {'mathsat': 36.60979223251343}
;  terms = 73
;  score = 36.60979223251343
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isPositive (fp.min (fp.min (fp.div RNE (fp.div RNE (fp.min x1 (fp.mul RNE x4 x0)) (fp.mul RNE x7 x1)) (fp.mul RNE (fp.add RNE x2 (fp.mul RNE x3 x9)) (fp.sqrt RNE x0))) (fp.sub RNE (fp.mul RNE (fp.min (fp.div RNE x3 x7) (fp.sub RNE x7 x3)) (fp.neg (fp.roundToIntegral RNE x0))) (fp.min (fp.sqrt RNE (fp.abs x0)) (fp.sqrt RNE (fp.abs x6))))) (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.max x2 (fp.sqrt RNE x2)) (fp.div RNE x0 x5)) (fp.abs (fp.mul RNE x0 (fp.div RNE x8 x6)))) (fp.mul RNE (fp.neg (fp.mul RNE x6 (fp.sub RNE x9 x0))) (fp.max (fp.sqrt RNE x2) (fp.max (fp.add RNE x8 x8) (fp.div RNE x2 x5))))))))(check-sat)