;  time  = {'mathsat': 234.702472448349}
;  terms = 83
;  score = 234.702472448349
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.roundToIntegral RNE (fp.mul RNE (fp.abs (fp.min (fp.div RNE x1 x2) (fp.abs x1))) (fp.mul RNE (fp.add RNE (fp.sqrt RNE x7) (fp.add RNE x1 x9)) (fp.div RNE (fp.neg x0) (fp.sqrt RNE (fp.div RNE x4 x0)))))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x4 x8)) (fp.div RNE (fp.div RNE x2 x3) (fp.div RNE (fp.div RNE x8 x7) (fp.neg x2)))) (fp.div RNE (fp.sqrt RNE (fp.div RNE x5 (fp.sub RNE x8 x3))) (fp.div RNE (fp.max x9 x1) (fp.div RNE x8 x4)))) (fp.max (fp.min (fp.abs (fp.sub RNE x3 x7)) (fp.div RNE (fp.div RNE x3 (fp.sub RNE x5 x0)) (fp.div RNE x7 x0))) (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE x5) (fp.min (fp.sqrt RNE x7) (fp.abs x2))) (fp.neg (fp.add RNE x4 x2)))))))(check-sat)