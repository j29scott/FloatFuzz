;  time  = {'mathsat': 81.75261783599854}
;  terms = 80
;  score = 81.75261783599854
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.sqrt RNE (fp.max (fp.neg x5) (fp.abs x4))) (fp.roundToIntegral RNE (fp.mul RNE (fp.neg x3) (fp.add RNE x7 x5)))) (fp.add RNE (fp.min (fp.min (fp.abs x2) (fp.roundToIntegral RNE x1)) (fp.max (fp.max x3 (fp.sqrt RNE x9)) (fp.sub RNE x3 x4))) (fp.min (fp.div RNE (fp.sub RNE x7 x4) (fp.add RNE x0 x0)) (fp.roundToIntegral RNE (fp.max x4 x8))))) (fp.add RNE (fp.min (fp.neg (fp.div RNE (fp.roundToIntegral RNE x4) (fp.neg x3))) (fp.abs (fp.neg (fp.sqrt RNE x0)))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.neg x1) (fp.add RNE x3 x4)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x9))) (fp.max (fp.sub RNE (fp.div RNE x3 x3) (fp.sub RNE x3 x9)) (fp.sub RNE (fp.abs x6) (fp.min x5 x4)))))))(check-sat)