;  time  = {'mathsat': 270.4409372806549}
;  terms = 76
;  score = 270.4409372806549
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNormal (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x3 x0) (fp.div RNE (fp.neg x8) (fp.div RNE x6 x4))) (fp.div RNE (fp.min x6 x9) (fp.sqrt RNE x2))) (fp.div RNE (fp.roundToIntegral RNE (fp.sqrt RNE (fp.div RNE x4 x6))) (fp.max (fp.add RNE (fp.min x5 x7) (fp.add RNE x4 x8)) (fp.div RNE (fp.div RNE x5 x4) (fp.roundToIntegral RNE x3))))) (fp.sub RNE (fp.add RNE (fp.div RNE (fp.div RNE (fp.div RNE x9 x3) (fp.div RNE x9 x9)) (fp.mul RNE (fp.div RNE x4 x3) (fp.div RNE x9 x4))) (fp.div RNE (fp.div RNE (fp.sub RNE x0 x1) (fp.div RNE x2 x8)) (fp.neg (fp.sqrt RNE x7)))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE (fp.neg x6) (fp.div RNE x8 x4))))))))(check-sat)