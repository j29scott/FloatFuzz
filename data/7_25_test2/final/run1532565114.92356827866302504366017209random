;  time  = {'mathsat': 28.19406533241272}
;  terms = 70
;  score = 28.19406533241272
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.neg (fp.roundToIntegral RNE (fp.abs (fp.mul RNE x4 x9)))) (fp.roundToIntegral RNE (fp.mul RNE (fp.max (fp.sub RNE x1 x0) (fp.div RNE x6 x4)) (fp.mul RNE (fp.mul RNE x3 x0) (fp.mul RNE x4 x4))))) (fp.mul RNE (fp.mul RNE (fp.sqrt RNE (fp.min (fp.max x6 x0) (fp.sub RNE x1 x5))) (fp.sqrt RNE (fp.mul RNE (fp.sub RNE (fp.sqrt RNE x4) (fp.min x9 x7)) (fp.sqrt RNE (fp.abs x7))))) (fp.sub RNE (fp.min (fp.min (fp.div RNE x5 x9) (fp.sub RNE (fp.div RNE x1 x1) (fp.neg x7))) (fp.neg (fp.sub RNE x1 x4))) (fp.neg (fp.add RNE (fp.sqrt RNE (fp.mul RNE x7 x5)) (fp.neg (fp.sqrt RNE x8))))))))(check-sat)