;  time  = {'mathsat': 290.785680770874}
;  terms = 150
;  score = 290.785680770874
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.div RNE x0 x4)) (fp.roundToIntegral RNE (fp.div RNE x1 (fp.div RNE x8 x9)))) (fp.div RNE (fp.div RNE (fp.div RNE x8 (fp.div RNE x3 x6)) (fp.div RNE (fp.min x4 x9) (fp.div RNE x8 x9))) (fp.roundToIntegral RNE (fp.div RNE (fp.min x0 x8) (fp.min x6 x2))))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE (fp.abs (fp.div RNE x8 x5)) (fp.neg (fp.neg x5)))) (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.add RNE x3 x3) (fp.div RNE x3 x4)) (fp.div RNE (fp.min x2 x2) (fp.div RNE x5 x8))) (fp.sqrt RNE (fp.sub RNE (fp.div RNE x2 x1) (fp.mul RNE x9 x1)))))) (fp.div RNE (fp.max (fp.div RNE (fp.div RNE (fp.div RNE x8 x8) (fp.div RNE (fp.div RNE x9 x7) (fp.mul RNE x7 x3))) (fp.div RNE (fp.div RNE x6 (fp.roundToIntegral RNE x6)) (fp.roundToIntegral RNE (fp.neg x5)))) (fp.div RNE (fp.div RNE (fp.div RNE x1 x4) (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.roundToIntegral RNE x1))) (fp.max (fp.neg (fp.sqrt RNE x9)) (fp.roundToIntegral RNE (fp.sub RNE x6 x6))))) (fp.div RNE (fp.div RNE (fp.add RNE (fp.add RNE x6 x3) (fp.min x9 x0)) (fp.div RNE (fp.max (fp.max x3 x3) (fp.max x1 x2)) (fp.mul RNE (fp.div RNE x3 x6) (fp.min x8 x5)))) (fp.div RNE (fp.div RNE (fp.div RNE x1 x8) (fp.div RNE (fp.roundToIntegral RNE x9) (fp.sqrt RNE x5))) (fp.min (fp.abs x8) (fp.div RNE x1 x3)))))))(check-sat)