;  time  = {'mathsat': 33.19345140457153}
;  terms = 85
;  score = 33.19345140457153
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.mul RNE (fp.max (fp.min (fp.sub RNE x9 x3) (fp.add RNE x1 x7)) (fp.add RNE (fp.min x0 x0) (fp.sub RNE x3 x2))) (fp.sqrt RNE (fp.max (fp.sqrt RNE x3) (fp.abs (fp.abs x8))))) (fp.sub RNE (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.min x0 x7) (fp.sub RNE x5 x1)) (fp.max (fp.mul RNE x4 x1) (fp.min x4 x7))) (fp.neg (fp.min (fp.sub RNE x7 x5) (fp.roundToIntegral RNE x8)))) (fp.sqrt RNE (fp.add RNE (fp.sqrt RNE (fp.sub RNE x1 x7)) (fp.sqrt RNE (fp.add RNE x6 x0)))))) (fp.sqrt RNE (fp.min (fp.max (fp.sqrt RNE (fp.div RNE x1 x8)) (fp.min (fp.max x7 x1) (fp.add RNE x2 x6))) (fp.min (fp.sub RNE (fp.div RNE x2 (fp.max x6 x6)) (fp.neg x5)) (fp.sqrt RNE (fp.neg x2)))))))(check-sat)