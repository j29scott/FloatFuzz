;  time  = {'mathsat': 123.34754228591919}
;  terms = 63
;  score = 123.34754228591919
;  stdout= {'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.neg (fp.div RNE (fp.max (fp.div RNE (fp.div RNE x8 x9) (fp.mul RNE x1 x8)) (fp.max (fp.neg x5) (fp.max x3 x4))) (fp.neg (fp.max (fp.abs x1) (fp.add RNE x4 x3))))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.max (fp.add RNE x7 x1) (fp.neg x2))) (fp.sqrt RNE (fp.max (fp.min x5 x5) (fp.sqrt RNE x7)))) (fp.add RNE (fp.min (fp.div RNE (fp.add RNE x1 x3) (fp.roundToIntegral RNE x6)) (fp.abs (fp.div RNE x6 x4))) (fp.div RNE (fp.min (fp.max x8 x5) (fp.neg x0)) (fp.roundToIntegral RNE (fp.min x0 x1)))))))(check-sat)