;  time  = {'z3': 600, 'mathsat': 2.450650215148926}
;  terms = 90
;  score = 597.5493497848511
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.sub RNE (fp.sub RNE (fp.mul RNE (fp.add RNE x5 x6) (fp.mul RNE x4 x3)) (fp.sqrt RNE (fp.mul RNE x4 x8))) (fp.neg (fp.max (fp.add RNE x9 x1) (fp.mul RNE x5 x7)))) (fp.sub RNE (fp.abs (fp.abs (fp.min x1 x7))) (fp.add RNE (fp.div RNE (fp.neg x7) (fp.sqrt RNE (fp.add RNE x9 x0))) (fp.abs (fp.abs x0))))) (fp.mul RNE (fp.max (fp.sub RNE (fp.sqrt RNE (fp.roundToIntegral RNE x9)) (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.div RNE x8 x4))) (fp.sub RNE (fp.max (fp.mul RNE (fp.sub RNE x3 x7) (fp.min x9 x9)) (fp.sqrt RNE (fp.sub RNE x7 x4))) (fp.add RNE (fp.sub RNE (fp.min x2 x1) (fp.div RNE x1 x8)) (fp.sqrt RNE (fp.neg x5))))) (fp.max (fp.sqrt RNE (fp.mul RNE (fp.sqrt RNE x2) (fp.neg x8))) (fp.sub RNE (fp.sqrt RNE (fp.roundToIntegral RNE x5)) (fp.roundToIntegral RNE (fp.neg x1)))))))(check-sat)