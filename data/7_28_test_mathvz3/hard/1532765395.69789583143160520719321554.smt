;  time  = {'mathsat': 7.089138031005859, 'z3': 600}
;  terms = 75
;  score = 592.9108619689941
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.sub RNE (fp.div RNE (fp.div RNE x6 x4) (fp.abs x7)) (fp.div RNE (fp.div RNE x9 x2) (fp.mul RNE (fp.sub RNE x0 x7) (fp.sqrt RNE x4)))) (fp.div RNE (fp.abs (fp.sub RNE (fp.abs x2) (fp.max x0 x2))) (fp.add RNE (fp.abs (fp.neg x9)) (fp.abs (fp.min x1 x1))))) (fp.min (fp.abs (fp.abs (fp.div RNE x6 x3))) (fp.div RNE (fp.mul RNE (fp.div RNE x7 (fp.div RNE x1 x0)) (fp.div RNE x4 (fp.abs x8))) (fp.div RNE (fp.div RNE x3 x4) (fp.neg (fp.neg x9)))))) (fp.neg (fp.sqrt RNE (fp.div RNE (fp.mul RNE (fp.abs x2) (fp.mul RNE (fp.div RNE x5 x1) (fp.abs x6))) (fp.abs (fp.neg x7)))))))(check-sat)