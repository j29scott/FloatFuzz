;  time  = {'mathsat': 3.9210524559020996, 'z3': 600}
;  terms = 83
;  score = 596.0789475440979
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.neg (fp.div RNE (fp.sqrt RNE (fp.div RNE x2 x8)) (fp.mul RNE (fp.sub RNE x3 x8) (fp.div RNE x1 (fp.neg x4))))) (fp.sub RNE (fp.mul RNE (fp.min (fp.neg x6) (fp.min x9 x3)) (fp.neg (fp.mul RNE x3 x7))) (fp.sqrt RNE (fp.add RNE (fp.neg x9) (fp.roundToIntegral RNE x6))))) (fp.mul RNE (fp.neg (fp.mul RNE (fp.div RNE (fp.div RNE x6 x9) (fp.sub RNE x8 x5)) (fp.neg (fp.neg x4)))) (fp.div RNE (fp.neg (fp.sub RNE (fp.mul RNE (fp.min x9 x0) (fp.neg x9)) (fp.neg (fp.mul RNE x7 x4)))) (fp.add RNE (fp.mul RNE (fp.div RNE (fp.max x5 x6) (fp.div RNE x6 x3)) (fp.min (fp.neg x7) (fp.add RNE x3 x4))) (fp.sub RNE (fp.neg (fp.neg x9)) (fp.roundToIntegral RNE (fp.add RNE x6 x7))))))))(check-sat)