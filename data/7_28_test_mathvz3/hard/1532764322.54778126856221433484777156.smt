;  time  = {'mathsat': 404.12108397483826, 'z3': 600}
;  terms = 76
;  score = 195.87891602516174
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isSubnormal (fp.div RNE (fp.max (fp.abs (fp.mul RNE (fp.mul RNE x5 (fp.div RNE x0 x2)) (fp.add RNE x8 x1))) (fp.div RNE (fp.min (fp.abs x4) (fp.div RNE x0 (fp.mul RNE x8 x2))) (fp.neg (fp.mul RNE (fp.div RNE x6 x6) (fp.neg x0))))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.div RNE x8 (fp.roundToIntegral RNE x6)) (fp.max (fp.sub RNE x9 x8) (fp.div RNE x9 x1))) (fp.mul RNE (fp.div RNE x7 (fp.neg x3)) (fp.mul RNE (fp.abs x7) (fp.div RNE x7 x9)))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.div RNE x9 x3) (fp.mul RNE x1 x8)) (fp.add RNE (fp.div RNE x8 x8) (fp.abs x4))) (fp.sqrt RNE (fp.div RNE (fp.roundToIntegral RNE x2) (fp.sub RNE x4 x8))))))))(check-sat)