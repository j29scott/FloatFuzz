;  time  = {'z3': 565.658, 'mathsat': 6.782087087631226}
;  terms = 124
;  score = 558.8759129123688
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.max (fp.max (fp.add RNE (fp.div RNE (fp.neg x0) (fp.neg (fp.div RNE x3 x8))) (fp.neg (fp.mul RNE x8 x0))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x5 (fp.mul RNE x8 x6)) (fp.div RNE x3 x6)) (fp.min (fp.div RNE (fp.neg x4) (fp.div RNE x5 x3)) (fp.neg (fp.roundToIntegral RNE x8))))) (fp.div RNE (fp.neg (fp.div RNE (fp.sqrt RNE (fp.div RNE x0 x5)) (fp.add RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x8)))) (fp.sqrt RNE (fp.sub RNE (fp.mul RNE (fp.sub RNE x1 x9) (fp.mul RNE x5 x9)) (fp.mul RNE (fp.neg x5) (fp.add RNE x6 x8)))))) (fp.max (fp.div RNE (fp.sub RNE (fp.div RNE (fp.div RNE x6 (fp.div RNE x6 x1)) (fp.roundToIntegral RNE x1)) (fp.max (fp.div RNE x1 x0) (fp.neg (fp.min x4 x8)))) (fp.div RNE (fp.sqrt RNE (fp.min (fp.neg x2) (fp.max x8 x5))) (fp.abs (fp.add RNE (fp.neg x0) (fp.max x1 x6))))) (fp.div RNE (fp.neg (fp.mul RNE (fp.add RNE x8 (fp.div RNE x1 x4)) (fp.div RNE x5 (fp.sub RNE x8 x5)))) (fp.add RNE (fp.add RNE (fp.sqrt RNE x3) (fp.sub RNE (fp.max x1 x0) (fp.neg x7))) (fp.mul RNE (fp.neg x5) (fp.neg x4)))))))(check-sat)