;  time  = {'z3': 579.095, 'mathsat': 20.034867525100708}
;  terms = 85
;  score = 559.0601324748993
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.div RNE (fp.max (fp.sub RNE (fp.mul RNE (fp.mul RNE x9 (fp.mul RNE x4 x1)) (fp.mul RNE x8 (fp.div RNE x2 x9))) (fp.max (fp.div RNE x3 (fp.sub RNE x2 x0)) (fp.max x0 (fp.sub RNE x3 x6)))) (fp.div RNE (fp.div RNE (fp.abs x8) (fp.add RNE (fp.max x0 x3) (fp.neg x3))) (fp.max (fp.max x9 x2) (fp.div RNE (fp.min x4 x0) (fp.add RNE x8 x3))))) (fp.div RNE (fp.mul RNE (fp.max (fp.mul RNE (fp.max x6 x8) (fp.div RNE x8 x2)) (fp.mul RNE (fp.roundToIntegral RNE x2) (fp.sub RNE x4 x3))) (fp.max (fp.div RNE (fp.max x7 x7) (fp.add RNE x8 x4)) (fp.div RNE (fp.div RNE x2 x0) (fp.div RNE x2 x0)))) (fp.sqrt RNE (fp.sqrt RNE (fp.div RNE (fp.roundToIntegral RNE x4) (fp.neg x8))))))))(check-sat)