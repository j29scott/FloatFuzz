;  time  = {'mathsat': 90.8198299407959, 'z3': 600}
;  terms = 99
;  score = 509.1801700592041
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.div RNE (fp.max (fp.mul RNE (fp.min x1 x8) (fp.abs (fp.div RNE x1 x6))) (fp.sub RNE (fp.div RNE (fp.neg x6) (fp.sub RNE x9 x5)) (fp.div RNE (fp.mul RNE x5 x1) (fp.abs x4)))) (fp.min (fp.roundToIntegral RNE (fp.min x7 x0)) (fp.neg (fp.sqrt RNE x0)))) (fp.neg (fp.div RNE (fp.max (fp.add RNE (fp.sub RNE x2 x8) (fp.add RNE x4 x5)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x6))) (fp.min (fp.sub RNE (fp.abs x9) (fp.mul RNE x4 x6)) (fp.neg (fp.abs x7)))))) (fp.add RNE (fp.sqrt RNE (fp.mul RNE (fp.add RNE (fp.min x6 x9) (fp.div RNE x8 x6)) (fp.roundToIntegral RNE (fp.mul RNE x7 x2)))) (fp.add RNE (fp.abs (fp.add RNE (fp.max (fp.add RNE x9 x8) (fp.min x1 x5)) (fp.div RNE (fp.mul RNE x8 x1) (fp.sqrt RNE x9)))) (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.min x2 x8) (fp.add RNE x4 x4)) (fp.abs (fp.add RNE x6 x6))))))))(check-sat)