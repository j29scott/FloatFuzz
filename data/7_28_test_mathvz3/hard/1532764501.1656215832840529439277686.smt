;  time  = {'mathsat': 4.066683530807495, 'z3': 567.748}
;  terms = 81
;  score = 563.6813164691926
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.mul RNE (fp.div RNE (fp.max (fp.mul RNE (fp.min x7 x7) (fp.mul RNE (fp.div RNE x3 x8) (fp.mul RNE x3 x2))) (fp.div RNE (fp.add RNE x0 x0) (fp.max x0 (fp.min x4 x5)))) (fp.mul RNE (fp.max (fp.max x2 x2) (fp.div RNE x3 x8)) (fp.min (fp.div RNE (fp.div RNE x0 x9) (fp.mul RNE x2 x7)) (fp.abs (fp.min x8 x0))))) (fp.div RNE (fp.abs (fp.add RNE (fp.div RNE (fp.mul RNE x4 x4) (fp.mul RNE x6 x8)) (fp.min (fp.roundToIntegral RNE x5) (fp.roundToIntegral RNE x9)))) (fp.min (fp.max (fp.mul RNE (fp.sub RNE x1 x3) (fp.roundToIntegral RNE x6)) (fp.mul RNE (fp.sqrt RNE x7) (fp.abs x4))) (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE x7 x0)) (fp.neg (fp.mul RNE x5 x6))))))))(check-sat)