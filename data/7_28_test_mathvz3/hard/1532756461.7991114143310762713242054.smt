;  time  = {'z3': 600, 'mathsat': 83.10684084892273}
;  terms = 93
;  score = 516.8931591510773
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sqrt RNE (fp.mul RNE (fp.div RNE (fp.div RNE (fp.abs x3) (fp.div RNE x1 x3)) (fp.abs (fp.neg (fp.max x7 x2)))) (fp.add RNE (fp.div RNE (fp.neg x9) (fp.roundToIntegral RNE x1)) (fp.roundToIntegral RNE (fp.min x4 x5))))) (fp.div RNE (fp.div RNE (fp.add RNE (fp.abs (fp.max x6 x4)) (fp.sqrt RNE (fp.max x4 x7))) (fp.mul RNE (fp.mul RNE (fp.sub RNE x8 x6) (fp.mul RNE x3 x2)) (fp.abs (fp.div RNE x7 x4)))) (fp.max (fp.min (fp.add RNE (fp.div RNE (fp.min x3 x2) (fp.roundToIntegral RNE x2)) (fp.div RNE (fp.mul RNE x2 x0) (fp.mul RNE x1 x9))) (fp.max (fp.roundToIntegral RNE (fp.max x6 x4)) (fp.neg (fp.add RNE x8 x9)))) (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.div RNE x6 x3) (fp.mul RNE x5 x1)) (fp.mul RNE (fp.sqrt RNE x0) (fp.div RNE x5 x0))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.div RNE x7 x0))))))))(check-sat)