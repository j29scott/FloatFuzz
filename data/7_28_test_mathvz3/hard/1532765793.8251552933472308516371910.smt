;  time  = {'z3': 600, 'mathsat': 174.1407549381256}
;  terms = 69
;  score = 425.8592450618744
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.max (fp.add RNE (fp.div RNE x4 x0) (fp.add RNE x0 x1)) (fp.neg (fp.roundToIntegral RNE x0))) (fp.mul RNE (fp.add RNE (fp.roundToIntegral RNE x9) (fp.sub RNE x1 x2)) (fp.div RNE (fp.sqrt RNE x5) (fp.abs x2)))) (fp.min (fp.add RNE (fp.sub RNE (fp.neg x7) (fp.add RNE x8 x2)) (fp.roundToIntegral RNE (fp.min x3 x3))) (fp.min (fp.sub RNE (fp.mul RNE x1 x9) (fp.sub RNE x8 x4)) (fp.div RNE (fp.add RNE x8 x0) (fp.abs x4))))) (fp.roundToIntegral RNE (fp.div RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.div RNE x0 x6) (fp.div RNE x4 x7))) (fp.sqrt RNE (fp.mul RNE (fp.roundToIntegral RNE x4) (fp.min x3 x2)))))))(check-sat)