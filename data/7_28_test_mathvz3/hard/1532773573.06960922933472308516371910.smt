;  time  = {'z3': 600, 'mathsat': 26.99132800102234}
;  terms = 65
;  score = 573.0086719989777
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.sqrt RNE (fp.mul RNE (fp.abs (fp.abs x1)) (fp.sqrt RNE (fp.abs x6)))) (fp.abs (fp.sqrt RNE (fp.abs (fp.sub RNE x4 x7))))) (fp.mul RNE (fp.max (fp.max (fp.div RNE (fp.min x8 x3) (fp.sub RNE x5 x4)) (fp.sub RNE (fp.mul RNE x9 x9) (fp.roundToIntegral RNE x9))) (fp.neg (fp.add RNE (fp.roundToIntegral RNE x7) (fp.add RNE x4 x5)))) (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.add RNE x1 x9) (fp.max x0 x7)) (fp.div RNE (fp.add RNE x9 x0) (fp.div RNE x3 x6))) (fp.add RNE (fp.roundToIntegral RNE (fp.sqrt RNE x2)) (fp.div RNE (fp.abs x6) (fp.mul RNE x1 x4)))))))(check-sat)