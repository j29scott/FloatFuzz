;  time  = {'mathsat': 36.82605719566345, 'z3': 600}
;  terms = 103
;  score = 563.1739428043365
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.sqrt RNE (fp.add RNE x4 (fp.add RNE x2 x7))) (fp.sub RNE (fp.neg (fp.mul RNE x4 x0)) (fp.sub RNE (fp.mul RNE x5 x3) (fp.mul RNE x8 x5)))) (fp.roundToIntegral RNE (fp.sub RNE (fp.div RNE x0 x4) (fp.div RNE x9 (fp.max x2 x9))))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.div RNE x4 x5) (fp.div RNE x5 (fp.mul RNE x8 x6))) (fp.div RNE (fp.roundToIntegral RNE (fp.sub RNE x6 x5)) (fp.sqrt RNE (fp.sqrt RNE x7)))) (fp.neg (fp.max (fp.mul RNE (fp.sub RNE x7 x8) (fp.div RNE x4 x2)) (fp.mul RNE (fp.add RNE x0 x4) (fp.div RNE x0 x2)))))) (fp.mul RNE (fp.div RNE (fp.min (fp.max (fp.max x5 x7) (fp.add RNE x2 x3)) (fp.div RNE (fp.min x2 x5) (fp.min x7 x3))) (fp.roundToIntegral RNE (fp.div RNE (fp.neg x9) (fp.max (fp.sqrt RNE x3) (fp.sub RNE x2 x5))))) (fp.roundToIntegral RNE (fp.abs (fp.div RNE (fp.max x5 x4) (fp.div RNE x7 x1)))))))(check-sat)