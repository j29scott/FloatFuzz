;  time  = {'mathsat': 6.563053846359253, 'z3': 600}
;  terms = 81
;  score = 593.4369461536407
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.abs (fp.neg (fp.mul RNE (fp.mul RNE (fp.min x3 x9) (fp.div RNE (fp.mul RNE x5 x8) (fp.abs x2))) (fp.abs (fp.mul RNE x0 x5))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x1 x9) (fp.sqrt RNE x6)) (fp.sub RNE (fp.div RNE x4 x2) (fp.mul RNE (fp.abs x5) (fp.mul RNE x2 x0)))) (fp.roundToIntegral RNE (fp.mul RNE (fp.mul RNE x5 x2) (fp.abs x0)))) (fp.sub RNE (fp.abs (fp.min (fp.mul RNE (fp.sub RNE x6 x1) (fp.min x4 x2)) (fp.div RNE (fp.div RNE x6 x9) (fp.sub RNE x7 x5)))) (fp.sub RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.sub RNE x6 x8))) (fp.add RNE (fp.mul RNE (fp.sqrt RNE x7) (fp.sub RNE x5 x6)) (fp.div RNE (fp.div RNE x8 x7) (fp.max x5 x9))))))))(check-sat)