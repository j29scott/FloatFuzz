;  time  = {'mathsat': 7.588092088699341, 'z3': 600}
;  terms = 107
;  score = 592.4119079113007
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.mul RNE (fp.div RNE (fp.abs (fp.max (fp.max x1 x3) (fp.div RNE x8 x1))) (fp.div RNE (fp.max (fp.min x4 x5) (fp.sqrt RNE x1)) (fp.div RNE (fp.div RNE x0 x8) (fp.div RNE x0 x6)))) (fp.mul RNE (fp.max (fp.abs (fp.sub RNE x7 x6)) (fp.div RNE (fp.abs x2) (fp.sub RNE (fp.add RNE x5 x1) (fp.max x0 x8)))) (fp.min (fp.div RNE (fp.min x9 x2) (fp.sub RNE x3 x2)) (fp.add RNE (fp.mul RNE x2 x5) (fp.div RNE x1 x2))))) (fp.div RNE (fp.max (fp.roundToIntegral RNE (fp.min (fp.sub RNE x6 x2) (fp.div RNE x0 x2))) (fp.add RNE (fp.div RNE (fp.abs x9) (fp.div RNE x6 x5)) (fp.sub RNE (fp.max x0 x2) (fp.div RNE x6 x8)))) (fp.max (fp.sub RNE (fp.roundToIntegral RNE (fp.sqrt RNE (fp.sub RNE x2 x2))) (fp.mul RNE (fp.sqrt RNE (fp.neg x0)) (fp.sub RNE (fp.neg x4) (fp.div RNE x6 x6)))) (fp.sqrt RNE (fp.min (fp.sqrt RNE (fp.sub RNE x2 x6)) (fp.sqrt RNE (fp.div RNE x6 x4))))))))(check-sat)