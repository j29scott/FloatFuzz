;  time  = {'z3': 600, 'mathsat': 61.36724328994751}
;  terms = 138
;  score = 538.6327567100525
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.add RNE (fp.min (fp.sqrt RNE (fp.abs (fp.neg x3))) (fp.div RNE (fp.sub RNE (fp.sub RNE x2 x1) (fp.abs x1)) (fp.neg (fp.add RNE x8 x2)))) (fp.mul RNE (fp.sub RNE (fp.sub RNE (fp.mul RNE x8 x5) (fp.add RNE (fp.sqrt RNE x1) (fp.add RNE x2 x4))) (fp.max (fp.mul RNE x7 x7) (fp.div RNE x4 x1))) (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE x0 x3) (fp.sub RNE x0 x5)) (fp.sub RNE (fp.add RNE x7 x1) (fp.sub RNE x2 x1))) (fp.max (fp.neg (fp.max x5 x8)) (fp.div RNE (fp.sub RNE x6 x8) (fp.sub RNE x7 x5)))))) (fp.add RNE (fp.add RNE (fp.neg (fp.roundToIntegral RNE (fp.add RNE x6 x8))) (fp.div RNE (fp.mul RNE (fp.div RNE x7 (fp.sub RNE x0 x8)) (fp.mul RNE x7 x3)) (fp.div RNE (fp.add RNE x3 x6) (fp.div RNE x5 (fp.mul RNE x7 x5))))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.mul RNE x6 (fp.mul RNE x8 x4)) (fp.add RNE (fp.add RNE x0 x6) (fp.sub RNE x0 x2))) (fp.mul RNE (fp.add RNE (fp.sub RNE x5 x1) (fp.sub RNE x9 x4)) (fp.mul RNE (fp.sub RNE x2 x1) (fp.mul RNE x1 x9)))) (fp.sub RNE (fp.max (fp.sub RNE x5 x4) (fp.sub RNE x3 x8)) (fp.min (fp.sub RNE x5 x9) (fp.add RNE x9 (fp.sub RNE x8 x2))))))))(check-sat)