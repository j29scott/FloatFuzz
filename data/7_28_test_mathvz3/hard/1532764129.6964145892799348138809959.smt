;  time  = {'z3': 600, 'mathsat': 9.960490703582764}
;  terms = 92
;  score = 590.0395092964172
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.sub RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.sub RNE x8 (fp.mul RNE x0 x8)) (fp.roundToIntegral RNE x9)) (fp.div RNE (fp.max (fp.max x1 x6) (fp.max x1 x8)) (fp.div RNE (fp.abs x0) (fp.div RNE x1 x5)))) (fp.div RNE (fp.mul RNE (fp.div RNE x1 x8) (fp.max (fp.div RNE x8 x1) (fp.div RNE x5 x1))) (fp.sub RNE (fp.min (fp.sub RNE x2 x0) (fp.roundToIntegral RNE x6)) (fp.sub RNE (fp.sqrt RNE x4) (fp.div RNE x8 x2))))) (fp.mul RNE (fp.neg (fp.max (fp.mul RNE (fp.sqrt RNE x0) (fp.sqrt RNE x1)) (fp.sub RNE (fp.sqrt RNE x8) (fp.abs x0)))) (fp.div RNE (fp.max (fp.neg (fp.sub RNE x8 x0)) (fp.mul RNE (fp.mul RNE x3 x8) (fp.sub RNE x8 x2))) (fp.add RNE (fp.max (fp.min x4 x2) (fp.div RNE x5 x9)) (fp.mul RNE (fp.max x7 x7) (fp.max x8 x4))))))))(check-sat)