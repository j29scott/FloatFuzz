;  time  = {'z3': 600, 'mathsat': 172.41438055038452}
;  terms = 103
;  score = 427.5856194496155
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.min (fp.mul RNE x0 (fp.neg x6)) (fp.mul RNE x9 (fp.sub RNE x5 x3))) (fp.roundToIntegral RNE (fp.sqrt RNE x5))) (fp.mul RNE (fp.neg (fp.neg (fp.max x8 x3))) (fp.sub RNE (fp.div RNE (fp.max x2 x8) (fp.max x4 x4)) (fp.mul RNE (fp.max x8 x4) (fp.div RNE x1 x9))))) (fp.mul RNE (fp.mul RNE (fp.neg (fp.roundToIntegral RNE (fp.sqrt RNE x9))) (fp.min (fp.max (fp.roundToIntegral RNE x4) (fp.roundToIntegral RNE x4)) (fp.mul RNE (fp.sqrt RNE x1) (fp.roundToIntegral RNE x1)))) (fp.min (fp.roundToIntegral RNE (fp.abs (fp.add RNE x7 x3))) (fp.mul RNE (fp.div RNE (fp.div RNE x4 x9) (fp.sqrt RNE x2)) (fp.sqrt RNE (fp.neg x8)))))) (fp.div RNE (fp.sqrt RNE (fp.neg (fp.div RNE (fp.mul RNE x4 (fp.min x8 x6)) (fp.mul RNE x8 (fp.mul RNE x5 x1))))) (fp.mul RNE (fp.sqrt RNE (fp.mul RNE (fp.max x1 x1) (fp.div RNE x6 x1))) (fp.neg (fp.div RNE (fp.abs (fp.abs x6)) (fp.roundToIntegral RNE (fp.mul RNE x3 x7))))))))(check-sat)