;  time  = {'mathsat': 9.758758783340454, 'z3': 600}
;  terms = 138
;  score = 590.2412412166595
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE (fp.max (fp.min x1 x1) (fp.mul RNE (fp.neg x6) (fp.div RNE x7 x4)))) (fp.add RNE (fp.sub RNE (fp.div RNE x1 (fp.neg x1)) (fp.abs x5)) (fp.mul RNE (fp.min x7 x2) (fp.add RNE x3 x2)))) (fp.max (fp.mul RNE (fp.sub RNE (fp.div RNE x8 x6) (fp.max (fp.sub RNE x4 x0) (fp.add RNE x9 x4))) (fp.sub RNE (fp.min (fp.max x9 x9) (fp.div RNE x3 x3)) (fp.add RNE (fp.mul RNE x2 x2) (fp.add RNE x6 x3)))) (fp.max (fp.neg (fp.max (fp.max x5 x3) (fp.min x6 x9))) (fp.div RNE (fp.neg (fp.max x2 x9)) (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x1)))))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x6 (fp.sqrt RNE x1)) (fp.min (fp.add RNE x9 x4) (fp.sub RNE x9 x3))) (fp.max (fp.neg (fp.max x3 x0)) (fp.abs (fp.sub RNE x5 x7)))) (fp.mul RNE (fp.mul RNE (fp.div RNE x1 x5) (fp.sub RNE x4 (fp.abs x3))) (fp.sqrt RNE (fp.mul RNE x3 x1)))) (fp.sqrt RNE (fp.max (fp.min (fp.sub RNE (fp.sub RNE x7 x1) (fp.sub RNE x8 x2)) (fp.max (fp.add RNE x6 x5) (fp.div RNE x0 x9))) (fp.roundToIntegral RNE (fp.max (fp.div RNE x0 x0) (fp.div RNE x5 x6))))))))(check-sat)