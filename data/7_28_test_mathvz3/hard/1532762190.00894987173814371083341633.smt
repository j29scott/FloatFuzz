;  time  = {'mathsat': 82.42548751831055, 'z3': 600}
;  terms = 133
;  score = 517.5745124816895
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE x4 (fp.sub RNE x5 x1)) (fp.abs (fp.mul RNE x4 x2))) (fp.sub RNE (fp.mul RNE (fp.min x3 x6) (fp.max x8 x3)) (fp.add RNE (fp.abs x8) (fp.mul RNE x7 x9)))) (fp.mul RNE (fp.abs (fp.abs (fp.mul RNE x8 x1))) (fp.abs (fp.max (fp.div RNE x8 x4) (fp.roundToIntegral RNE x6))))) (fp.max (fp.neg (fp.neg (fp.roundToIntegral RNE (fp.mul RNE x6 x7)))) (fp.max (fp.min (fp.max (fp.add RNE x6 x1) (fp.add RNE x1 x7)) (fp.mul RNE (fp.max x6 x8) (fp.div RNE x0 x2))) (fp.roundToIntegral RNE (fp.min (fp.sqrt RNE x9) (fp.div RNE x3 x4)))))) (fp.mul RNE (fp.max (fp.mul RNE (fp.mul RNE (fp.mul RNE x8 x1) (fp.abs x0)) (fp.neg (fp.sub RNE x0 x8))) (fp.min (fp.mul RNE (fp.mul RNE x1 x9) (fp.abs x9)) (fp.div RNE (fp.abs x1) (fp.min x1 x7)))) (fp.mul RNE (fp.neg (fp.abs (fp.mul RNE x3 x6))) (fp.mul RNE (fp.max (fp.mul RNE (fp.mul RNE x9 x1) (fp.mul RNE x7 x5)) (fp.sub RNE (fp.sqrt RNE x2) (fp.add RNE x9 x0))) (fp.add RNE (fp.div RNE (fp.mul RNE x8 x6) (fp.min x8 x6)) (fp.min (fp.mul RNE x9 x9) (fp.div RNE x8 x9))))))))(check-sat)