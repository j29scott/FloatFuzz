;  time  = {'mathsat': 26.975589752197266, 'z3': 600}
;  terms = 110
;  score = 573.0244102478027
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.roundToIntegral RNE (fp.div RNE (fp.min (fp.abs x2) (fp.neg x6)) (fp.add RNE (fp.div RNE (fp.mul RNE x7 x6) (fp.sub RNE x3 x3)) (fp.sub RNE (fp.max x6 x8) (fp.min x9 x7))))) (fp.div RNE (fp.mul RNE (fp.sub RNE (fp.max x6 x4) (fp.max x9 x8)) (fp.add RNE (fp.div RNE x8 x3) (fp.div RNE x5 (fp.sub RNE x0 x8)))) (fp.roundToIntegral RNE (fp.div RNE (fp.abs x6) (fp.min (fp.neg x3) (fp.sqrt RNE x0)))))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.div RNE (fp.add RNE x4 x7) (fp.mul RNE (fp.neg x1) (fp.roundToIntegral RNE x5))) (fp.min (fp.div RNE x2 x6) (fp.neg x9))) (fp.div RNE (fp.div RNE (fp.sqrt RNE (fp.abs x5)) (fp.sub RNE (fp.div RNE x1 x3) (fp.min x9 x9))) (fp.neg (fp.div RNE (fp.div RNE x6 x2) (fp.roundToIntegral RNE x2))))) (fp.div RNE (fp.max (fp.neg (fp.mul RNE x9 x4)) (fp.abs (fp.add RNE x2 x3))) (fp.sub RNE (fp.sqrt RNE (fp.min x6 x2)) (fp.mul RNE (fp.add RNE x0 x8) (fp.add RNE x5 x1)))))))(check-sat)