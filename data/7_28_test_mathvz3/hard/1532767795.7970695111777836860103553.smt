;  time  = {'z3': 600, 'mathsat': 89.13953852653503}
;  terms = 83
;  score = 510.86046147346497
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.mul RNE (fp.add RNE (fp.add RNE (fp.abs (fp.add RNE x2 x6)) (fp.mul RNE (fp.sub RNE x6 x8) (fp.add RNE x0 x3))) (fp.mul RNE (fp.mul RNE (fp.add RNE x3 x5) (fp.mul RNE x7 x2)) (fp.mul RNE (fp.abs x2) (fp.max (fp.mul RNE x4 x4) (fp.roundToIntegral RNE x8))))) (fp.div RNE (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.div RNE x4 x7) (fp.mul RNE x0 x6)) (fp.add RNE (fp.max x4 x4) (fp.roundToIntegral RNE x5))) (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE x4) (fp.min x1 x6)) (fp.div RNE (fp.mul RNE x8 x0) (fp.sqrt RNE x3)))) (fp.sub RNE (fp.min (fp.add RNE (fp.add RNE x8 x8) (fp.sqrt RNE x9)) (fp.min (fp.roundToIntegral RNE x3) (fp.div RNE x2 x4))) (fp.roundToIntegral RNE (fp.max (fp.mul RNE x2 x6) (fp.max x9 x4))))))))(check-sat)