;  time  = {'z3': 600, 'mathsat': 19.628137350082397}
;  terms = 74
;  score = 580.3718626499176
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.sub RNE (fp.div RNE (fp.abs (fp.abs (fp.add RNE x1 x6))) (fp.roundToIntegral RNE (fp.add RNE (fp.add RNE (fp.abs x9) (fp.roundToIntegral RNE x1)) (fp.div RNE (fp.mul RNE x7 x7) (fp.div RNE x6 x2))))) (fp.div RNE (fp.sub RNE (fp.add RNE (fp.div RNE x3 (fp.abs x4)) (fp.div RNE (fp.div RNE x1 x0) (fp.div RNE x7 x6))) (fp.sub RNE (fp.sub RNE x6 (fp.add RNE x8 x8)) (fp.roundToIntegral RNE (fp.add RNE x0 x7)))) (fp.add RNE (fp.sub RNE (fp.div RNE (fp.div RNE x9 x2) (fp.roundToIntegral RNE x1)) (fp.mul RNE (fp.roundToIntegral RNE x5) (fp.div RNE x0 x8))) (fp.sub RNE (fp.max (fp.max x6 x1) (fp.div RNE x1 x4)) (fp.add RNE (fp.neg x2) (fp.div RNE x0 x9))))))))(check-sat)