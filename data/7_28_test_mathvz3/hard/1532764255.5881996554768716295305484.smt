;  time  = {'z3': 600, 'mathsat': 39.134745359420776}
;  terms = 103
;  score = 560.8652546405792
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.roundToIntegral RNE (fp.div RNE (fp.min (fp.sqrt RNE x4) (fp.div RNE x3 x5)) (fp.min (fp.sub RNE x3 x4) (fp.sub RNE x6 x9)))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.abs x3)) (fp.mul RNE (fp.min x2 (fp.mul RNE x2 x7)) (fp.min x5 x1))) (fp.min (fp.mul RNE (fp.max x4 x5) (fp.div RNE x0 x7)) (fp.min (fp.div RNE x8 x2) (fp.div RNE (fp.mul RNE x9 x0) (fp.sub RNE x5 x7)))))) (fp.div RNE (fp.neg (fp.div RNE (fp.div RNE (fp.div RNE x8 x4) (fp.max x5 x9)) (fp.min (fp.add RNE x6 x6) (fp.div RNE (fp.min x8 x7) (fp.min x4 x5))))) (fp.min (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE x1) (fp.neg x3)) (fp.max (fp.min x9 x9) (fp.div RNE x6 x1)))) (fp.div RNE (fp.div RNE (fp.sqrt RNE (fp.add RNE x2 x2)) (fp.roundToIntegral RNE (fp.sub RNE x6 x5))) (fp.roundToIntegral RNE (fp.mul RNE (fp.roundToIntegral RNE x2) (fp.sub RNE x4 x1))))))))(check-sat)