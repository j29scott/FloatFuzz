;  time  = {'z3': 558.313, 'mathsat': 6.121034622192383}
;  terms = 102
;  score = 552.1919653778076
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.abs (fp.div RNE (fp.div RNE (fp.min x9 x4) (fp.div RNE x9 x9)) (fp.min (fp.sub RNE (fp.sub RNE x5 x5) (fp.abs x1)) (fp.div RNE (fp.min x1 x7) (fp.sqrt RNE x8))))) (fp.div RNE (fp.max (fp.roundToIntegral RNE (fp.abs (fp.max x8 x5))) (fp.min (fp.mul RNE (fp.div RNE x9 x1) (fp.abs x0)) (fp.add RNE (fp.abs x2) (fp.abs x7)))) (fp.div RNE (fp.div RNE (fp.min (fp.div RNE x7 x3) (fp.div RNE x2 x1)) (fp.abs (fp.min x3 x0))) (fp.add RNE (fp.abs (fp.abs x8)) (fp.min (fp.div RNE x7 x5) (fp.neg x9)))))) (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.max (fp.sqrt RNE x1) (fp.div RNE x0 x6))) (fp.div RNE (fp.mul RNE (fp.mul RNE x9 x6) (fp.abs x8)) (fp.min (fp.div RNE (fp.mul RNE x8 x5) (fp.roundToIntegral RNE x0)) (fp.div RNE (fp.sqrt RNE x5) (fp.sub RNE x6 x5))))) (fp.sqrt RNE (fp.neg (fp.mul RNE (fp.roundToIntegral RNE x3) (fp.abs x7)))))))(check-sat)