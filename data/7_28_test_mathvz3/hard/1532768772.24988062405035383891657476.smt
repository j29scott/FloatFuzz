;  time  = {'mathsat': 3.642989158630371, 'z3': 553.272}
;  terms = 92
;  score = 549.6290108413697
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE (fp.min x8 x6) (fp.abs x4))) (fp.min (fp.sqrt RNE (fp.abs x4)) (fp.sqrt RNE (fp.min x0 x4)))) (fp.div RNE (fp.sqrt RNE (fp.max (fp.sub RNE (fp.add RNE x6 x2) (fp.min x7 x5)) (fp.sub RNE (fp.div RNE x4 x0) (fp.add RNE x9 x1)))) (fp.abs (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x5 x1)) (fp.roundToIntegral RNE (fp.sub RNE x5 x9)))))) (fp.min (fp.div RNE (fp.sub RNE (fp.abs (fp.neg x1)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x8))) (fp.mul RNE (fp.neg (fp.div RNE x9 x3)) (fp.abs (fp.neg x3)))) (fp.min (fp.max (fp.roundToIntegral RNE (fp.min x3 x2)) (fp.abs (fp.sub RNE x6 x6))) (fp.min (fp.roundToIntegral RNE (fp.div RNE (fp.max x9 x2) (fp.neg x9))) (fp.div RNE (fp.sub RNE (fp.roundToIntegral RNE x9) (fp.roundToIntegral RNE x4)) (fp.sub RNE (fp.min x0 x1) (fp.neg x4))))))))(check-sat)