;  time  = {'mathsat': 17.85948896408081, 'z3': 600}
;  terms = 87
;  score = 582.1405110359192
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE (fp.roundToIntegral RNE (fp.sub RNE x0 x2)) (fp.div RNE (fp.div RNE x3 x6) (fp.sub RNE (fp.div RNE x2 x8) (fp.sub RNE x9 x8)))))) (fp.sub RNE (fp.neg (fp.mul RNE (fp.max (fp.div RNE x3 (fp.neg x0)) (fp.sqrt RNE x7)) (fp.sub RNE (fp.div RNE x0 (fp.min x8 x2)) (fp.div RNE x5 x7)))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x4 x9) (fp.sqrt RNE x1)) (fp.add RNE (fp.div RNE x0 x8) (fp.mul RNE x7 x7))) (fp.div RNE (fp.sub RNE (fp.sub RNE x5 x3) (fp.abs x2)) (fp.neg (fp.sqrt RNE x0)))) (fp.div RNE (fp.sub RNE (fp.max (fp.mul RNE x2 x7) (fp.max x2 x9)) (fp.div RNE (fp.mul RNE x8 x4) (fp.mul RNE x4 x5))) (fp.abs (fp.max (fp.max x7 x8) (fp.roundToIntegral RNE x1))))))))(check-sat)