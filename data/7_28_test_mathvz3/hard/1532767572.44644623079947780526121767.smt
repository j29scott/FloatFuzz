;  time  = {'mathsat': 178.39963221549988, 'z3': 600}
;  terms = 96
;  score = 421.6003677845001
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNormal (fp.div RNE (fp.div RNE (fp.sub RNE (fp.div RNE (fp.add RNE x5 x9) (fp.mul RNE x3 x6)) (fp.div RNE (fp.div RNE x2 x9) (fp.sub RNE x3 x9))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.div RNE x5 x2) (fp.sqrt RNE x3)) (fp.add RNE (fp.neg x3) (fp.div RNE x1 x6))) (fp.div RNE (fp.div RNE (fp.div RNE x0 x2) (fp.div RNE x6 x6)) (fp.div RNE (fp.mul RNE x2 x9) (fp.mul RNE x1 x6))))) (fp.div RNE (fp.sub RNE (fp.sub RNE (fp.neg (fp.div RNE x2 x1)) (fp.sub RNE (fp.div RNE x5 x9) (fp.add RNE x7 x1))) (fp.sub RNE (fp.div RNE (fp.div RNE x1 x9) (fp.sub RNE x4 x1)) (fp.mul RNE (fp.sub RNE x0 x4) (fp.sub RNE x4 x2)))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.min x1 x2) (fp.min x6 x6)) (fp.neg (fp.div RNE x3 x8))) (fp.sqrt RNE (fp.add RNE (fp.div RNE x0 x8) (fp.abs x9))))))))(check-sat)