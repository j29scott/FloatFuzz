;  time  = {'mathsat': 218.08277702331543, 'z3': 579.386}
;  terms = 120
;  score = 361.30322297668454
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.sqrt RNE (fp.max (fp.div RNE (fp.roundToIntegral RNE x2) (fp.max x5 (fp.div RNE x5 x3))) (fp.max (fp.max (fp.roundToIntegral RNE x5) (fp.max x8 x5)) (fp.sub RNE (fp.mul RNE x6 x4) (fp.sqrt RNE x1))))) (fp.min (fp.min (fp.roundToIntegral RNE (fp.max x2 (fp.max x5 x8))) (fp.div RNE (fp.roundToIntegral RNE x0) (fp.mul RNE x2 x1))) (fp.div RNE (fp.min (fp.max (fp.min x6 x1) (fp.mul RNE x4 x0)) (fp.sqrt RNE (fp.min x7 x0))) (fp.sqrt RNE (fp.sqrt RNE (fp.sub RNE x3 x4)))))) (fp.min (fp.div RNE (fp.min (fp.add RNE (fp.min x4 x5) (fp.sqrt RNE x3)) (fp.min (fp.min x4 x0) (fp.mul RNE (fp.max x3 x6) (fp.sub RNE x8 x1)))) (fp.sqrt RNE (fp.mul RNE (fp.sub RNE x3 x9) (fp.min x9 x4)))) (fp.min (fp.add RNE (fp.div RNE (fp.max (fp.min x0 x2) (fp.neg x3)) (fp.add RNE (fp.mul RNE x5 x7) (fp.add RNE x5 x2))) (fp.min (fp.min (fp.roundToIntegral RNE x8) (fp.roundToIntegral RNE x8)) (fp.sub RNE (fp.min x4 x1) (fp.add RNE x2 x8)))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.sqrt RNE (fp.min x3 x7))))))))(check-sat)