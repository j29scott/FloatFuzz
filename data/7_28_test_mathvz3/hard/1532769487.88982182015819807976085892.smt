;  time  = {'mathsat': 74.01439356803894, 'z3': 600}
;  terms = 95
;  score = 525.9856064319611
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.div RNE (fp.add RNE (fp.div RNE x0 x5) (fp.div RNE (fp.neg x4) (fp.div RNE x1 x9))) (fp.div RNE (fp.add RNE x4 x7) (fp.max x6 x8))) (fp.max (fp.max (fp.max x1 (fp.add RNE x5 x2)) (fp.div RNE (fp.min x8 x8) (fp.roundToIntegral RNE x5))) (fp.add RNE (fp.sqrt RNE x7) (fp.min (fp.neg x6) (fp.div RNE x6 x2))))) (fp.sqrt RNE (fp.min (fp.div RNE (fp.mul RNE (fp.div RNE x8 x5) (fp.max x0 x0)) (fp.max (fp.neg x9) (fp.neg x7))) (fp.min (fp.div RNE (fp.add RNE x8 x9) (fp.max x5 x9)) (fp.div RNE (fp.div RNE x9 x3) (fp.add RNE x4 x7)))))) (fp.neg (fp.div RNE (fp.add RNE (fp.add RNE (fp.sqrt RNE x8) (fp.div RNE x5 (fp.roundToIntegral RNE x8))) (fp.abs (fp.max x5 x0))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.min (fp.add RNE x7 x1) (fp.sqrt RNE x5))))))))(check-sat)