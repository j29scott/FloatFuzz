;  time  = {'mathsat': 5.5989601612091064, 'z3': 600}
;  terms = 91
;  score = 594.4010398387909
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.max (fp.sub RNE (fp.div RNE (fp.neg x7) (fp.abs x6)) (fp.max (fp.div RNE x3 (fp.div RNE x6 x2)) (fp.sqrt RNE (fp.sqrt RNE x6)))) (fp.mul RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x1)) (fp.max (fp.max x6 x5) (fp.div RNE x6 x8)))) (fp.min (fp.sqrt RNE (fp.abs (fp.neg (fp.sqrt RNE x9)))) (fp.roundToIntegral RNE (fp.max (fp.max (fp.div RNE x4 x0) (fp.div RNE x4 x4)) (fp.min (fp.neg x4) (fp.div RNE x7 x7)))))) (fp.div RNE (fp.max (fp.min (fp.min (fp.abs x8) (fp.neg x4)) (fp.neg (fp.abs x1))) (fp.div RNE (fp.add RNE (fp.div RNE x3 x4) (fp.min x0 x8)) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x9 x1) (fp.neg x5))))) (fp.mul RNE (fp.div RNE (fp.neg (fp.abs x7)) (fp.neg (fp.roundToIntegral RNE (fp.min x2 x1)))) (fp.sqrt RNE (fp.abs (fp.div RNE x5 x8)))))))(check-sat)