;  time  = {'mathsat': 10.777192831039429, 'z3': 600}
;  terms = 85
;  score = 589.2228071689606
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.div RNE x6 x7) (fp.sub RNE (fp.mul RNE x7 x4) (fp.div RNE x4 x8))) (fp.mul RNE (fp.sub RNE (fp.div RNE x6 x4) (fp.div RNE x8 x7)) (fp.div RNE (fp.neg x6) (fp.mul RNE x6 x5)))) (fp.max (fp.roundToIntegral RNE (fp.sub RNE x7 (fp.div RNE x4 x2))) (fp.mul RNE (fp.mul RNE x6 x6) (fp.div RNE x6 x0)))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.div RNE x4 x8) (fp.neg x3)) (fp.sub RNE (fp.abs (fp.mul RNE x1 x5)) (fp.div RNE (fp.div RNE x4 x3) (fp.abs x5)))) (fp.div RNE (fp.div RNE (fp.sub RNE x3 x4) (fp.sub RNE (fp.div RNE x8 x3) (fp.div RNE x1 x7))) (fp.div RNE (fp.div RNE (fp.div RNE x2 x0) (fp.neg x9)) (fp.roundToIntegral RNE (fp.div RNE x8 x7))))))))(check-sat)