;  time  = {'mathsat': 9.544979572296143, 'z3': 583.15}
;  terms = 65
;  score = 573.6050204277038
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE x8) (fp.sub RNE x8 x4)) (fp.sub RNE (fp.sub RNE x9 x3) (fp.abs x6))) (fp.div RNE (fp.roundToIntegral RNE (fp.abs x5)) (fp.max (fp.div RNE x9 x1) (fp.mul RNE x7 x8)))) (fp.mul RNE (fp.add RNE (fp.sqrt RNE (fp.neg x2)) (fp.sqrt RNE (fp.mul RNE x8 x3))) (fp.abs (fp.roundToIntegral RNE (fp.roundToIntegral RNE x9))))) (fp.div RNE (fp.div RNE (fp.abs (fp.div RNE (fp.sub RNE x3 x2) (fp.abs x5))) (fp.abs (fp.sqrt RNE (fp.div RNE x3 x1)))) (fp.sqrt RNE (fp.min (fp.abs (fp.abs x8)) (fp.add RNE (fp.div RNE x0 x5) (fp.roundToIntegral RNE x4)))))))(check-sat)