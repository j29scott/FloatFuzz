;  time  = {'mathsat': 23.422544240951538, 'z3': 600}
;  terms = 79
;  score = 576.5774557590485
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNormal (fp.sub RNE (fp.div RNE (fp.max (fp.mul RNE (fp.add RNE x3 (fp.neg x9)) (fp.sub RNE x2 x5)) (fp.mul RNE (fp.sub RNE (fp.sqrt RNE x3) (fp.sub RNE x0 x3)) (fp.sub RNE (fp.mul RNE x6 x3) (fp.mul RNE x4 x7)))) (fp.abs (fp.mul RNE (fp.sub RNE (fp.abs x1) (fp.div RNE x0 x3)) (fp.sqrt RNE (fp.mul RNE x3 x1))))) (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.mul RNE x0 x6) (fp.mul RNE x9 x9)) (fp.add RNE (fp.min (fp.mul RNE x6 x2) (fp.add RNE x7 x7)) (fp.mul RNE (fp.abs x2) (fp.roundToIntegral RNE x3)))) (fp.div RNE (fp.div RNE (fp.sqrt RNE x8) (fp.div RNE (fp.abs x7) (fp.add RNE x3 x2))) (fp.div RNE (fp.roundToIntegral RNE x6) (fp.mul RNE (fp.neg x2) (fp.max x0 x6))))))))(check-sat)