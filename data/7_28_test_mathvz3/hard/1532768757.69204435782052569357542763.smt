;  time  = {'z3': 552.373, 'mathsat': 24.264082670211792}
;  terms = 103
;  score = 528.1089173297883
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sqrt RNE (fp.mul RNE (fp.sub RNE (fp.add RNE (fp.div RNE x4 x2) (fp.min (fp.roundToIntegral RNE x0) (fp.mul RNE x3 x9))) (fp.div RNE (fp.div RNE x7 (fp.div RNE x2 x3)) (fp.min (fp.min x2 x2) (fp.abs x3)))) (fp.div RNE (fp.mul RNE (fp.div RNE x7 x4) (fp.abs x3)) (fp.min (fp.div RNE (fp.roundToIntegral RNE x5) (fp.mul RNE x9 x7)) (fp.min (fp.mul RNE x9 x9) (fp.mul RNE x5 x2)))))) (fp.div RNE (fp.abs (fp.div RNE (fp.div RNE (fp.add RNE x7 (fp.abs x5)) (fp.sub RNE (fp.mul RNE x6 x0) (fp.min x5 x0))) (fp.max (fp.sub RNE (fp.div RNE x4 x7) (fp.min x8 x2)) (fp.min (fp.mul RNE x6 x2) (fp.abs x8))))) (fp.min (fp.sub RNE (fp.min (fp.roundToIntegral RNE x4) (fp.neg (fp.sqrt RNE x8))) (fp.min (fp.div RNE x5 x6) (fp.min (fp.min x1 x9) (fp.max x4 x9)))) (fp.abs (fp.max (fp.min x1 x5) (fp.div RNE x4 x5)))))))(check-sat)