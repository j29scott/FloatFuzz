;  time  = {'mathsat': 76.60721158981323, 'z3': 600}
;  terms = 73
;  score = 523.3927884101868
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sqrt RNE (fp.div RNE (fp.add RNE (fp.add RNE (fp.mul RNE x8 x5) (fp.mul RNE x0 x2)) (fp.sub RNE (fp.mul RNE x7 x8) (fp.div RNE x9 (fp.neg x2)))) (fp.div RNE (fp.sqrt RNE (fp.mul RNE x0 x6)) (fp.roundToIntegral RNE (fp.add RNE (fp.mul RNE x1 x8) (fp.add RNE x1 x2)))))) (fp.div RNE (fp.div RNE (fp.abs (fp.min (fp.abs x8) (fp.div RNE x3 x3))) (fp.div RNE (fp.sqrt RNE (fp.roundToIntegral RNE x3)) (fp.min (fp.sub RNE (fp.abs x8) (fp.neg x8)) (fp.neg (fp.neg x4))))) (fp.min (fp.abs (fp.abs (fp.neg x8))) (fp.div RNE (fp.abs (fp.div RNE x5 x2)) (fp.div RNE (fp.min x8 x8) (fp.min (fp.sqrt RNE x7) (fp.sqrt RNE x7))))))))(check-sat)