;  time  = {'mathsat': 16.756850242614746, 'z3': 600}
;  terms = 79
;  score = 583.2431497573853
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.mul RNE (fp.abs (fp.abs x1)) (fp.neg (fp.roundToIntegral RNE x3))) (fp.max (fp.sqrt RNE (fp.abs x1)) (fp.abs (fp.mul RNE x4 x3)))) (fp.div RNE (fp.max (fp.div RNE (fp.mul RNE x2 x3) (fp.max x1 x1)) (fp.add RNE (fp.sub RNE x5 x4) (fp.roundToIntegral RNE x7))) (fp.div RNE (fp.max (fp.mul RNE x9 x9) (fp.min x0 x1)) (fp.abs (fp.add RNE x8 x2))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.min (fp.abs x4) (fp.neg x2)) (fp.roundToIntegral RNE (fp.abs x1))) (fp.div RNE (fp.abs (fp.sqrt RNE x3)) (fp.neg (fp.abs x7)))) (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE (fp.sub RNE x6 x1) (fp.max x8 x8))) (fp.sqrt RNE (fp.sub RNE (fp.mul RNE x0 x0) (fp.neg x7)))))))(check-sat)