;  time  = {'z3': 547.364, 'mathsat': 6.464941740036011}
;  terms = 128
;  score = 540.899058259964
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.max (fp.min (fp.min (fp.min (fp.roundToIntegral RNE x1) (fp.sqrt RNE x4)) (fp.max (fp.div RNE x8 x4) (fp.mul RNE (fp.mul RNE x8 x5) (fp.max x1 x6)))) (fp.div RNE (fp.max (fp.max x9 x3) (fp.roundToIntegral RNE x1)) (fp.add RNE (fp.div RNE x9 x1) (fp.div RNE x6 x6)))) (fp.div RNE (fp.div RNE (fp.min (fp.mul RNE (fp.max x1 x1) (fp.add RNE x9 x9)) (fp.mul RNE (fp.max x0 x8) (fp.neg x5))) (fp.mul RNE (fp.min (fp.div RNE x0 x8) (fp.div RNE x3 x9)) (fp.sqrt RNE (fp.mul RNE x1 x0)))) (fp.mul RNE (fp.sub RNE (fp.add RNE (fp.min x4 x2) (fp.div RNE x5 x3)) (fp.div RNE (fp.div RNE x2 x3) (fp.max x3 x4))) (fp.add RNE (fp.sqrt RNE (fp.sqrt RNE x8)) (fp.neg (fp.neg x4)))))) (fp.add RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.div RNE (fp.sqrt RNE x2) (fp.abs (fp.div RNE x4 x4))) (fp.sqrt RNE (fp.sqrt RNE x9)))) (fp.mul RNE (fp.abs (fp.max (fp.sqrt RNE x5) (fp.sub RNE (fp.max x6 x5) (fp.roundToIntegral RNE x9)))) (fp.div RNE (fp.add RNE (fp.sqrt RNE (fp.max x6 x7)) (fp.add RNE (fp.sub RNE x3 x1) (fp.sqrt RNE x3))) (fp.neg (fp.max (fp.mul RNE x6 x2) (fp.roundToIntegral RNE x5))))))))(check-sat)