;  time  = {'z3': 600, 'mathsat': 283.47465085983276}
;  terms = 88
;  score = 316.52534914016724
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isSubnormal (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.sub RNE (fp.add RNE x7 x3) (fp.sub RNE (fp.div RNE x4 x9) (fp.sub RNE x5 x9))) (fp.sub RNE (fp.mul RNE x4 x1) (fp.roundToIntegral RNE (fp.neg x3)))) (fp.sub RNE (fp.sub RNE (fp.sqrt RNE x8) (fp.add RNE (fp.abs x7) (fp.sqrt RNE x6))) (fp.div RNE (fp.sub RNE x7 x6) (fp.sub RNE x3 (fp.max x1 x2))))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.sub RNE x7 x4)) (fp.sub RNE (fp.sqrt RNE (fp.add RNE x8 x6)) (fp.mul RNE (fp.add RNE x4 x0) (fp.sub RNE x6 x1)))) (fp.sub RNE (fp.div RNE (fp.div RNE (fp.sub RNE x7 x9) (fp.min x5 x8)) (fp.sub RNE (fp.max x6 x8) (fp.add RNE x6 x1))) (fp.mul RNE (fp.div RNE (fp.min x0 x0) (fp.sub RNE x7 x3)) (fp.sub RNE (fp.div RNE x1 x1) (fp.neg x1))))))))(check-sat)