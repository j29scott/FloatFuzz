;  time  = {'z3': 600, 'mathsat': 21.81820774078369}
;  terms = 94
;  score = 578.1817922592163
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.abs (fp.div RNE (fp.min (fp.sqrt RNE x7) (fp.add RNE x4 x0)) (fp.div RNE (fp.add RNE x9 x3) (fp.roundToIntegral RNE x7)))) (fp.mul RNE (fp.add RNE (fp.div RNE (fp.div RNE x0 x3) (fp.sub RNE x1 x9)) (fp.max (fp.add RNE x5 x8) (fp.min x6 x0))) (fp.add RNE (fp.mul RNE (fp.min x1 x4) (fp.roundToIntegral RNE x7)) (fp.min (fp.mul RNE x1 x5) (fp.add RNE x2 (fp.add RNE x6 x4)))))) (fp.div RNE (fp.mul RNE (fp.min (fp.min (fp.max x8 x7) (fp.add RNE x1 x6)) (fp.min (fp.max x1 x4) (fp.sqrt RNE x4))) (fp.roundToIntegral RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x8 x0) (fp.add RNE x6 x3)) (fp.mul RNE (fp.add RNE x1 x9) (fp.mul RNE x6 x8))))) (fp.neg (fp.div RNE (fp.mul RNE (fp.neg x1) (fp.mul RNE x4 x6)) (fp.mul RNE (fp.div RNE x4 x3) (fp.abs x4)))))))(check-sat)