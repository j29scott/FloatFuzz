;  time  = {'mathsat': 18.386592149734497, 'z3': 572.191}
;  terms = 110
;  score = 553.8044078502655
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.sub RNE (fp.div RNE (fp.max (fp.mul RNE x2 x4) (fp.mul RNE x4 x9)) (fp.roundToIntegral RNE (fp.div RNE x5 (fp.add RNE x5 x8)))) (fp.add RNE (fp.div RNE (fp.div RNE x7 (fp.max x4 x7)) (fp.roundToIntegral RNE x0)) (fp.abs (fp.div RNE (fp.abs x1) (fp.min x5 x0))))) (fp.roundToIntegral RNE (fp.add RNE (fp.neg (fp.add RNE (fp.mul RNE x3 x3) (fp.add RNE x5 x2))) (fp.div RNE (fp.abs (fp.sub RNE x7 x7)) (fp.sqrt RNE (fp.neg x2)))))) (fp.div RNE (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.max x7 x8)) (fp.min (fp.abs x1) (fp.min x1 (fp.abs x7)))) (fp.mul RNE (fp.mul RNE (fp.div RNE x5 x9) (fp.neg x7)) (fp.add RNE (fp.div RNE x2 x4) (fp.abs x9)))) (fp.div RNE (fp.abs (fp.min (fp.min x2 x3) (fp.max x9 x1))) (fp.min (fp.sub RNE (fp.abs (fp.neg x2)) (fp.max (fp.sqrt RNE x3) (fp.min x1 x4))) (fp.max (fp.add RNE (fp.max x0 x2) (fp.mul RNE x2 x6)) (fp.roundToIntegral RNE (fp.mul RNE x5 x3))))))))(check-sat)