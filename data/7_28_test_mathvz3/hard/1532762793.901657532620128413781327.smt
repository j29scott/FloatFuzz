;  time  = {'mathsat': 119.3885760307312, 'z3': 600}
;  terms = 94
;  score = 480.6114239692688
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.add RNE (fp.sub RNE (fp.sub RNE x5 x0) (fp.min x2 x3)) (fp.sub RNE (fp.add RNE x9 x3) (fp.sub RNE x1 x4))) (fp.max (fp.sub RNE (fp.max (fp.sub RNE x1 x7) (fp.add RNE x3 x3)) (fp.sub RNE (fp.max x6 x9) (fp.max x9 x7))) (fp.roundToIntegral RNE (fp.neg (fp.roundToIntegral RNE x2))))) (fp.sub RNE (fp.sqrt RNE (fp.div RNE (fp.sqrt RNE x2) (fp.min x0 x3))) (fp.sub RNE (fp.sub RNE (fp.max x6 x2) (fp.sub RNE x8 x7)) (fp.mul RNE (fp.abs x0) (fp.mul RNE x8 x7))))) (fp.sub RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.neg x5) (fp.sub RNE x9 (fp.sqrt RNE x1))))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.sub RNE x3 (fp.sub RNE x1 x4)) (fp.max x0 x5)) (fp.neg (fp.sub RNE (fp.roundToIntegral RNE x3) (fp.roundToIntegral RNE x6)))) (fp.sqrt RNE (fp.add RNE (fp.roundToIntegral RNE x9) (fp.add RNE x5 x4)))))))(check-sat)