;  time  = {'mathsat': 18.09605622291565, 'z3': 600}
;  terms = 142
;  score = 581.9039437770844
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.add RNE (fp.div RNE (fp.div RNE (fp.add RNE x1 x4) (fp.max x3 x0)) (fp.div RNE (fp.abs x1) (fp.add RNE x4 x7))) (fp.div RNE (fp.max (fp.add RNE (fp.max x9 x7) (fp.max x6 x6)) (fp.div RNE (fp.sqrt RNE x5) (fp.roundToIntegral RNE x4))) (fp.div RNE (fp.sqrt RNE (fp.neg x3)) (fp.add RNE (fp.sqrt RNE x6) (fp.min x5 x7))))) (fp.add RNE (fp.max (fp.add RNE (fp.add RNE x3 x0) (fp.add RNE x9 (fp.add RNE x2 x7))) (fp.sqrt RNE (fp.add RNE x3 (fp.add RNE x9 x2)))) (fp.sub RNE (fp.min (fp.add RNE (fp.add RNE x3 x8) (fp.max x7 x6)) (fp.abs (fp.max x5 x8))) (fp.div RNE (fp.neg (fp.sub RNE x3 x7)) (fp.add RNE (fp.neg x2) (fp.div RNE x5 x4)))))) (fp.min (fp.mul RNE (fp.div RNE (fp.neg (fp.div RNE x3 x3)) (fp.add RNE (fp.max x8 x1) (fp.neg x5))) (fp.max (fp.add RNE (fp.div RNE x0 x2) (fp.abs x3)) (fp.div RNE (fp.add RNE x9 x0) (fp.add RNE x3 x0)))) (fp.mul RNE (fp.div RNE (fp.min (fp.min x7 x9) (fp.sub RNE x4 x7)) (fp.add RNE (fp.div RNE x7 x3) (fp.div RNE x9 (fp.add RNE x9 x0)))) (fp.add RNE (fp.sqrt RNE (fp.add RNE x5 x8)) (fp.add RNE (fp.add RNE x3 x5) (fp.add RNE (fp.mul RNE x0 x6) (fp.sqrt RNE x6))))))))(check-sat)