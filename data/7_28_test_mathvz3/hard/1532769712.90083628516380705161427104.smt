;  time  = {'mathsat': 7.1733129024505615, 'z3': 600}
;  terms = 120
;  score = 592.8266870975494
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.min (fp.neg (fp.mul RNE (fp.div RNE x3 x4) (fp.sub RNE x7 x8))) (fp.mul RNE (fp.div RNE (fp.mul RNE x2 x0) (fp.sqrt RNE x7)) (fp.add RNE (fp.mul RNE (fp.abs x2) (fp.neg x6)) (fp.sub RNE (fp.mul RNE x5 x2) (fp.sqrt RNE x4))))) (fp.mul RNE (fp.div RNE (fp.add RNE (fp.mul RNE x2 (fp.min x1 x0)) (fp.sqrt RNE x7)) (fp.div RNE (fp.sub RNE x9 x6) (fp.div RNE x3 (fp.sub RNE x6 x7)))) (fp.neg (fp.max (fp.div RNE (fp.neg x2) (fp.roundToIntegral RNE x2)) (fp.max (fp.roundToIntegral RNE x7) (fp.max x1 x6)))))) (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE (fp.min (fp.abs x8) (fp.div RNE x9 x5))) (fp.add RNE (fp.neg (fp.mul RNE x8 x1)) (fp.div RNE (fp.sqrt RNE x8) (fp.div RNE x7 (fp.abs x9))))) (fp.div RNE (fp.add RNE (fp.abs (fp.mul RNE (fp.mul RNE x8 x4) (fp.max x4 x8))) (fp.sqrt RNE (fp.div RNE (fp.div RNE x6 x0) (fp.add RNE x4 x8)))) (fp.min (fp.max (fp.sub RNE (fp.mul RNE x4 x8) (fp.neg x1)) (fp.abs (fp.mul RNE x6 x1))) (fp.neg (fp.mul RNE (fp.mul RNE x3 x5) (fp.roundToIntegral RNE x7))))))))(check-sat)