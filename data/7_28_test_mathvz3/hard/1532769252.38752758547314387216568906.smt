;  time  = {'mathsat': 7.24859094619751, 'z3': 600}
;  terms = 76
;  score = 592.7514090538025
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.add RNE (fp.div RNE (fp.div RNE (fp.mul RNE (fp.div RNE x5 (fp.mul RNE x4 x1)) (fp.mul RNE x1 x0)) (fp.mul RNE (fp.add RNE x3 (fp.add RNE x5 x1)) (fp.mul RNE (fp.div RNE x6 x9) (fp.div RNE x5 x8)))) (fp.add RNE (fp.div RNE (fp.mul RNE x8 x8) (fp.sqrt RNE x2)) (fp.min (fp.roundToIntegral RNE (fp.abs x5)) (fp.add RNE (fp.add RNE x4 x3) (fp.add RNE x0 x5))))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.mul RNE x3 x9) (fp.add RNE x5 x4)) (fp.mul RNE (fp.sqrt RNE (fp.roundToIntegral RNE x7)) (fp.roundToIntegral RNE (fp.div RNE x9 x5)))) (fp.div RNE (fp.add RNE (fp.sqrt RNE x1) (fp.mul RNE x1 x8)) (fp.sub RNE (fp.mul RNE x4 (fp.div RNE x8 x5)) (fp.sqrt RNE x4)))))))(check-sat)