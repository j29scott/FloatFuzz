;  time  = {'mathsat': 33.16232109069824, 'z3': 600}
;  terms = 106
;  score = 566.8376789093018
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE (fp.div RNE (fp.min x7 x1) (fp.div RNE x3 x1)) (fp.add RNE (fp.sub RNE x1 x6) (fp.div RNE x4 (fp.div RNE x5 x5)))) (fp.max (fp.max (fp.div RNE x2 x5) (fp.sqrt RNE (fp.sub RNE x7 x0))) (fp.sub RNE (fp.sub RNE (fp.sub RNE x5 x0) (fp.div RNE x9 x1)) (fp.mul RNE (fp.add RNE x3 x1) (fp.roundToIntegral RNE x9)))))) (fp.div RNE (fp.max (fp.add RNE (fp.max (fp.max x7 x6) (fp.div RNE x2 x3)) (fp.sub RNE (fp.div RNE x4 x7) (fp.neg (fp.div RNE x3 x6)))) (fp.max (fp.sqrt RNE (fp.max x9 x0)) (fp.add RNE (fp.sqrt RNE x0) (fp.mul RNE x6 x1)))) (fp.add RNE (fp.sub RNE (fp.sqrt RNE (fp.div RNE x1 (fp.abs x2))) (fp.add RNE (fp.div RNE x5 x9) (fp.max x0 x8))) (fp.max (fp.add RNE (fp.div RNE x2 x1) (fp.neg x8)) (fp.sub RNE (fp.sub RNE (fp.sqrt RNE x9) (fp.neg x8)) (fp.sub RNE (fp.min x1 x4) (fp.div RNE x5 x3))))))))(check-sat)