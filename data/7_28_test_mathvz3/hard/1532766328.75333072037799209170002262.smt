;  time  = {'z3': 600, 'mathsat': 67.96814393997192}
;  terms = 116
;  score = 532.0318560600281
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.mul RNE (fp.div RNE (fp.abs (fp.abs x8)) (fp.roundToIntegral RNE (fp.mul RNE x4 x6))) (fp.mul RNE (fp.div RNE (fp.add RNE (fp.mul RNE x0 x9) (fp.sqrt RNE x5)) (fp.add RNE (fp.min x9 x5) (fp.max x0 x5))) (fp.roundToIntegral RNE (fp.abs (fp.roundToIntegral RNE x2))))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.sqrt RNE x5) (fp.neg (fp.sqrt RNE x9))) (fp.max (fp.abs (fp.div RNE x2 x1)) (fp.sub RNE (fp.sub RNE x6 x1) (fp.neg x5)))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.neg x0) (fp.sqrt RNE x6)) (fp.mul RNE (fp.mul RNE x0 x5) (fp.div RNE x6 x2))) (fp.neg (fp.min (fp.mul RNE x5 x3) (fp.div RNE x6 x7)))))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x7 x8) (fp.add RNE x2 x3)) (fp.roundToIntegral RNE (fp.abs (fp.min x6 x6)))) (fp.roundToIntegral RNE (fp.div RNE (fp.min x4 x2) (fp.div RNE x9 (fp.max x2 x2))))) (fp.roundToIntegral RNE (fp.mul RNE (fp.add RNE (fp.mul RNE x6 x6) (fp.min x8 x8)) (fp.div RNE (fp.sub RNE x5 x1) (fp.mul RNE (fp.mul RNE x9 x9) (fp.mul RNE x1 x2))))))))(check-sat)