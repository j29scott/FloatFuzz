;  time  = {'z3': 199.052, 'mathsat': 9.291351556777954}
;  terms = 91
;  score = 189.76064844322204
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.max (fp.min (fp.add RNE (fp.neg x1) (fp.div RNE x4 x7)) (fp.add RNE (fp.mul RNE x3 x5) (fp.max x6 x9))) (fp.max (fp.abs (fp.abs x0)) (fp.min (fp.roundToIntegral RNE x6) (fp.sub RNE x8 x3)))) (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.div RNE x1 x4) (fp.sub RNE x8 x5)) (fp.mul RNE (fp.min x7 x8) (fp.mul RNE x1 x2))) (fp.add RNE (fp.roundToIntegral RNE (fp.sqrt RNE x6)) (fp.div RNE (fp.mul RNE x6 x5) (fp.sub RNE x7 x1))))) (fp.div RNE (fp.roundToIntegral RNE (fp.min (fp.roundToIntegral RNE (fp.max x4 x5)) (fp.sqrt RNE (fp.sqrt RNE x3)))) (fp.min (fp.div RNE (fp.mul RNE (fp.sub RNE x8 x9) (fp.neg x3)) (fp.add RNE (fp.abs x7) (fp.roundToIntegral RNE x6))) (fp.add RNE (fp.mul RNE (fp.abs x1) (fp.add RNE x5 x9)) (fp.div RNE (fp.mul RNE x8 x9) (fp.div RNE x1 x7)))))))(check-sat)