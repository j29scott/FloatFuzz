;  time  = {'z3': 463.438, 'mathsat': 3.6327731609344482}
;  terms = 91
;  score = 459.80522683906554
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.sqrt RNE (fp.add RNE (fp.roundToIntegral RNE (fp.max x5 x2)) (fp.mul RNE (fp.sub RNE x6 x7) (fp.mul RNE x7 x6)))) (fp.neg (fp.div RNE (fp.mul RNE (fp.neg x0) (fp.min (fp.min x8 x8) (fp.div RNE x7 x2))) (fp.mul RNE (fp.div RNE (fp.neg x5) (fp.abs x5)) (fp.add RNE (fp.div RNE x9 x5) (fp.neg x4)))))) (fp.sub RNE (fp.max (fp.neg (fp.abs (fp.add RNE x2 x8))) (fp.max (fp.min (fp.neg (fp.abs x9)) (fp.mul RNE (fp.max x2 x2) (fp.div RNE x8 x7))) (fp.max (fp.sub RNE (fp.div RNE x6 x3) (fp.sqrt RNE x6)) (fp.sub RNE (fp.sqrt RNE x0) (fp.neg x8))))) (fp.div RNE (fp.add RNE (fp.abs (fp.mul RNE x3 x6)) (fp.min (fp.min x6 x8) (fp.div RNE x6 x2))) (fp.neg (fp.mul RNE (fp.add RNE x5 (fp.roundToIntegral RNE x1)) (fp.abs x8)))))))(check-sat)