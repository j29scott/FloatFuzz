;  time  = {'z3': 405.827, 'mathsat': 5.094282865524292}
;  terms = 77
;  score = 400.7327171344757
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.sqrt RNE (fp.add RNE (fp.max (fp.roundToIntegral RNE x2) (fp.max x5 x0)) (fp.add RNE (fp.neg x4) (fp.max x5 x5)))) (fp.div RNE (fp.sub RNE (fp.min (fp.roundToIntegral RNE x3) (fp.neg x6)) (fp.sqrt RNE (fp.div RNE x3 x7))) (fp.div RNE (fp.div RNE (fp.abs x5) (fp.sqrt RNE x5)) (fp.mul RNE (fp.sub RNE (fp.sub RNE x2 x7) (fp.div RNE x1 x6)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x4)))))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.max (fp.mul RNE x6 x0) (fp.roundToIntegral RNE x4)) (fp.min (fp.max x6 x4) (fp.min (fp.sub RNE x3 x9) (fp.add RNE x2 x5)))) (fp.neg (fp.div RNE (fp.roundToIntegral RNE x7) (fp.min x8 x4)))) (fp.sqrt RNE (fp.neg (fp.abs (fp.mul RNE x1 x1)))))))(check-sat)