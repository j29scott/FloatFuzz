;  time  = {'z3': 203.393, 'mathsat': 21.784737586975098}
;  terms = 70
;  score = 181.6082624130249
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.min (fp.sqrt RNE x9) (fp.div RNE x9 x3)) (fp.max (fp.neg x9) (fp.mul RNE x8 x1))) (fp.min (fp.roundToIntegral RNE (fp.sqrt RNE x4)) (fp.add RNE (fp.roundToIntegral RNE x1) (fp.div RNE x0 x9)))) (fp.roundToIntegral RNE (fp.max (fp.min (fp.mul RNE (fp.roundToIntegral RNE x0) (fp.sqrt RNE x3)) (fp.max (fp.min x1 x2) (fp.sub RNE x7 x4))) (fp.div RNE (fp.mul RNE (fp.mul RNE x8 x9) (fp.mul RNE x5 x8)) (fp.abs (fp.sub RNE x0 x5)))))) (fp.abs (fp.sub RNE (fp.abs (fp.sub RNE (fp.max x9 x0) (fp.sub RNE x2 x5))) (fp.abs (fp.div RNE (fp.sqrt RNE x6) (fp.max x6 x9)))))))(check-sat)