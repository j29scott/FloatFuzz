;  time  = {'mathsat': 14.555951595306396, 'z3': 412.329}
;  terms = 71
;  score = 397.7730484046936
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.add RNE (fp.abs (fp.mul RNE x4 x8)) (fp.abs (fp.mul RNE x0 x4))) (fp.sqrt RNE (fp.div RNE (fp.mul RNE x7 x4) (fp.max x4 x0)))) (fp.mul RNE (fp.abs (fp.min (fp.add RNE x2 x2) (fp.mul RNE x7 x8))) (fp.neg (fp.mul RNE (fp.sqrt RNE x5) (fp.mul RNE x4 x0))))) (fp.mul RNE (fp.sqrt RNE (fp.max (fp.max (fp.add RNE x8 x7) (fp.sqrt RNE x4)) (fp.sub RNE (fp.abs x6) (fp.neg x7)))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.abs x9)) (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.max x3 x3))) (fp.div RNE (fp.mul RNE (fp.neg x6) (fp.roundToIntegral RNE x6)) (fp.roundToIntegral RNE (fp.div RNE x5 x3)))))))(check-sat)