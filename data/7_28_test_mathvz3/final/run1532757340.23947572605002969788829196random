;  time  = {'mathsat': 3.5742924213409424, 'z3': 302.752}
;  terms = 77
;  score = 299.17770757865907
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.sqrt RNE (fp.mul RNE (fp.mul RNE (fp.abs x0) (fp.min x2 x3)) (fp.mul RNE (fp.sqrt RNE x3) (fp.max x0 x3)))) (fp.div RNE (fp.abs (fp.neg (fp.mul RNE x9 x3))) (fp.roundToIntegral RNE (fp.max (fp.max x2 x4) (fp.mul RNE x2 x4))))) (fp.sub RNE (fp.max (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE x4 x4) (fp.div RNE x7 x0))) (fp.mul RNE (fp.add RNE (fp.roundToIntegral RNE x9) (fp.roundToIntegral RNE x1)) (fp.neg (fp.add RNE x9 x7)))) (fp.sub RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.add RNE x1 x0)) (fp.mul RNE (fp.roundToIntegral RNE x1) (fp.mul RNE x9 x8))) (fp.div RNE (fp.neg (fp.neg x7)) (fp.div RNE (fp.min x7 x9) (fp.max (fp.add RNE x0 x7) (fp.div RNE x9 x6))))))))(check-sat)