;  time  = {'z3': 556.372, 'mathsat': 4.633662700653076}
;  terms = 105
;  score = 551.7383372993469
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.sub RNE (fp.sqrt RNE (fp.mul RNE (fp.max x3 (fp.sqrt RNE x6)) (fp.neg (fp.mul RNE x9 x8)))) (fp.add RNE (fp.mul RNE (fp.max x0 (fp.div RNE x3 x4)) (fp.sqrt RNE x8)) (fp.sub RNE (fp.div RNE (fp.min x8 x3) (fp.roundToIntegral RNE x6)) (fp.sub RNE (fp.min x2 x6) (fp.roundToIntegral RNE x4))))) (fp.max (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE x5) (fp.abs x6)) (fp.max (fp.add RNE x2 x4) (fp.mul RNE (fp.abs x3) (fp.div RNE x6 x9)))) (fp.mul RNE (fp.div RNE (fp.max x5 x8) (fp.sqrt RNE x7)) (fp.mul RNE (fp.min x3 x6) (fp.min (fp.min x8 x1) (fp.sqrt RNE x6)))))) (fp.add RNE (fp.add RNE (fp.max (fp.sqrt RNE (fp.sqrt RNE x8)) (fp.add RNE (fp.max x2 x9) (fp.neg x0))) (fp.div RNE (fp.add RNE (fp.neg x9) (fp.add RNE x9 x6)) (fp.neg (fp.add RNE x9 x3)))) (fp.div RNE (fp.sqrt RNE (fp.neg (fp.neg x7))) (fp.abs (fp.div RNE (fp.max x4 x9) (fp.div RNE x5 x8)))))))(check-sat)