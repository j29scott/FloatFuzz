;  time  = {'mathsat': 2.9060440063476562, 'z3': 165.274}
;  terms = 53
;  score = 162.36795599365234
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.sqrt RNE (fp.sqrt RNE (fp.neg x0))) (fp.roundToIntegral RNE (fp.mul RNE (fp.abs x5) (fp.abs x5)))) (fp.mul RNE (fp.sqrt RNE (fp.max (fp.div RNE x0 x3) (fp.min x5 x0))) (fp.mul RNE (fp.div RNE (fp.abs x9) (fp.abs x7)) (fp.mul RNE (fp.min x8 x7) (fp.sub RNE x9 x6))))) (fp.min (fp.neg (fp.abs (fp.abs (fp.div RNE x4 x9)))) (fp.neg (fp.sub RNE (fp.sqrt RNE (fp.mul RNE x1 x5)) (fp.sub RNE (fp.neg x0) (fp.abs x1)))))))(check-sat)