;  time  = {'mathsat': 11.068291664123535, 'z3': 318.947}
;  terms = 85
;  score = 307.87870833587647
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.neg (fp.mul RNE (fp.div RNE x5 x2) (fp.neg x4))) (fp.div RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x3)) (fp.div RNE (fp.add RNE x0 x7) (fp.min (fp.min x1 x3) (fp.max x7 x9))))) (fp.sqrt RNE (fp.max (fp.roundToIntegral RNE (fp.abs x3)) (fp.div RNE (fp.sqrt RNE x2) (fp.roundToIntegral RNE x7))))) (fp.add RNE (fp.min (fp.neg (fp.neg (fp.sub RNE x5 (fp.div RNE x8 x8)))) (fp.add RNE (fp.min (fp.max x2 x7) (fp.max x3 x4)) (fp.mul RNE (fp.sqrt RNE x8) (fp.min (fp.abs x1) (fp.sub RNE x2 x3))))) (fp.min (fp.div RNE (fp.roundToIntegral RNE (fp.min x3 x1)) (fp.sqrt RNE (fp.add RNE x4 x9))) (fp.mul RNE (fp.min (fp.neg x2) (fp.add RNE x1 x6)) (fp.min (fp.sub RNE x0 x5) (fp.max x1 x9)))))))(check-sat)