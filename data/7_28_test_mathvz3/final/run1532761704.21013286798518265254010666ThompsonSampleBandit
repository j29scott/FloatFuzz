;  time  = {'mathsat': 6.1746296882629395, 'z3': 600}
;  terms = 96
;  score = 593.8253703117371
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.div RNE (fp.neg (fp.add RNE x4 x4)) (fp.sub RNE (fp.div RNE (fp.neg x4) (fp.sub RNE x2 x9)) (fp.neg (fp.sub RNE x2 x5)))) (fp.sqrt RNE (fp.sub RNE (fp.div RNE (fp.abs x0) (fp.mul RNE x4 x6)) (fp.div RNE (fp.mul RNE x3 x2) (fp.div RNE x6 x1))))) (fp.mul RNE (fp.min (fp.neg (fp.add RNE x2 x3)) (fp.neg (fp.min x0 x7))) (fp.neg (fp.div RNE (fp.div RNE x0 x1) (fp.neg (fp.sub RNE x5 x1)))))) (fp.max (fp.sub RNE (fp.neg (fp.sqrt RNE (fp.div RNE x9 x0))) (fp.mul RNE (fp.neg (fp.sub RNE x8 x1)) (fp.div RNE (fp.sub RNE x8 x1) (fp.roundToIntegral RNE x0)))) (fp.sub RNE (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x6 (fp.mul RNE x4 x5)) (fp.neg x3))) (fp.mul RNE (fp.mul RNE (fp.abs x4) (fp.div RNE x1 (fp.max x0 x1))) (fp.max (fp.neg x2) (fp.div RNE x7 x8)))))))(check-sat)