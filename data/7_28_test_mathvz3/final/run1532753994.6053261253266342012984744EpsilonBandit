;  time  = {'mathsat': 24.67888641357422, 'z3': 385.043}
;  terms = 111
;  score = 360.3641135864258
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.sub RNE (fp.max (fp.max (fp.div RNE x0 x7) (fp.max x6 x7)) (fp.abs (fp.div RNE x8 x8))) (fp.abs (fp.mul RNE (fp.abs x3) (fp.abs x9)))) (fp.min (fp.abs (fp.add RNE (fp.abs (fp.min x2 x4)) (fp.sub RNE (fp.div RNE x2 x5) (fp.sub RNE x9 x7)))) (fp.add RNE (fp.min (fp.roundToIntegral RNE (fp.neg x7)) (fp.mul RNE (fp.add RNE x8 x3) (fp.sub RNE x5 x5))) (fp.max (fp.mul RNE (fp.sqrt RNE x3) (fp.div RNE x6 x0)) (fp.max (fp.add RNE x9 x3) (fp.add RNE x8 x1)))))) (fp.div RNE (fp.min (fp.abs (fp.abs (fp.sub RNE x3 x5))) (fp.mul RNE (fp.add RNE (fp.abs x6) (fp.roundToIntegral RNE x9)) (fp.abs (fp.abs x4)))) (fp.mul RNE (fp.mul RNE (fp.min (fp.sub RNE x0 x9) (fp.div RNE x8 x2)) (fp.max (fp.abs x1) (fp.div RNE (fp.sub RNE x3 x7) (fp.sqrt RNE x9)))) (fp.max (fp.sub RNE (fp.abs x0) (fp.max x7 (fp.sqrt RNE x0))) (fp.max (fp.max x6 x5) (fp.abs (fp.min x8 x7))))))))(check-sat)