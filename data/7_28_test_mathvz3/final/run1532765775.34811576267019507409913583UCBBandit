;  time  = {'mathsat': 2.534426689147949, 'z3': 151.813}
;  terms = 70
;  score = 149.27857331085204
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.add RNE (fp.div RNE (fp.div RNE (fp.abs x4) (fp.abs x1)) (fp.max (fp.add RNE x3 x8) (fp.roundToIntegral RNE x7))) (fp.add RNE (fp.mul RNE (fp.neg x2) (fp.abs x5)) (fp.roundToIntegral RNE (fp.neg x7)))) (fp.sub RNE (fp.add RNE (fp.neg (fp.min x2 x2)) (fp.mul RNE (fp.abs x4) (fp.roundToIntegral RNE x9))) (fp.div RNE (fp.div RNE (fp.min x2 x0) (fp.add RNE x8 x9)) (fp.min (fp.min x6 x0) (fp.div RNE x3 x3))))) (fp.mul RNE (fp.abs (fp.add RNE (fp.sub RNE (fp.roundToIntegral RNE x3) (fp.abs x9)) (fp.add RNE (fp.abs x8) (fp.div RNE x2 x0)))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.abs (fp.sub RNE x5 x9)))))))(check-sat)