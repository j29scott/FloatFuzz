;  time  = {'mathsat': 8.859720468521118, 'z3': 155.746}
;  terms = 77
;  score = 146.8862795314789
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.max (fp.sub RNE (fp.abs (fp.abs (fp.abs x0))) (fp.min (fp.neg (fp.roundToIntegral RNE x7)) (fp.mul RNE (fp.mul RNE x3 x2) (fp.abs x0)))) (fp.mul RNE (fp.mul RNE (fp.max (fp.mul RNE x4 x0) (fp.div RNE x0 x8)) (fp.abs (fp.sqrt RNE x1))) (fp.min (fp.mul RNE (fp.add RNE x9 x5) (fp.mul RNE x9 x4)) (fp.sub RNE (fp.abs x1) (fp.sqrt RNE x6))))) (fp.min (fp.max (fp.abs (fp.mul RNE (fp.mul RNE x1 x1) (fp.abs x1))) (fp.mul RNE (fp.min (fp.min x7 x5) (fp.abs x1)) (fp.min (fp.sub RNE (fp.abs x9) (fp.abs x6)) (fp.min (fp.add RNE x6 x3) (fp.mul RNE x3 x8))))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.abs (fp.sub RNE x4 x2)))))))(check-sat)