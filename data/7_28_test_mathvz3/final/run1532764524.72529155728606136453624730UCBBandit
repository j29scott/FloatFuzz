;  time  = {'mathsat': 1.1470987796783447, 'z3': 45.469}
;  terms = 51
;  score = 44.32190122032166
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.max (fp.mul RNE (fp.add RNE (fp.min (fp.roundToIntegral RNE x6) (fp.sqrt RNE x8)) (fp.add RNE (fp.min x5 x0) (fp.abs x3))) (fp.roundToIntegral RNE (fp.add RNE (fp.roundToIntegral RNE x4) (fp.neg x3)))) (fp.div RNE (fp.add RNE (fp.max (fp.roundToIntegral RNE x7) (fp.min x9 x9)) (fp.sub RNE (fp.add RNE x3 x0) (fp.min x2 x3))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x1 x7) (fp.div RNE x3 x6)) (fp.add RNE (fp.add RNE x1 x7) (fp.min x4 x0)))))))(check-sat)