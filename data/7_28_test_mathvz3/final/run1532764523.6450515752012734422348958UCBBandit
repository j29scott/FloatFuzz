;  time  = {'z3': 162.382, 'mathsat': 2.652028799057007}
;  terms = 85
;  score = 159.729971200943
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.min (fp.mul RNE (fp.div RNE (fp.neg (fp.neg x8)) (fp.max (fp.min x3 x9) (fp.max x0 x2))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x9 x8) (fp.add RNE x5 x9)) (fp.max (fp.add RNE x0 x8) (fp.neg x4)))) (fp.sub RNE (fp.mul RNE (fp.sqrt RNE (fp.min x7 x7)) (fp.mul RNE (fp.div RNE x9 x4) (fp.roundToIntegral RNE x0))) (fp.div RNE (fp.roundToIntegral RNE (fp.sqrt RNE x6)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x4))))) (fp.div RNE (fp.max (fp.abs (fp.sqrt RNE (fp.abs x6))) (fp.sub RNE (fp.roundToIntegral RNE (fp.mul RNE x8 x8)) (fp.sub RNE (fp.min x3 x8) (fp.neg x8)))) (fp.div RNE (fp.sub RNE (fp.min (fp.max x8 x8) (fp.min x8 x4)) (fp.roundToIntegral RNE (fp.sub RNE x2 x0))) (fp.sqrt RNE (fp.mul RNE (fp.sub RNE x2 x1) (fp.min x7 x8)))))))(check-sat)