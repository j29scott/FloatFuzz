;  time  = {'mathsat': 5.533848524093628, 'z3': 234.981}
;  terms = 86
;  score = 229.44715147590637
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.div RNE (fp.max (fp.mul RNE (fp.add RNE x3 x5) (fp.sub RNE x0 x9)) (fp.sqrt RNE (fp.div RNE x4 x7))) (fp.max (fp.mul RNE (fp.min (fp.sqrt RNE x0) (fp.max x0 x5)) (fp.div RNE (fp.add RNE x3 x0) (fp.abs x2))) (fp.add RNE (fp.min (fp.mul RNE x4 x6) (fp.min x9 x2)) (fp.neg (fp.sqrt RNE x2))))) (fp.max (fp.neg (fp.sub RNE (fp.abs x6) (fp.sqrt RNE x6))) (fp.mul RNE (fp.neg (fp.sqrt RNE x9)) (fp.div RNE (fp.min x5 x0) (fp.sub RNE x5 x4))))) (fp.max (fp.sqrt RNE (fp.abs (fp.sub RNE (fp.abs x4) (fp.sqrt RNE x4)))) (fp.add RNE (fp.roundToIntegral RNE (fp.min (fp.add RNE x5 x0) (fp.abs x2))) (fp.add RNE (fp.sub RNE (fp.abs x6) (fp.neg (fp.sqrt RNE x5))) (fp.sub RNE (fp.abs x8) (fp.neg x2)))))))(check-sat)