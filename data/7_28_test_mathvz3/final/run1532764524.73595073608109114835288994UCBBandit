;  time  = {'z3': 262.989, 'mathsat': 9.54100227355957}
;  terms = 68
;  score = 253.4479977264404
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sub RNE (fp.max (fp.sub RNE (fp.abs (fp.roundToIntegral RNE x9)) (fp.abs (fp.roundToIntegral RNE x2))) (fp.sqrt RNE (fp.abs (fp.mul RNE x6 x0)))) (fp.sqrt RNE (fp.mul RNE (fp.div RNE (fp.sub RNE x4 x3) (fp.abs x9)) (fp.div RNE (fp.abs x0) (fp.abs x5))))) (fp.max (fp.sub RNE (fp.abs (fp.abs (fp.neg x5))) (fp.min (fp.max (fp.max x5 x0) (fp.abs x2)) (fp.div RNE (fp.neg x1) (fp.mul RNE x9 x8)))) (fp.div RNE (fp.add RNE (fp.max (fp.div RNE x3 x6) (fp.roundToIntegral RNE x7)) (fp.sub RNE (fp.roundToIntegral RNE x8) (fp.min x7 x4))) (fp.add RNE (fp.abs (fp.abs x5)) (fp.abs (fp.neg x5)))))))(check-sat)