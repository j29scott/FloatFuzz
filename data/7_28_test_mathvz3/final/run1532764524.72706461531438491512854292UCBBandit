;  time  = {'z3': 285.177, 'mathsat': 2.6635515689849854}
;  terms = 77
;  score = 282.51344843101504
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.min (fp.abs (fp.sqrt RNE (fp.abs x3))) (fp.sub RNE (fp.min (fp.div RNE x4 x5) (fp.div RNE x3 x7)) (fp.add RNE (fp.mul RNE x8 x8) (fp.div RNE x6 x1)))) (fp.abs (fp.abs (fp.sub RNE (fp.sqrt RNE x5) (fp.div RNE x8 x9))))) (fp.min (fp.div RNE (fp.sub RNE (fp.add RNE (fp.max x8 x8) (fp.max x8 x4)) (fp.sub RNE (fp.add RNE x1 x1) (fp.mul RNE x3 x7))) (fp.sub RNE (fp.mul RNE (fp.roundToIntegral RNE x0) (fp.mul RNE x2 x3)) (fp.abs (fp.abs x7)))) (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.abs x9)) (fp.mul RNE (fp.add RNE x3 x2) (fp.abs x8))) (fp.div RNE (fp.neg (fp.neg x5)) (fp.mul RNE (fp.neg x8) (fp.abs x7)))))))(check-sat)