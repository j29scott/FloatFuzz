;  time  = {'mathsat': 8.944725751876831, 'z3': 196.482}
;  terms = 66
;  score = 187.53727424812317
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.div RNE (fp.sub RNE (fp.sqrt RNE (fp.sub RNE x9 x8)) (fp.min (fp.roundToIntegral RNE x7) (fp.mul RNE x5 x3))) (fp.div RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x0)) (fp.min (fp.abs x9) (fp.min x8 x5)))) (fp.abs (fp.div RNE (fp.min (fp.max x7 x7) (fp.roundToIntegral RNE x6)) (fp.mul RNE (fp.div RNE x2 x7) (fp.div RNE x4 x2))))) (fp.mul RNE (fp.neg (fp.roundToIntegral RNE (fp.div RNE (fp.abs x3) (fp.sub RNE x3 x1)))) (fp.sub RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.min x9 x9) (fp.sub RNE x6 x3))) (fp.mul RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x7)) (fp.add RNE (fp.neg x6) (fp.abs x8)))))))(check-sat)