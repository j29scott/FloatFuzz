;  time  = {'mathsat': 8.171832799911499, 'z3': 303.487}
;  terms = 55
;  score = 295.3151672000885
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE (fp.max x1 x6) (fp.mul RNE x1 x8)))) (fp.sqrt RNE (fp.div RNE (fp.max (fp.div RNE x1 x3) (fp.neg x0)) (fp.roundToIntegral RNE (fp.sqrt RNE x5))))) (fp.div RNE (fp.sqrt RNE (fp.max (fp.add RNE (fp.abs x7) (fp.mul RNE x3 x4)) (fp.mul RNE (fp.neg x8) (fp.div RNE x1 x6)))) (fp.sqrt RNE (fp.add RNE (fp.div RNE (fp.max x9 x9) (fp.div RNE (fp.sqrt RNE x3) (fp.sub RNE x2 x8))) (fp.mul RNE (fp.div RNE x9 x4) (fp.sqrt RNE x3)))))))(check-sat)