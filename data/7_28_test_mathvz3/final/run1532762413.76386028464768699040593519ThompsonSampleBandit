;  time  = {'z3': 487.707, 'mathsat': 3.8912477493286133}
;  terms = 88
;  score = 483.8157522506714
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.max (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sub RNE x6 x9))) (fp.div RNE (fp.min (fp.div RNE x4 x1) (fp.neg x0)) (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE x1) (fp.abs x6)) (fp.div RNE (fp.div RNE x6 x7) (fp.neg x8))))) (fp.add RNE (fp.mul RNE (fp.sqrt RNE (fp.mul RNE x9 x7)) (fp.neg (fp.add RNE x1 (fp.div RNE x2 x6)))) (fp.max (fp.mul RNE (fp.add RNE (fp.neg x0) (fp.abs x5)) (fp.div RNE (fp.min x9 x1) (fp.min x5 x8))) (fp.div RNE (fp.mul RNE (fp.add RNE x0 x0) (fp.sub RNE x8 x2)) (fp.roundToIntegral RNE (fp.sub RNE x8 x8)))))) (fp.neg (fp.mul RNE (fp.sqrt RNE (fp.max (fp.mul RNE x3 x0) (fp.add RNE x8 x7))) (fp.add RNE (fp.abs (fp.max x6 x4)) (fp.add RNE (fp.mul RNE x0 (fp.roundToIntegral RNE x5)) (fp.add RNE x9 x9)))))))(check-sat)