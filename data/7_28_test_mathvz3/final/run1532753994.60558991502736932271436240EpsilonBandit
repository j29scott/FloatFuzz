;  time  = {'mathsat': 2.8436038494110107, 'z3': 104.913}
;  terms = 76
;  score = 102.06939615058899
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.add RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.neg (fp.min x0 x9))) (fp.mul RNE (fp.div RNE (fp.neg x1) (fp.add RNE x9 x5)) (fp.max (fp.abs x2) (fp.max x8 x0)))) (fp.min (fp.abs (fp.roundToIntegral RNE (fp.sqrt RNE x1))) (fp.mul RNE (fp.mul RNE (fp.max x2 x4) (fp.roundToIntegral RNE x0)) (fp.neg (fp.roundToIntegral RNE x1))))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.sqrt RNE (fp.add RNE x6 x9)) (fp.abs (fp.add RNE x9 x7))) (fp.add RNE (fp.neg (fp.div RNE x1 x8)) (fp.neg (fp.add RNE x3 x7)))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.min x1 x5) (fp.roundToIntegral RNE x6)) (fp.abs (fp.max x8 x0))) (fp.neg (fp.add RNE (fp.div RNE x9 x5) (fp.max x3 x6)))))))(check-sat)