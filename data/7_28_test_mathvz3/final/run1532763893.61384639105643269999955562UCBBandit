;  time  = {'mathsat': 131.2097053527832, 'z3': 474.93}
;  terms = 87
;  score = 343.7202946472168
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.div RNE (fp.sqrt RNE (fp.div RNE (fp.sqrt RNE x6) (fp.mul RNE x3 x8))) (fp.abs (fp.sqrt RNE (fp.abs x0)))) (fp.mul RNE (fp.min (fp.abs (fp.roundToIntegral RNE x6)) (fp.max (fp.mul RNE x1 x0) (fp.min x7 x2))) (fp.min (fp.div RNE (fp.sqrt RNE x3) (fp.min x8 x5)) (fp.sqrt RNE (fp.sub RNE x1 x4))))) (fp.min (fp.add RNE (fp.div RNE (fp.sub RNE (fp.mul RNE x8 x3) (fp.add RNE x1 x6)) (fp.max (fp.abs x0) (fp.div RNE x7 x9))) (fp.sub RNE (fp.abs (fp.min x9 x1)) (fp.neg (fp.max x8 x5)))) (fp.max (fp.add RNE (fp.mul RNE (fp.min x6 x9) (fp.div RNE x4 x5)) (fp.sub RNE (fp.max x7 x4) (fp.sub RNE x3 x6))) (fp.max (fp.roundToIntegral RNE (fp.add RNE x1 x9)) (fp.abs (fp.max x3 x2)))))))(check-sat)