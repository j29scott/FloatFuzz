;  time  = {'z3': 481.274, 'mathsat': 2.749864101409912}
;  terms = 80
;  score = 478.5241358985901
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.add RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.abs x2) (fp.neg x9))) (fp.div RNE (fp.div RNE (fp.sub RNE x1 x2) (fp.min x9 x9)) (fp.mul RNE (fp.roundToIntegral RNE x9) (fp.sqrt RNE x8)))) (fp.abs (fp.add RNE (fp.mul RNE (fp.div RNE x2 x0) (fp.min x7 x9)) (fp.abs (fp.abs x4))))) (fp.div RNE (fp.max (fp.max (fp.div RNE (fp.neg x0) (fp.sub RNE x7 x4)) (fp.mul RNE (fp.abs x3) (fp.add RNE x1 x2))) (fp.add RNE (fp.sqrt RNE (fp.mul RNE x6 x5)) (fp.add RNE (fp.add RNE x5 x7) (fp.neg x8)))) (fp.add RNE (fp.neg (fp.div RNE (fp.sqrt RNE x8) (fp.sub RNE x7 x0))) (fp.mul RNE (fp.add RNE (fp.sub RNE x1 x1) (fp.add RNE x9 x4)) (fp.neg (fp.min x2 x0)))))))(check-sat)