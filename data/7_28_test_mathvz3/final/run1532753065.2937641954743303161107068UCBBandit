;  time  = {'z3': 231.223, 'mathsat': 3.125485420227051}
;  terms = 73
;  score = 228.09751457977296
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.roundToIntegral RNE (fp.min (fp.abs (fp.max x8 x8)) (fp.sqrt RNE (fp.mul RNE x1 x3)))) (fp.min (fp.div RNE (fp.min (fp.neg x6) (fp.roundToIntegral RNE x9)) (fp.add RNE (fp.add RNE x2 x6) (fp.div RNE x7 x0))) (fp.div RNE (fp.abs (fp.roundToIntegral RNE x4)) (fp.abs (fp.add RNE x9 x4))))) (fp.mul RNE (fp.div RNE (fp.max (fp.add RNE (fp.mul RNE x5 x6) (fp.sqrt RNE x9)) (fp.abs (fp.min x7 x9))) (fp.max (fp.div RNE (fp.div RNE x5 x7) (fp.div RNE x9 x1)) (fp.abs (fp.max x8 x0)))) (fp.min (fp.abs (fp.abs (fp.max x3 x8))) (fp.abs (fp.div RNE (fp.max x1 x2) (fp.max x6 x1)))))))(check-sat)