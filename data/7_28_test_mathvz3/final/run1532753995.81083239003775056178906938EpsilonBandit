;  time  = {'mathsat': 2.665381908416748, 'z3': 189.899}
;  terms = 60
;  score = 187.23361809158325
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.abs (fp.sub RNE (fp.div RNE (fp.div RNE (fp.max x3 x6) (fp.abs x0)) (fp.abs (fp.abs x8))) (fp.abs (fp.abs (fp.sub RNE x5 x2))))) (fp.max (fp.add RNE (fp.div RNE (fp.abs (fp.mul RNE x1 x2)) (fp.roundToIntegral RNE (fp.min x2 x1))) (fp.abs (fp.roundToIntegral RNE (fp.div RNE x0 x5)))) (fp.sub RNE (fp.sub RNE (fp.add RNE (fp.div RNE x7 x4) (fp.roundToIntegral RNE x8)) (fp.max (fp.sqrt RNE x5) (fp.div RNE x3 x2))) (fp.div RNE (fp.max (fp.mul RNE x9 x6) (fp.min x7 x6)) (fp.neg (fp.add RNE x2 x9)))))))(check-sat)