;  time  = {'mathsat': 5.438238143920898, 'z3': 164.401}
;  terms = 79
;  score = 158.9627618560791
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.roundToIntegral RNE (fp.abs (fp.abs (fp.abs x8)))) (fp.min (fp.div RNE (fp.sqrt RNE (fp.sub RNE x1 x5)) (fp.abs (fp.abs (fp.add RNE x4 x0)))) (fp.max (fp.add RNE (fp.mul RNE x9 x2) (fp.abs x6)) (fp.min (fp.div RNE x0 x8) (fp.div RNE x0 x3))))) (fp.min (fp.abs (fp.mul RNE (fp.abs (fp.mul RNE x8 x0)) (fp.min (fp.min x7 x3) (fp.div RNE (fp.add RNE x2 x0) (fp.abs x2))))) (fp.min (fp.div RNE (fp.mul RNE (fp.sub RNE x1 x8) (fp.abs x9)) (fp.abs (fp.max x7 x4))) (fp.min (fp.div RNE (fp.abs x6) (fp.div RNE x4 (fp.abs x7))) (fp.min (fp.sqrt RNE x4) (fp.max (fp.add RNE x0 x8) (fp.min x8 x9))))))))(check-sat)