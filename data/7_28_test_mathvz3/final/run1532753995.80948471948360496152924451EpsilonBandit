;  time  = {'mathsat': 1.762707233428955, 'z3': 174.283}
;  terms = 79
;  score = 172.52029276657103
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.sqrt RNE (fp.mul RNE (fp.add RNE (fp.abs x2) (fp.add RNE x2 x4)) (fp.mul RNE (fp.sqrt RNE x3) (fp.add RNE x2 x2)))) (fp.abs (fp.mul RNE (fp.div RNE (fp.min (fp.roundToIntegral RNE x1) (fp.min x6 x1)) (fp.neg (fp.min x4 x1))) (fp.add RNE (fp.mul RNE (fp.min x4 x2) (fp.min x7 x1)) (fp.sub RNE (fp.neg x8) (fp.min x8 x1)))))) (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE (fp.add RNE x5 x5) (fp.sub RNE x8 x2))) (fp.add RNE (fp.add RNE (fp.add RNE x2 x9) (fp.mul RNE x0 x6)) (fp.add RNE (fp.add RNE x7 (fp.mul RNE x4 x8)) (fp.mul RNE x3 x1)))) (fp.abs (fp.add RNE (fp.abs (fp.add RNE x1 x2)) (fp.sqrt RNE (fp.roundToIntegral RNE x5)))))))(check-sat)