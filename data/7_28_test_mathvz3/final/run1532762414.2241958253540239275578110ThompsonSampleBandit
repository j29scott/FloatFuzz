;  time  = {'z3': 600, 'mathsat': 10.471420049667358}
;  terms = 101
;  score = 589.5285799503326
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.roundToIntegral RNE (fp.min (fp.sub RNE x6 (fp.neg x3)) (fp.min x2 (fp.div RNE x1 x9)))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE x4) (fp.mul RNE (fp.div RNE x9 x1) (fp.sqrt RNE x9))) (fp.div RNE (fp.div RNE (fp.sqrt RNE x9) (fp.div RNE x2 x3)) (fp.mul RNE (fp.sqrt RNE x6) (fp.max x9 x5))))) (fp.min (fp.roundToIntegral RNE (fp.neg (fp.div RNE (fp.sub RNE x6 x9) (fp.sqrt RNE x8)))) (fp.div RNE (fp.min (fp.sqrt RNE (fp.add RNE x1 x1)) (fp.max (fp.sqrt RNE x0) (fp.max x9 x2))) (fp.min (fp.div RNE (fp.max x7 x4) (fp.mul RNE x4 x1)) (fp.min (fp.roundToIntegral RNE x9) (fp.div RNE x0 x9)))))) (fp.roundToIntegral RNE (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.sub RNE x4 x7) (fp.mul RNE x7 x2)) (fp.sqrt RNE (fp.div RNE (fp.div RNE x4 x1) (fp.min x8 x3)))) (fp.sub RNE (fp.max (fp.sub RNE x3 x1) (fp.min x6 x7)) (fp.abs (fp.sqrt RNE x3)))))))(check-sat)