;  time  = {'z3': 315.794, 'mathsat': 6.541491985321045}
;  terms = 73
;  score = 309.25250801467894
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.abs (fp.add RNE (fp.neg (fp.roundToIntegral RNE (fp.sub RNE x8 x7))) (fp.div RNE (fp.neg (fp.max x3 x6)) (fp.neg (fp.max x5 x0))))) (fp.sub RNE (fp.div RNE (fp.min (fp.div RNE (fp.roundToIntegral RNE x5) (fp.min x9 x1)) (fp.sub RNE (fp.div RNE (fp.min x7 x6) (fp.mul RNE x9 x3)) (fp.max (fp.mul RNE x3 x6) (fp.div RNE x7 x0)))) (fp.abs (fp.mul RNE (fp.min x7 x6) (fp.sub RNE x3 x1)))) (fp.sub RNE (fp.min (fp.sub RNE (fp.min x4 x2) (fp.min x5 x2)) (fp.neg (fp.div RNE x0 x3))) (fp.min (fp.neg (fp.abs x6)) (fp.div RNE (fp.div RNE x3 x8) (fp.add RNE x0 x4)))))))(check-sat)