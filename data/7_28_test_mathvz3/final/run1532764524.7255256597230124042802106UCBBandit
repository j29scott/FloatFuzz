;  time  = {'mathsat': 3.1222007274627686, 'z3': 110.127}
;  terms = 86
;  score = 107.00479927253723
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.sub RNE (fp.mul RNE (fp.max (fp.div RNE x3 x7) (fp.roundToIntegral RNE x6)) (fp.roundToIntegral RNE (fp.neg x3))) (fp.add RNE (fp.sub RNE (fp.neg x3) (fp.mul RNE x7 x4)) (fp.div RNE (fp.sub RNE x7 x6) (fp.div RNE x4 x9)))) (fp.add RNE (fp.neg (fp.roundToIntegral RNE (fp.min x7 x4))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE x7 x5))))) (fp.div RNE (fp.max (fp.max (fp.abs (fp.sub RNE x1 x7)) (fp.min (fp.max x9 x4) (fp.min x0 x2))) (fp.add RNE (fp.mul RNE (fp.abs x1) (fp.neg x5)) (fp.sqrt RNE (fp.max x1 x5)))) (fp.add RNE (fp.min (fp.mul RNE (fp.mul RNE x5 x7) (fp.neg x8)) (fp.sqrt RNE (fp.abs x0))) (fp.mul RNE (fp.add RNE (fp.sub RNE x3 x5) (fp.neg x4)) (fp.min (fp.abs x8) (fp.div RNE x9 x5)))))))(check-sat)