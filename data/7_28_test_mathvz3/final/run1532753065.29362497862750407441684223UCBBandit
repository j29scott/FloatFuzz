;  time  = {'mathsat': 1.918262004852295, 'z3': 93.366}
;  terms = 57
;  score = 91.4477379951477
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.add RNE (fp.sqrt RNE (fp.add RNE (fp.neg x9) (fp.add RNE x4 x7))) (fp.div RNE (fp.add RNE (fp.div RNE x0 x4) (fp.sqrt RNE x8)) (fp.mul RNE (fp.abs x5) (fp.mul RNE x5 x3)))) (fp.abs (fp.min (fp.div RNE (fp.add RNE x5 x5) (fp.sqrt RNE x1)) (fp.neg (fp.roundToIntegral RNE x4))))) (fp.min (fp.min (fp.min (fp.neg (fp.add RNE x0 x9)) (fp.max (fp.abs x2) (fp.abs x6))) (fp.sqrt RNE (fp.max (fp.roundToIntegral RNE x3) (fp.roundToIntegral RNE x1)))) (fp.abs (fp.abs (fp.abs (fp.abs x0)))))))(check-sat)