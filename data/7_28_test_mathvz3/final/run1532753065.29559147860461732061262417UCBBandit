;  time  = {'z3': 243.118, 'mathsat': 2.2394490242004395}
;  terms = 77
;  score = 240.87855097579956
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.sub RNE (fp.neg (fp.abs (fp.min x7 x7))) (fp.sub RNE (fp.max (fp.div RNE x4 x1) (fp.max x4 x5)) (fp.add RNE (fp.sqrt RNE x3) (fp.mul RNE x8 x5)))) (fp.mul RNE (fp.mul RNE (fp.min (fp.min x5 x9) (fp.abs x0)) (fp.neg (fp.add RNE x5 x4))) (fp.abs (fp.mul RNE (fp.sub RNE x4 x7) (fp.abs x0))))) (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.add RNE (fp.roundToIntegral RNE x2) (fp.roundToIntegral RNE x9)) (fp.div RNE (fp.add RNE x2 x6) (fp.min x2 x5))) (fp.abs (fp.sqrt RNE (fp.mul RNE x4 x7)))) (fp.div RNE (fp.add RNE (fp.neg (fp.abs x9)) (fp.abs (fp.max x3 x7))) (fp.min (fp.abs (fp.abs x1)) (fp.abs (fp.abs x1)))))))(check-sat)