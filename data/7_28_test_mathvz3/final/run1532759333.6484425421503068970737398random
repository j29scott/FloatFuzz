;  time  = {'z3': 322.978, 'mathsat': 4.2683329582214355}
;  terms = 76
;  score = 318.7096670417786
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.min (fp.sub RNE (fp.min (fp.div RNE (fp.div RNE x3 x8) (fp.min x0 x4)) (fp.max (fp.sub RNE x4 x9) (fp.div RNE x0 x4))) (fp.sub RNE (fp.min (fp.sqrt RNE x7) (fp.div RNE x4 x5)) (fp.roundToIntegral RNE (fp.sqrt RNE x6)))) (fp.sub RNE (fp.max (fp.mul RNE (fp.abs x4) (fp.mul RNE x3 x7)) (fp.max (fp.sub RNE x0 x5) (fp.mul RNE x7 x8))) (fp.max (fp.mul RNE (fp.min x7 x9) (fp.div RNE x7 x2)) (fp.min (fp.sqrt RNE x6) (fp.sub RNE x0 x0))))) (fp.abs (fp.sub RNE (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE x9) (fp.add RNE x3 x4)) (fp.div RNE (fp.sqrt RNE x7) (fp.mul RNE x0 x1))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.sqrt RNE x5)))))))(check-sat)