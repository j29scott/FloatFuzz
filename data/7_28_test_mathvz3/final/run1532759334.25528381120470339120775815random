;  time  = {'mathsat': 4.173184633255005, 'z3': 338.326}
;  terms = 106
;  score = 334.152815366745
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.max (fp.max (fp.add RNE (fp.roundToIntegral RNE x9) (fp.mul RNE x7 x0)) (fp.div RNE (fp.max (fp.abs x4) (fp.sub RNE x6 x7)) (fp.min (fp.abs x0) (fp.div RNE x5 x6)))) (fp.add RNE (fp.min (fp.add RNE (fp.roundToIntegral RNE x4) (fp.min x7 x1)) (fp.sqrt RNE (fp.neg x0))) (fp.max (fp.add RNE (fp.div RNE x2 x3) (fp.max x2 x8)) (fp.add RNE (fp.add RNE x3 x6) (fp.roundToIntegral RNE x6))))) (fp.div RNE (fp.max (fp.mul RNE (fp.sqrt RNE (fp.mul RNE x0 x4)) (fp.neg (fp.neg x6))) (fp.mul RNE (fp.mul RNE (fp.max x1 x5) (fp.max x9 x3)) (fp.min (fp.neg x2) (fp.sqrt RNE x1)))) (fp.div RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.neg x1) (fp.div RNE x9 x2))) (fp.sub RNE (fp.add RNE (fp.add RNE x1 x9) (fp.abs x6)) (fp.min (fp.div RNE x6 x0) (fp.neg x2)))))) (fp.abs (fp.roundToIntegral RNE (fp.add RNE (fp.max (fp.sub RNE x3 x0) (fp.div RNE x6 x1)) (fp.roundToIntegral RNE (fp.div RNE x9 x5)))))))(check-sat)