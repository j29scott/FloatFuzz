;  time  = {'z3': 349.688, 'mathsat': 7.818392515182495}
;  terms = 73
;  score = 341.8696074848175
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sqrt RNE (fp.sub RNE (fp.sub RNE (fp.add RNE (fp.mul RNE x9 x6) (fp.sqrt RNE x3)) (fp.mul RNE (fp.abs (fp.min x0 x2)) (fp.div RNE (fp.min x3 x1) (fp.neg x9)))) (fp.div RNE (fp.min (fp.mul RNE x3 x7) (fp.min x7 x3)) (fp.div RNE (fp.sub RNE x3 x5) (fp.mul RNE x9 (fp.add RNE x7 x4)))))) (fp.add RNE (fp.neg (fp.max (fp.sub RNE (fp.sqrt RNE x2) (fp.sqrt RNE (fp.add RNE x1 x5))) (fp.abs (fp.abs x0)))) (fp.min (fp.sub RNE (fp.div RNE (fp.sqrt RNE x6) (fp.min x3 x6)) (fp.roundToIntegral RNE (fp.min x1 x4))) (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE x7 x0)) (fp.mul RNE (fp.sqrt RNE x8) (fp.sqrt RNE x0)))))))(check-sat)