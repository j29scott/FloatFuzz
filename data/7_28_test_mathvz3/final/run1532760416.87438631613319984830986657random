;  time  = {'z3': 376.622, 'mathsat': 4.290138006210327}
;  terms = 64
;  score = 372.3318619937897
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.abs (fp.mul RNE (fp.add RNE (fp.mul RNE (fp.add RNE x0 x4) (fp.add RNE x2 x9)) (fp.min (fp.mul RNE (fp.sqrt RNE x7) (fp.div RNE x4 x8)) (fp.roundToIntegral RNE (fp.div RNE x0 x2)))) (fp.max (fp.min (fp.roundToIntegral RNE x8) (fp.div RNE x2 x7)) (fp.abs (fp.div RNE x7 (fp.abs x1)))))) (fp.roundToIntegral RNE (fp.add RNE (fp.sub RNE (fp.div RNE (fp.sqrt RNE x5) (fp.roundToIntegral RNE x7)) (fp.neg (fp.abs x2))) (fp.div RNE (fp.mul RNE (fp.sqrt RNE (fp.sub RNE x1 x3)) (fp.max (fp.sqrt RNE x9) (fp.abs x9))) (fp.div RNE (fp.abs (fp.neg x5)) (fp.roundToIntegral RNE (fp.div RNE x1 x4))))))))(check-sat)