;  time  = {'z3': 292.812, 'mathsat': 21.70897650718689}
;  terms = 67
;  score = 271.1030234928131
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.min (fp.abs (fp.max (fp.sqrt RNE (fp.abs x7)) (fp.mul RNE (fp.sub RNE x6 x5) (fp.mul RNE x0 x8)))) (fp.neg (fp.roundToIntegral RNE (fp.div RNE (fp.roundToIntegral RNE x4) (fp.max x1 x6))))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE x9 x3) (fp.neg x8)) (fp.abs (fp.roundToIntegral RNE x6))) (fp.add RNE (fp.abs (fp.mul RNE x4 x3)) (fp.max (fp.add RNE x6 x7) (fp.abs x0)))) (fp.sub RNE (fp.min (fp.mul RNE (fp.sub RNE x7 x2) (fp.abs x6)) (fp.neg (fp.sqrt RNE x4))) (fp.div RNE (fp.div RNE (fp.mul RNE x3 x8) (fp.sub RNE x0 x9)) (fp.neg (fp.sqrt RNE x6)))))))(check-sat)