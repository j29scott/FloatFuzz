;  time  = {'z3': 513.389, 'mathsat': 11.285611629486084}
;  terms = 110
;  score = 502.1033883705139
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sqrt RNE (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.max x2 x0) (fp.div RNE x7 (fp.neg x6))) (fp.sub RNE (fp.max x5 x1) (fp.sub RNE x0 x2))) (fp.max (fp.roundToIntegral RNE (fp.min x0 x9)) (fp.max (fp.mul RNE x1 x0) (fp.sub RNE (fp.mul RNE x0 x8) (fp.div RNE x2 x7)))))) (fp.max (fp.mul RNE (fp.add RNE (fp.neg (fp.roundToIntegral RNE x9)) (fp.mul RNE (fp.mul RNE x2 x3) (fp.div RNE (fp.max x6 x8) (fp.div RNE x3 x6)))) (fp.div RNE (fp.sub RNE (fp.mul RNE x3 x9) (fp.roundToIntegral RNE x4)) (fp.sub RNE (fp.max x7 (fp.mul RNE x5 x6)) (fp.abs x1)))) (fp.mul RNE (fp.add RNE (fp.max (fp.sub RNE (fp.max x5 x1) (fp.div RNE x5 x2)) (fp.sub RNE (fp.div RNE x2 x3) (fp.sqrt RNE x5))) (fp.roundToIntegral RNE (fp.mul RNE (fp.div RNE x4 x6) (fp.mul RNE x9 x5)))) (fp.max (fp.mul RNE (fp.neg (fp.mul RNE x3 x6)) (fp.mul RNE (fp.mul RNE x6 x3) (fp.sub RNE x7 x4))) (fp.neg (fp.div RNE (fp.neg x6) (fp.sqrt RNE x7))))))))(check-sat)