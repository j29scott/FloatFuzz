;  time  = {'mathsat': 7.966210842132568, 'z3': 294.572}
;  terms = 83
;  score = 286.60578915786743
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.add RNE (fp.min (fp.min x1 x8) (fp.neg x9)) (fp.add RNE (fp.abs x8) (fp.min x3 x5))) (fp.div RNE (fp.max (fp.roundToIntegral RNE x2) (fp.min x9 x3)) (fp.mul RNE (fp.min x5 x8) (fp.sqrt RNE x3)))) (fp.min (fp.max (fp.sub RNE (fp.sqrt RNE x5) (fp.abs x4)) (fp.min (fp.div RNE x1 x7) (fp.sub RNE x8 x4))) (fp.sqrt RNE (fp.div RNE (fp.mul RNE x1 x2) (fp.abs x8))))) (fp.add RNE (fp.min (fp.roundToIntegral RNE (fp.add RNE (fp.abs x9) (fp.abs x3))) (fp.abs (fp.mul RNE (fp.mul RNE x7 x0) (fp.div RNE x0 x7)))) (fp.div RNE (fp.roundToIntegral RNE (fp.abs (fp.abs x6))) (fp.add RNE (fp.max (fp.div RNE x3 x6) (fp.add RNE x1 x8)) (fp.abs (fp.mul RNE x5 x7)))))))(check-sat)