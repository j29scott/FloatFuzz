;  time  = {'z3': 400.199, 'mathsat': 20.2562313079834}
;  terms = 79
;  score = 379.9427686920166
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sub RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.min (fp.min x7 x3) (fp.add RNE x9 x0)))) (fp.mul RNE (fp.min (fp.sqrt RNE (fp.add RNE (fp.roundToIntegral RNE x4) (fp.sub RNE x9 x5))) (fp.mul RNE (fp.min (fp.neg x0) (fp.add RNE x1 x8)) (fp.sub RNE (fp.max x2 x8) (fp.add RNE x8 x5)))) (fp.neg (fp.neg (fp.div RNE (fp.sqrt RNE x2) (fp.sub RNE x2 x6)))))) (fp.max (fp.abs (fp.abs (fp.add RNE (fp.roundToIntegral RNE x3) (fp.div RNE (fp.mul RNE x6 x8) (fp.div RNE x2 x4))))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.neg (fp.neg x3))) (fp.sub RNE (fp.min (fp.sub RNE x4 x6) (fp.roundToIntegral RNE x7)) (fp.abs (fp.abs x8)))) (fp.abs (fp.roundToIntegral RNE (fp.sub RNE (fp.roundToIntegral RNE x0) (fp.div RNE x8 x4))))))))(check-sat)