;  time  = {'mathsat': 4.870481967926025, 'z3': 600}
;  terms = 92
;  score = 595.129518032074
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE (fp.max (fp.add RNE x0 x2) (fp.abs (fp.max x9 x8))) (fp.div RNE (fp.add RNE x3 x6) (fp.max (fp.abs x2) (fp.abs x9)))))) (fp.div RNE (fp.neg (fp.mul RNE (fp.add RNE (fp.div RNE x3 (fp.neg x0)) (fp.max x7 (fp.mul RNE x9 x6))) (fp.max (fp.max x0 (fp.add RNE x8 x2)) (fp.div RNE x5 x7)))) (fp.div RNE (fp.max (fp.add RNE (fp.sub RNE (fp.div RNE x4 x9) (fp.abs x1)) (fp.add RNE (fp.div RNE x0 x8) (fp.max x7 x7))) (fp.max (fp.add RNE (fp.max x5 x3) (fp.abs x2)) (fp.abs (fp.sqrt RNE x0)))) (fp.div RNE (fp.mul RNE (fp.max (fp.max x2 x7) (fp.max x2 x9)) (fp.div RNE (fp.mul RNE x8 x4) (fp.abs x4))) (fp.abs (fp.max (fp.max x7 x8) (fp.add RNE x1 x5))))))))(check-sat)