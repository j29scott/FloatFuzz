;  time  = {'mathsat': 13.285152196884155, 'z3': 321.23}
;  terms = 79
;  score = 307.94484780311586
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.neg (fp.neg (fp.add RNE (fp.mul RNE (fp.max x4 x2) (fp.div RNE x3 x0)) (fp.max (fp.abs x0) (fp.neg x6))))) (fp.max (fp.div RNE (fp.add RNE (fp.sqrt RNE (fp.div RNE x5 x0)) (fp.mul RNE (fp.min x6 x8) (fp.div RNE x3 x0))) (fp.abs (fp.max (fp.min x1 x7) (fp.div RNE x4 x1)))) (fp.max (fp.div RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.abs x0) (fp.roundToIntegral RNE x3))) (fp.roundToIntegral RNE (fp.max (fp.neg x3) (fp.min x0 x5)))) (fp.sub RNE (fp.max (fp.sqrt RNE (fp.sqrt RNE x8)) (fp.max (fp.sub RNE x0 x3) (fp.mul RNE x9 x0))) (fp.add RNE (fp.sub RNE (fp.add RNE x6 x8) (fp.sub RNE x1 x5)) (fp.add RNE (fp.div RNE x1 x5) (fp.sqrt RNE x6))))))))(check-sat)