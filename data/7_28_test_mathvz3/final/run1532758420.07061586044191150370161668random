;  time  = {'z3': 455.056, 'mathsat': 9.08916187286377}
;  terms = 74
;  score = 445.9668381271362
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.neg (fp.div RNE (fp.add RNE (fp.abs x4) (fp.div RNE x0 x2)) (fp.div RNE (fp.roundToIntegral RNE x2) (fp.mul RNE x7 x9)))) (fp.div RNE (fp.min (fp.mul RNE (fp.div RNE x7 x6) (fp.sub RNE (fp.add RNE x7 x0) (fp.add RNE x3 x9))) (fp.sqrt RNE (fp.sqrt RNE x1))) (fp.abs (fp.mul RNE (fp.abs x7) (fp.abs x4))))) (fp.add RNE (fp.min (fp.sqrt RNE (fp.add RNE (fp.div RNE x5 x1) (fp.max x0 x0))) (fp.roundToIntegral RNE (fp.abs (fp.sqrt RNE x2)))) (fp.add RNE (fp.min (fp.mul RNE (fp.max x7 x8) (fp.abs x7)) (fp.mul RNE (fp.div RNE x2 x1) (fp.min x3 x2))) (fp.max (fp.roundToIntegral RNE (fp.neg x6)) (fp.sqrt RNE (fp.sqrt RNE x6)))))))(check-sat)