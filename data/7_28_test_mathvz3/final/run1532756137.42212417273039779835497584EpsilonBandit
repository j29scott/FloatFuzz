;  time  = {'z3': 600, 'mathsat': 42.26596975326538}
;  terms = 76
;  score = 557.7340302467346
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.neg (fp.abs (fp.abs (fp.abs (fp.div RNE x6 x5))))) (fp.mul RNE (fp.add RNE (fp.abs (fp.mul RNE (fp.neg x9) (fp.max (fp.div RNE x3 x5) (fp.add RNE x1 x4)))) (fp.mul RNE (fp.neg (fp.neg x2)) (fp.roundToIntegral RNE (fp.abs (fp.div RNE x9 x6))))) (fp.min (fp.add RNE (fp.mul RNE (fp.div RNE (fp.div RNE x7 x3) (fp.min x0 x9)) (fp.div RNE (fp.add RNE x5 x4) (fp.min x2 x6))) (fp.max (fp.min (fp.roundToIntegral RNE x3) (fp.sqrt RNE x0)) (fp.mul RNE (fp.abs x2) (fp.mul RNE x2 x9)))) (fp.max (fp.min (fp.sqrt RNE (fp.max x9 x5)) (fp.neg (fp.neg x8))) (fp.neg (fp.sub RNE (fp.mul RNE x4 x7) (fp.add RNE x1 x8))))))))(check-sat)