;  time  = {'mathsat': 2.304737091064453, 'z3': 329.344}
;  terms = 78
;  score = 327.03926290893554
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.add RNE (fp.min (fp.div RNE (fp.neg x8) (fp.sub RNE (fp.sub RNE x1 x5) (fp.mul RNE x4 x9))) (fp.sub RNE (fp.mul RNE x8 x6) (fp.min (fp.abs x0) (fp.abs x9)))) (fp.max (fp.mul RNE (fp.neg x7) (fp.div RNE (fp.neg x4) (fp.mul RNE x5 x9))) (fp.max (fp.min x1 x2) (fp.div RNE x0 x5)))) (fp.min (fp.mul RNE (fp.sqrt RNE (fp.abs x9)) (fp.roundToIntegral RNE (fp.max x3 x0))) (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE x3) (fp.mul RNE x5 x7)) (fp.add RNE (fp.add RNE (fp.min x2 x1) (fp.abs x5)) (fp.abs (fp.min x4 x8)))))) (fp.abs (fp.roundToIntegral RNE (fp.sqrt RNE (fp.add RNE (fp.sub RNE x2 x3) (fp.roundToIntegral RNE (fp.max x6 x4))))))))(check-sat)