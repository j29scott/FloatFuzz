;  time  = {'z3': 480.493, 'mathsat': 3.6305692195892334}
;  terms = 64
;  score = 476.86243078041076
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isPositive (fp.add RNE (fp.sqrt RNE (fp.div RNE (fp.mul RNE (fp.add RNE x8 x8) (fp.sqrt RNE x7)) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x2 x0)) (fp.min (fp.roundToIntegral RNE x9) (fp.roundToIntegral RNE x8))))) (fp.sub RNE (fp.add RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.max x5 x0))) (fp.add RNE (fp.mul RNE (fp.sub RNE x3 x7) (fp.div RNE x7 x4)) (fp.add RNE (fp.add RNE x4 x8) (fp.sub RNE x7 x5)))) (fp.sub RNE (fp.div RNE (fp.mul RNE (fp.div RNE x8 x6) (fp.neg x7)) (fp.sub RNE (fp.roundToIntegral RNE x8) (fp.mul RNE x1 x2))) (fp.sub RNE (fp.abs (fp.sqrt RNE x7)) (fp.abs (fp.div RNE x9 x0))))))))(check-sat)