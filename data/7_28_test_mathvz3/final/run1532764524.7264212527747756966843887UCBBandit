;  time  = {'z3': 178.247, 'mathsat': 6.988290786743164}
;  terms = 77
;  score = 171.25870921325685
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.mul RNE (fp.roundToIntegral RNE (fp.neg (fp.abs (fp.max x3 x4)))) (fp.sub RNE (fp.sub RNE (fp.sqrt RNE (fp.mul RNE x8 x7)) (fp.abs (fp.mul RNE x1 x3))) (fp.max (fp.div RNE (fp.div RNE x7 x6) (fp.mul RNE x0 x8)) (fp.mul RNE (fp.abs x7) (fp.abs x7))))) (fp.max (fp.max (fp.div RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x3)) (fp.max (fp.add RNE x5 x2) (fp.div RNE x8 x8))) (fp.max (fp.sub RNE (fp.abs x8) (fp.sub RNE x8 x1)) (fp.add RNE (fp.abs x7) (fp.roundToIntegral RNE x7)))) (fp.min (fp.min (fp.min (fp.abs x8) (fp.abs x4)) (fp.sqrt RNE (fp.abs x5))) (fp.max (fp.mul RNE (fp.abs x3) (fp.min x4 x4)) (fp.abs (fp.div RNE x2 x4)))))))(check-sat)