;  time  = {'z3': 57.101, 'mathsat': 1.6332404613494873}
;  terms = 59
;  score = 55.46775953865051
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.abs (fp.neg (fp.roundToIntegral RNE (fp.min (fp.sqrt RNE x8) (fp.abs x3))))) (fp.max (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.abs x9) (fp.sub RNE x2 x7)) (fp.sub RNE (fp.min x4 x3) (fp.max x2 x9))) (fp.sub RNE (fp.max (fp.sub RNE x8 x5) (fp.min x2 x9)) (fp.div RNE (fp.neg x7) (fp.min x0 x0)))) (fp.max (fp.roundToIntegral RNE (fp.sqrt RNE (fp.add RNE x0 x7))) (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE x1) (fp.sub RNE x1 x6)) (fp.add RNE (fp.max x4 x1) (fp.mul RNE x1 x4)))))))(check-sat)