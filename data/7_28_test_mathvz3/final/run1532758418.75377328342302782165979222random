;  time  = {'mathsat': 3.2156028747558594, 'z3': 185.982}
;  terms = 84
;  score = 182.76639712524414
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.sub RNE (fp.neg (fp.mul RNE (fp.div RNE x6 x3) (fp.neg x4))) (fp.min (fp.sub RNE (fp.abs x8) (fp.sub RNE (fp.sub RNE x3 x0) (fp.sub RNE x1 x2))) (fp.mul RNE (fp.neg x2) (fp.add RNE x7 x1)))) (fp.roundToIntegral RNE (fp.add RNE (fp.mul RNE (fp.sqrt RNE (fp.abs x5)) (fp.div RNE (fp.neg x1) (fp.sub RNE x3 x1))) (fp.add RNE (fp.add RNE (fp.sqrt RNE x2) (fp.abs x6)) (fp.div RNE (fp.abs x7) (fp.mul RNE x4 x8)))))) (fp.mul RNE (fp.mul RNE (fp.neg (fp.abs (fp.mul RNE x8 x4))) (fp.add RNE (fp.add RNE (fp.abs x6) (fp.abs x5)) (fp.neg (fp.max x4 x6)))) (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE (fp.min x1 x8) (fp.div RNE x7 x4)) (fp.div RNE (fp.min x1 x8) (fp.mul RNE x6 x2)))))))(check-sat)