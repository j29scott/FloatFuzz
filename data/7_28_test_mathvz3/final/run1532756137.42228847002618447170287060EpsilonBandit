;  time  = {'mathsat': 7.7851173877716064, 'z3': 180.164}
;  terms = 81
;  score = 172.37888261222838
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.max x4 x9) (fp.mul RNE x0 x1)) (fp.add RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x6))) (fp.min (fp.mul RNE (fp.neg x2) (fp.mul RNE x2 x1)) (fp.div RNE (fp.abs x7) (fp.sqrt RNE x7)))) (fp.mul RNE (fp.add RNE (fp.min (fp.sub RNE x3 x2) (fp.min x4 x1)) (fp.div RNE (fp.sub RNE x3 x5) (fp.max x1 x1))) (fp.neg (fp.roundToIntegral RNE (fp.max x3 x4))))) (fp.add RNE (fp.div RNE (fp.min (fp.sqrt RNE (fp.sqrt RNE x7)) (fp.abs (fp.neg x1))) (fp.roundToIntegral RNE (fp.abs (fp.sqrt RNE x8)))) (fp.add RNE (fp.neg (fp.div RNE (fp.max x5 x1) (fp.mul RNE x5 x3))) (fp.sub RNE (fp.roundToIntegral RNE (fp.mul RNE x3 x2)) (fp.sub RNE (fp.roundToIntegral RNE x0) (fp.neg x2)))))))(check-sat)