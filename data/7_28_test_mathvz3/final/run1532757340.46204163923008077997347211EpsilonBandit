;  time  = {'mathsat': 49.64666175842285, 'z3': 521.409}
;  terms = 85
;  score = 471.76233824157714
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.sub RNE (fp.min (fp.neg (fp.min x3 x3)) (fp.add RNE (fp.sub RNE x9 x4) (fp.div RNE x3 x1))) (fp.max (fp.add RNE (fp.div RNE x2 x1) (fp.mul RNE x4 x7)) (fp.div RNE (fp.sub RNE x7 x5) (fp.div RNE x0 x7)))) (fp.min (fp.max (fp.abs (fp.min x5 x7)) (fp.max (fp.add RNE x5 x2) (fp.abs x3))) (fp.min (fp.abs (fp.div RNE x3 x6)) (fp.sqrt RNE (fp.add RNE x4 x1))))) (fp.div RNE (fp.neg (fp.mul RNE (fp.sqrt RNE (fp.sqrt RNE x0)) (fp.min (fp.neg x6) (fp.mul RNE x5 x0)))) (fp.add RNE (fp.sub RNE (fp.min (fp.sqrt RNE x7) (fp.add RNE x6 x7)) (fp.roundToIntegral RNE (fp.neg x9))) (fp.sub RNE (fp.sqrt RNE (fp.min x3 x8)) (fp.div RNE (fp.roundToIntegral RNE x3) (fp.sub RNE x1 x2)))))))(check-sat)