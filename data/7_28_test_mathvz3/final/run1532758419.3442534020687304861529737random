;  time  = {'z3': 350.204, 'mathsat': 3.524167060852051}
;  terms = 68
;  score = 346.67983293914796
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.sqrt RNE (fp.div RNE (fp.max (fp.abs x1) (fp.div RNE (fp.neg x9) (fp.div RNE x3 x2))) (fp.mul RNE (fp.max x2 x1) (fp.add RNE x2 x7)))) (fp.div RNE (fp.sub RNE (fp.sub RNE (fp.max x2 x7) (fp.abs x4)) (fp.add RNE (fp.sub RNE x4 x0) (fp.mul RNE x1 x2))) (fp.roundToIntegral RNE (fp.add RNE (fp.min x9 x2) (fp.max (fp.div RNE x7 x9) (fp.roundToIntegral RNE x9)))))) (fp.add RNE (fp.abs (fp.div RNE (fp.add RNE (fp.sqrt RNE x1) (fp.mul RNE x3 x6)) (fp.abs (fp.div RNE x1 x0)))) (fp.roundToIntegral RNE (fp.sub RNE (fp.sqrt RNE (fp.mul RNE x8 x2)) (fp.roundToIntegral RNE (fp.neg x0)))))))(check-sat)