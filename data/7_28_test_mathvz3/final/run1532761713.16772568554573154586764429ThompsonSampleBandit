;  time  = {'mathsat': 46.028316259384155, 'z3': 600}
;  terms = 119
;  score = 553.9716837406158
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.min (fp.roundToIntegral RNE (fp.mul RNE (fp.sqrt RNE x6) (fp.min (fp.sqrt RNE x8) (fp.max x5 x4)))) (fp.abs (fp.roundToIntegral RNE (fp.max x3 x7)))) (fp.add RNE (fp.add RNE (fp.add RNE (fp.sqrt RNE (fp.div RNE x4 x8)) (fp.add RNE (fp.max x2 x4) (fp.add RNE x3 x5))) (fp.sqrt RNE (fp.abs (fp.div RNE x1 x9)))) (fp.max (fp.div RNE (fp.min (fp.div RNE x0 x3) (fp.div RNE x4 x2)) (fp.div RNE (fp.div RNE x4 x9) (fp.div RNE x0 x5))) (fp.add RNE (fp.add RNE (fp.max x7 x8) (fp.sub RNE x9 x0)) (fp.max (fp.max x9 x2) (fp.neg x4)))))) (fp.min (fp.roundToIntegral RNE (fp.min (fp.mul RNE (fp.min x4 (fp.sub RNE x9 x8)) (fp.roundToIntegral RNE (fp.min x2 x1))) (fp.abs (fp.min x0 (fp.add RNE x3 x9))))) (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.neg x0) (fp.max x2 (fp.max x6 x9))) (fp.max (fp.max x7 (fp.max x3 x2)) (fp.add RNE x3 x5))) (fp.sub RNE (fp.div RNE (fp.add RNE x8 x7) (fp.min x1 (fp.max x7 x4))) (fp.neg (fp.mul RNE x5 x2)))))))(check-sat)