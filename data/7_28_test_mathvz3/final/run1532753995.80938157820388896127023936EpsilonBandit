;  time  = {'mathsat': 18.822533130645752, 'z3': 178.91}
;  terms = 71
;  score = 160.08746686935424
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.sub RNE (fp.abs (fp.add RNE x8 x1)) (fp.max (fp.sub RNE x6 x5) (fp.sqrt RNE x2))) (fp.add RNE (fp.roundToIntegral RNE (fp.sqrt RNE x8)) (fp.roundToIntegral RNE (fp.add RNE x6 x2)))) (fp.max (fp.sqrt RNE (fp.div RNE (fp.min x8 x7) (fp.div RNE x3 x0))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x8))))) (fp.div RNE (fp.min (fp.sqrt RNE (fp.div RNE (fp.max x9 x7) (fp.neg x3))) (fp.add RNE (fp.sqrt RNE (fp.mul RNE x9 x8)) (fp.neg (fp.roundToIntegral RNE x4)))) (fp.add RNE (fp.neg (fp.min (fp.sqrt RNE x8) (fp.sqrt RNE x4))) (fp.max (fp.neg (fp.add RNE x0 x5)) (fp.add RNE (fp.min x1 x7) (fp.min x4 x7)))))))(check-sat)