;  time  = {'mathsat': 2.8442673683166504, 'z3': 357.071}
;  terms = 82
;  score = 354.2267326316834
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.neg (fp.sqrt RNE (fp.max x8 x5))) (fp.max (fp.add RNE (fp.add RNE (fp.add RNE x8 x3) (fp.neg x9)) (fp.add RNE (fp.sub RNE x6 x3) (fp.add RNE x0 x4))) (fp.roundToIntegral RNE (fp.abs (fp.roundToIntegral RNE x1))))) (fp.abs (fp.div RNE (fp.neg (fp.div RNE x1 x0)) (fp.min (fp.add RNE x2 x5) (fp.div RNE x9 x4))))) (fp.mul RNE (fp.abs (fp.add RNE (fp.sqrt RNE (fp.abs x4)) (fp.neg (fp.mul RNE x8 x3)))) (fp.min (fp.sub RNE (fp.mul RNE (fp.max x8 x8) (fp.mul RNE x0 x7)) (fp.sqrt RNE (fp.sqrt RNE x1))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE x4) (fp.add RNE x5 x5)) (fp.mul RNE (fp.min (fp.div RNE x0 x3) (fp.abs x9)) (fp.max (fp.sqrt RNE x3) (fp.min x1 x2))))))))(check-sat)