;  time  = {'mathsat': 4.747990369796753, 'z3': 235.706}
;  terms = 91
;  score = 230.95800963020324
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.neg (fp.add RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x3 x4) (fp.sqrt RNE (fp.min x0 x7))) (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE x4 x0)) (fp.div RNE (fp.add RNE x5 x8) (fp.div RNE x0 x6)))) (fp.max (fp.abs (fp.min x8 x8)) (fp.sub RNE (fp.sqrt RNE x2) (fp.add RNE x2 x1))))) (fp.mul RNE (fp.mul RNE (fp.min (fp.add RNE (fp.div RNE x3 x1) (fp.sub RNE x4 x6)) (fp.sub RNE (fp.add RNE x5 x7) (fp.sub RNE x3 x5))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sqrt RNE x2)))) (fp.max (fp.sqrt RNE (fp.max (fp.div RNE (fp.div RNE x3 x6) (fp.abs x3)) (fp.sub RNE (fp.roundToIntegral RNE x6) (fp.roundToIntegral RNE x1)))) (fp.add RNE (fp.neg (fp.add RNE (fp.abs x0) (fp.mul RNE x1 x2))) (fp.sub RNE (fp.min (fp.min x0 x4) (fp.abs x3)) (fp.max (fp.sub RNE x6 x5) (fp.abs x8))))))))(check-sat)