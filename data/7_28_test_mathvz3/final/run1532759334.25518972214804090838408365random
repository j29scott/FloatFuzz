;  time  = {'mathsat': 2.7825825214385986, 'z3': 327.043}
;  terms = 82
;  score = 324.2604174785614
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.min (fp.sub RNE (fp.mul RNE x9 x7) (fp.max x3 x7)) (fp.abs (fp.mul RNE x4 x5))) (fp.add RNE (fp.mul RNE (fp.div RNE x8 x2) (fp.sub RNE x0 x4)) (fp.abs (fp.max x9 x3)))) (fp.sub RNE (fp.neg (fp.sqrt RNE (fp.div RNE x1 x5))) (fp.max (fp.neg (fp.sub RNE x3 (fp.add RNE x5 x1))) (fp.mul RNE (fp.neg (fp.sub RNE x6 x5)) (fp.neg (fp.neg x5)))))) (fp.mul RNE (fp.sqrt RNE (fp.mul RNE (fp.max (fp.div RNE x9 x9) (fp.min x4 x4)) (fp.add RNE (fp.mul RNE x1 x4) (fp.min x7 x7)))) (fp.mul RNE (fp.min (fp.abs (fp.div RNE x1 x1)) (fp.min (fp.mul RNE x3 x4) (fp.neg x4))) (fp.roundToIntegral RNE (fp.neg (fp.add RNE x1 x6)))))))(check-sat)