;  time  = {'z3': 187.252, 'mathsat': 28.66418480873108}
;  terms = 62
;  score = 158.58781519126893
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.abs (fp.sub RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.sqrt RNE x3)) (fp.mul RNE (fp.add RNE x9 x8) (fp.roundToIntegral RNE x4))) (fp.div RNE (fp.div RNE (fp.div RNE x2 x1) (fp.max x8 x8)) (fp.add RNE (fp.abs x7) (fp.mul RNE x5 x2))))) (fp.mul RNE (fp.min (fp.abs (fp.sqrt RNE (fp.max x0 x3))) (fp.sub RNE (fp.abs (fp.sub RNE x1 x5)) (fp.div RNE (fp.sub RNE x7 x3) (fp.div RNE x4 x6)))) (fp.add RNE (fp.abs (fp.sqrt RNE (fp.sqrt RNE x5))) (fp.sub RNE (fp.add RNE (fp.sqrt RNE x3) (fp.roundToIntegral RNE x2)) (fp.add RNE (fp.roundToIntegral RNE x9) (fp.roundToIntegral RNE x8)))))))(check-sat)