;  time  = {'z3': 168.165, 'mathsat': 6.236258029937744}
;  terms = 79
;  score = 161.92874197006225
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.neg (fp.neg x6)) (fp.abs (fp.mul RNE x7 x6))) (fp.mul RNE (fp.mul RNE (fp.abs x0) (fp.mul RNE x5 x8)) (fp.neg (fp.abs x7)))) (fp.min (fp.abs (fp.mul RNE (fp.add RNE x9 x3) (fp.roundToIntegral RNE x5))) (fp.abs (fp.abs (fp.neg x3))))) (fp.min (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.abs x9) (fp.abs x1)) (fp.sub RNE (fp.abs x5) (fp.sub RNE x3 x4))) (fp.add RNE (fp.mul RNE (fp.neg x2) (fp.add RNE x7 x5)) (fp.neg (fp.max x9 x7)))) (fp.min (fp.mul RNE (fp.neg (fp.abs x3)) (fp.mul RNE (fp.div RNE x6 x3) (fp.abs (fp.min x9 x7)))) (fp.abs (fp.sub RNE (fp.max x2 x1) (fp.sub RNE x3 x2)))))))(check-sat)