;  time  = {'mathsat': 8.850532531738281, 'z3': 525.708}
;  terms = 83
;  score = 516.8574674682617
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.div RNE (fp.mul RNE x6 x8) (fp.mul RNE x6 x5))) (fp.div RNE (fp.mul RNE (fp.abs x2) (fp.roundToIntegral RNE x1)) (fp.sub RNE (fp.roundToIntegral RNE x2) (fp.add RNE x7 x2)))) (fp.roundToIntegral RNE (fp.sub RNE (fp.mul RNE (fp.abs x3) (fp.abs x5)) (fp.div RNE (fp.sub RNE x8 x2) (fp.min x6 x2))))) (fp.mul RNE (fp.mul RNE (fp.max (fp.mul RNE (fp.sqrt RNE x5) (fp.mul RNE x7 (fp.add RNE x9 x6))) (fp.add RNE (fp.abs x7) (fp.mul RNE x2 (fp.mul RNE x2 x8)))) (fp.min (fp.mul RNE (fp.add RNE x1 x8) (fp.abs (fp.sqrt RNE x6))) (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x6)))) (fp.abs (fp.add RNE (fp.roundToIntegral RNE (fp.abs x2)) (fp.mul RNE (fp.mul RNE x0 (fp.sqrt RNE x4)) (fp.mul RNE x0 (fp.abs x5))))))))(check-sat)