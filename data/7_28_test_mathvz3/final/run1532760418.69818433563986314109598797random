;  time  = {'z3': 490.735, 'mathsat': 3.1412525177001953}
;  terms = 73
;  score = 487.5937474822998
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.max (fp.mul RNE x9 x9) (fp.sub RNE x7 x4)) (fp.div RNE (fp.div RNE x9 x5) (fp.div RNE x3 x6))) (fp.neg (fp.min (fp.min x3 x0) (fp.div RNE x1 x3)))) (fp.add RNE (fp.mul RNE (fp.div RNE (fp.add RNE x3 x9) (fp.max x2 x9)) (fp.mul RNE (fp.mul RNE x0 x8) (fp.sqrt RNE x6))) (fp.neg (fp.sqrt RNE (fp.min x9 x5))))) (fp.div RNE (fp.abs (fp.roundToIntegral RNE (fp.neg (fp.abs x6)))) (fp.sqrt RNE (fp.mul RNE (fp.max (fp.sub RNE (fp.sqrt RNE x5) (fp.div RNE x3 x4)) (fp.max (fp.max x0 x5) (fp.add RNE x1 x5))) (fp.roundToIntegral RNE (fp.neg (fp.sub RNE x5 x1))))))))(check-sat)