;  time  = {'mathsat': 10.791830062866211, 'z3': 290.411}
;  terms = 90
;  score = 279.6191699371338
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.abs (fp.mul RNE (fp.abs x4) (fp.sub RNE x1 x0))) (fp.abs (fp.sub RNE (fp.sub RNE x0 (fp.roundToIntegral RNE x2)) (fp.max (fp.max x2 x5) (fp.add RNE x0 x3))))) (fp.neg (fp.sub RNE (fp.max (fp.div RNE x6 x8) (fp.abs x4)) (fp.div RNE (fp.mul RNE (fp.abs x8) (fp.sub RNE x4 x0)) (fp.roundToIntegral RNE (fp.sub RNE x3 x0)))))) (fp.sub RNE (fp.mul RNE (fp.abs (fp.abs (fp.abs x4))) (fp.neg (fp.sub RNE (fp.roundToIntegral RNE x9) (fp.sub RNE x0 x2)))) (fp.sub RNE (fp.sub RNE (fp.mul RNE (fp.sqrt RNE (fp.sub RNE x0 x8)) (fp.div RNE (fp.sub RNE x5 x9) (fp.sub RNE x6 x5))) (fp.neg (fp.mul RNE (fp.min x3 x8) (fp.neg x8)))) (fp.roundToIntegral RNE (fp.div RNE (fp.min (fp.sub RNE x1 x7) (fp.neg x4)) (fp.max (fp.sqrt RNE x6) (fp.sub RNE x2 x2))))))))(check-sat)