;  time  = {'mathsat': 2.7740163803100586, 'z3': 337.844}
;  terms = 79
;  score = 335.06998361968994
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.div RNE x4 x6) (fp.sub RNE x9 x2)) (fp.roundToIntegral RNE (fp.add RNE (fp.min x8 x7) (fp.sub RNE x4 x6)))) (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE x1) (fp.max x5 x3)) (fp.mul RNE (fp.max x5 x2) (fp.sqrt RNE x6)))) (fp.sub RNE (fp.div RNE (fp.sqrt RNE (fp.sub RNE x8 (fp.max x7 x3))) (fp.max (fp.abs x6) (fp.div RNE x5 x1))) (fp.div RNE (fp.abs (fp.sqrt RNE (fp.roundToIntegral RNE x0))) (fp.sqrt RNE (fp.max (fp.abs x3) (fp.sqrt RNE x7)))))) (fp.sqrt RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.max (fp.min x5 x3) (fp.neg x7))) (fp.min (fp.min (fp.max x0 x5) (fp.roundToIntegral RNE x8)) (fp.abs (fp.sub RNE x0 (fp.div RNE x8 x4))))))))(check-sat)