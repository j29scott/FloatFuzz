;  time  = {'mathsat': 15.48263692855835, 'z3': 506.442}
;  terms = 72
;  score = 490.95936307144166
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.max (fp.sqrt RNE x3) (fp.max x8 x1)) (fp.sqrt RNE (fp.max (fp.sub RNE x1 x0) (fp.div RNE x1 x3)))) (fp.sub RNE (fp.add RNE (fp.div RNE x1 x4) (fp.sub RNE x2 x0)) (fp.roundToIntegral RNE (fp.mul RNE x0 x9)))) (fp.abs (fp.neg (fp.div RNE (fp.roundToIntegral RNE x6) (fp.div RNE x7 x2))))) (fp.div RNE (fp.neg (fp.abs (fp.min (fp.roundToIntegral RNE x5) (fp.sqrt RNE x5)))) (fp.div RNE (fp.max (fp.sqrt RNE (fp.mul RNE x4 x5)) (fp.sub RNE (fp.neg x4) (fp.mul RNE x0 x0))) (fp.add RNE (fp.add RNE (fp.min x0 x8) (fp.min x0 x1)) (fp.add RNE (fp.max x4 x3) (fp.abs x2)))))))(check-sat)