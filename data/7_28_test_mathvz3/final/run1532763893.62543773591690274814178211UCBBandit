;  time  = {'mathsat': 12.955101728439331, 'z3': 206.101}
;  terms = 77
;  score = 193.14589827156067
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.abs (fp.min (fp.sub RNE (fp.mul RNE x9 x2) (fp.sqrt RNE x3)) (fp.neg (fp.sub RNE x1 x3)))) (fp.min (fp.sub RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x8)) (fp.neg (fp.min x8 x4))) (fp.min (fp.sub RNE (fp.sub RNE x7 x2) (fp.roundToIntegral RNE x2)) (fp.abs (fp.add RNE x1 x3))))) (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE (fp.max (fp.div RNE x1 x9) (fp.abs x2)) (fp.sub RNE (fp.mul RNE x0 x2) (fp.neg x2)))) (fp.min (fp.max (fp.min (fp.sqrt RNE x4) (fp.sqrt RNE x5)) (fp.div RNE (fp.mul RNE x2 x8) (fp.sub RNE x0 x0))) (fp.mul RNE (fp.add RNE (fp.sub RNE x4 x0) (fp.div RNE x1 x7)) (fp.div RNE (fp.mul RNE x0 x8) (fp.roundToIntegral RNE x7)))))))(check-sat)