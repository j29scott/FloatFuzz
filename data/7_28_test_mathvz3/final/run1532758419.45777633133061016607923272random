;  time  = {'mathsat': 5.7789764404296875, 'z3': 296.91}
;  terms = 91
;  score = 291.13102355957034
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.min (fp.min (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x3)) (fp.mul RNE (fp.div RNE x4 x8) (fp.add RNE x1 x1))) (fp.sqrt RNE (fp.max (fp.add RNE x9 x5) (fp.div RNE x2 x1)))) (fp.sub RNE (fp.div RNE (fp.abs (fp.roundToIntegral RNE x0)) (fp.sub RNE (fp.mul RNE x8 x3) (fp.sub RNE x5 (fp.div RNE x9 x2)))) (fp.abs (fp.add RNE (fp.sub RNE (fp.sqrt RNE x2) (fp.sub RNE x4 x5)) (fp.roundToIntegral RNE (fp.sqrt RNE x8)))))) (fp.div RNE (fp.roundToIntegral RNE (fp.max (fp.mul RNE (fp.sub RNE x0 x8) (fp.sub RNE x3 x6)) (fp.neg (fp.add RNE x3 x9)))) (fp.sub RNE (fp.mul RNE (fp.min (fp.roundToIntegral RNE x6) (fp.max x8 x2)) (fp.mul RNE (fp.mul RNE x5 x8) (fp.add RNE x4 x5))) (fp.max (fp.mul RNE (fp.add RNE x7 x1) (fp.sub RNE x3 x2)) (fp.add RNE (fp.sqrt RNE x8) (fp.abs x8)))))))(check-sat)