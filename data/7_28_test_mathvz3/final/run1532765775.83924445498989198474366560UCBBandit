;  time  = {'mathsat': 2.4288582801818848, 'z3': 95.606}
;  terms = 80
;  score = 93.17714171981811
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.sub RNE (fp.neg (fp.div RNE (fp.roundToIntegral RNE x1) (fp.sqrt RNE x9))) (fp.max (fp.div RNE (fp.neg x3) (fp.max x6 x1)) (fp.min (fp.abs x8) (fp.roundToIntegral RNE x4)))) (fp.mul RNE (fp.max (fp.add RNE (fp.max x7 x7) (fp.abs x9)) (fp.roundToIntegral RNE (fp.abs x3))) (fp.max (fp.mul RNE (fp.add RNE x8 x9) (fp.abs x4)) (fp.sqrt RNE (fp.abs x2))))) (fp.max (fp.sqrt RNE (fp.sub RNE (fp.mul RNE (fp.mul RNE x8 x0) (fp.add RNE x2 x9)) (fp.abs (fp.sub RNE x3 x9)))) (fp.div RNE (fp.min (fp.min (fp.min x8 x0) (fp.sub RNE x1 x4)) (fp.sub RNE (fp.sub RNE x0 x6) (fp.abs x2))) (fp.mul RNE (fp.roundToIntegral RNE (fp.sqrt RNE x4)) (fp.div RNE (fp.sqrt RNE x7) (fp.sqrt RNE x8)))))))(check-sat)