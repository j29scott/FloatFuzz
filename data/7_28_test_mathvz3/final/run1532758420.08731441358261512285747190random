;  time  = {'z3': 406.732, 'mathsat': 51.07495355606079}
;  terms = 97
;  score = 355.65704644393924
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.min (fp.div RNE (fp.mul RNE (fp.sub RNE x2 x4) (fp.add RNE x6 x5)) (fp.roundToIntegral RNE (fp.div RNE x2 x6))) (fp.max (fp.roundToIntegral RNE (fp.add RNE (fp.neg x7) (fp.sqrt RNE x1))) (fp.max (fp.mul RNE (fp.roundToIntegral RNE x7) (fp.sub RNE x0 x4)) (fp.div RNE (fp.max x4 x0) (fp.abs x1))))) (fp.mul RNE (fp.min (fp.roundToIntegral RNE (fp.add RNE x4 x2)) (fp.min (fp.sub RNE x3 x1) (fp.abs x1))) (fp.min (fp.add RNE (fp.roundToIntegral RNE x4) (fp.max x3 x7)) (fp.neg (fp.min x3 (fp.div RNE x4 x9)))))) (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.min x1 x5)) (fp.max (fp.max x1 (fp.div RNE x6 x0)) (fp.neg x5))) (fp.sqrt RNE (fp.sqrt RNE (fp.sqrt RNE (fp.add RNE x0 x3))))) (fp.add RNE (fp.sqrt RNE (fp.sqrt RNE (fp.sqrt RNE x7))) (fp.min (fp.add RNE (fp.neg x1) (fp.max x2 x1)) (fp.sqrt RNE (fp.div RNE x9 x5)))))))(check-sat)