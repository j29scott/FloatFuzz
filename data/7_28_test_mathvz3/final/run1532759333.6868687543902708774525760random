;  time  = {'z3': 415.871, 'mathsat': 4.538565635681152}
;  terms = 103
;  score = 411.33243436431883
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.mul RNE (fp.div RNE (fp.max (fp.mul RNE x4 x0) (fp.sqrt RNE x9)) (fp.roundToIntegral RNE (fp.sub RNE x8 x3))) (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x2 x4) (fp.add RNE x3 x4)) (fp.max (fp.div RNE x9 x8) (fp.sqrt RNE x2))) (fp.abs (fp.add RNE (fp.add RNE x0 x1) (fp.roundToIntegral RNE x4))))) (fp.neg (fp.div RNE (fp.min (fp.sqrt RNE (fp.abs x5)) (fp.min (fp.mul RNE x3 x9) (fp.max x0 x1))) (fp.div RNE (fp.add RNE (fp.min x1 x5) (fp.roundToIntegral RNE x1)) (fp.div RNE (fp.sub RNE x1 x7) (fp.min x3 x9)))))) (fp.sub RNE (fp.mul RNE (fp.neg (fp.mul RNE (fp.sub RNE x1 x6) (fp.roundToIntegral RNE x6))) (fp.mul RNE (fp.max (fp.max x4 x9) (fp.max x0 x7)) (fp.max (fp.div RNE x5 x1) (fp.sub RNE x2 x7)))) (fp.abs (fp.add RNE (fp.max (fp.max x4 x2) (fp.sub RNE x0 (fp.div RNE x2 x8))) (fp.min (fp.neg x9) (fp.abs x7)))))))(check-sat)