;  time  = {'z3': 159.685, 'mathsat': 2.4723856449127197}
;  terms = 75
;  score = 157.21261435508728
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.sub RNE (fp.add RNE (fp.sub RNE (fp.mul RNE x3 x1) (fp.add RNE x2 x7)) (fp.abs (fp.div RNE x2 x0))) (fp.add RNE (fp.sub RNE (fp.min x2 x2) (fp.sub RNE x2 x5)) (fp.min (fp.div RNE x6 x1) (fp.min x3 x1)))) (fp.neg (fp.neg (fp.mul RNE (fp.min x9 x1) (fp.min x9 x1))))) (fp.sub RNE (fp.add RNE (fp.max (fp.add RNE (fp.abs x4) (fp.mul RNE x9 x3)) (fp.div RNE (fp.div RNE x1 x2) (fp.abs x2))) (fp.abs (fp.sqrt RNE (fp.min x6 x7)))) (fp.div RNE (fp.max (fp.sqrt RNE (fp.abs x9)) (fp.roundToIntegral RNE (fp.max x9 x5))) (fp.sqrt RNE (fp.add RNE (fp.roundToIntegral RNE x1) (fp.add RNE x5 x6)))))))(check-sat)