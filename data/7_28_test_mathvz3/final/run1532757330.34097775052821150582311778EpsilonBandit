;  time  = {'z3': 344.319, 'mathsat': 1.9137625694274902}
;  terms = 90
;  score = 342.4052374305725
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.max (fp.mul RNE (fp.add RNE (fp.min x6 x2) (fp.mul RNE x3 x0)) (fp.neg (fp.min x7 x1))) (fp.add RNE (fp.min (fp.mul RNE x2 x1) (fp.abs x9)) (fp.max (fp.max x4 x8) (fp.roundToIntegral RNE x3)))) (fp.min (fp.sub RNE (fp.mul RNE (fp.mul RNE x4 x6) (fp.abs x6)) (fp.min (fp.min x9 x3) (fp.abs x4))) (fp.add RNE (fp.neg (fp.sub RNE x0 x8)) (fp.min (fp.add RNE x4 x4) (fp.mul RNE x1 x7))))) (fp.min (fp.div RNE (fp.abs (fp.sub RNE (fp.abs x1) (fp.min x9 x9))) (fp.sqrt RNE (fp.abs (fp.min x6 x0)))) (fp.min (fp.div RNE (fp.div RNE (fp.min x5 x1) (fp.sqrt RNE x5)) (fp.sub RNE (fp.add RNE x5 x0) (fp.min x6 x4))) (fp.abs (fp.mul RNE (fp.sqrt RNE x8) (fp.max x9 x6)))))))(check-sat)