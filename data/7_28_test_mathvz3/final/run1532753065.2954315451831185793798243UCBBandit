;  time  = {'z3': 246.2, 'mathsat': 19.27830934524536}
;  terms = 73
;  score = 226.92169065475463
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.min (fp.abs (fp.abs (fp.abs x2))) (fp.abs (fp.div RNE (fp.mul RNE x4 x9) (fp.min x2 x2)))) (fp.sub RNE (fp.add RNE (fp.abs (fp.roundToIntegral RNE x2)) (fp.mul RNE (fp.abs x7) (fp.sqrt RNE x6))) (fp.mul RNE (fp.mul RNE (fp.min x6 x6) (fp.mul RNE x2 x1)) (fp.add RNE (fp.div RNE x6 x7) (fp.sub RNE x4 x8))))) (fp.mul RNE (fp.sub RNE (fp.neg (fp.div RNE (fp.sqrt RNE x7) (fp.sqrt RNE x6))) (fp.add RNE (fp.sqrt RNE (fp.min x9 x3)) (fp.abs (fp.div RNE x3 x3)))) (fp.min (fp.abs (fp.min (fp.sqrt RNE x4) (fp.sqrt RNE x7))) (fp.div RNE (fp.neg (fp.roundToIntegral RNE x2)) (fp.mul RNE (fp.roundToIntegral RNE x3) (fp.abs x9)))))))(check-sat)