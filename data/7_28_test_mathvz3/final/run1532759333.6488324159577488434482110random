;  time  = {'mathsat': 6.710505485534668, 'z3': 378.191}
;  terms = 77
;  score = 371.4804945144653
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sub RNE (fp.sub RNE (fp.neg (fp.neg (fp.min x8 x1))) (fp.div RNE (fp.min (fp.min x9 x1) (fp.div RNE x8 x6)) (fp.sqrt RNE (fp.sub RNE x5 x3)))) (fp.div RNE (fp.abs (fp.max (fp.div RNE (fp.sub RNE x7 x8) (fp.neg x2)) (fp.abs (fp.div RNE x3 x9)))) (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE (fp.mul RNE x3 x5) (fp.sqrt RNE x2))) (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE x3 x4)) (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.max x0 x1)))))) (fp.div RNE (fp.abs (fp.min (fp.sqrt RNE (fp.min x7 x2)) (fp.max (fp.roundToIntegral RNE x9) (fp.mul RNE x4 x4)))) (fp.roundToIntegral RNE (fp.div RNE (fp.abs (fp.sqrt RNE x4)) (fp.add RNE (fp.mul RNE x1 x0) (fp.min x5 x4)))))))(check-sat)