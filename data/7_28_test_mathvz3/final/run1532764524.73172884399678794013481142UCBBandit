;  time  = {'mathsat': 3.3643746376037598, 'z3': 300.606}
;  terms = 71
;  score = 297.24162536239623
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.max (fp.div RNE (fp.abs (fp.abs x4)) (fp.sqrt RNE (fp.mul RNE x0 x6))) (fp.mul RNE (fp.min (fp.add RNE x3 x1) (fp.mul RNE x8 x6)) (fp.roundToIntegral RNE (fp.max x3 x7)))) (fp.add RNE (fp.sub RNE (fp.add RNE (fp.neg x4) (fp.mul RNE x6 x1)) (fp.sqrt RNE (fp.sqrt RNE x5))) (fp.abs (fp.abs (fp.neg x7))))) (fp.max (fp.max (fp.sub RNE (fp.div RNE (fp.neg x5) (fp.div RNE x9 x3)) (fp.mul RNE (fp.abs x8) (fp.roundToIntegral RNE x2))) (fp.abs (fp.div RNE (fp.mul RNE x8 x1) (fp.abs x0)))) (fp.min (fp.neg (fp.sub RNE (fp.abs x7) (fp.mul RNE x9 x8))) (fp.sqrt RNE (fp.abs (fp.sqrt RNE x2)))))))(check-sat)