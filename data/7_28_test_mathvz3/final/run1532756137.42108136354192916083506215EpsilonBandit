;  time  = {'z3': 168.888, 'mathsat': 7.613335847854614}
;  terms = 67
;  score = 161.2746641521454
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.add RNE x3 x5) (fp.sqrt RNE x4)) (fp.mul RNE (fp.abs x1) (fp.min x1 x7))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sqrt RNE x5)))) (fp.sub RNE (fp.mul RNE (fp.min (fp.sqrt RNE x3) (fp.sqrt RNE x7)) (fp.sqrt RNE (fp.add RNE x9 x2))) (fp.sub RNE (fp.mul RNE (fp.sqrt RNE x1) (fp.sub RNE x9 x3)) (fp.roundToIntegral RNE (fp.mul RNE x0 x1))))) (fp.div RNE (fp.max (fp.abs (fp.add RNE (fp.sqrt RNE x2) (fp.max x0 x9))) (fp.mul RNE (fp.max (fp.sub RNE x3 x8) (fp.sqrt RNE x8)) (fp.neg (fp.max x4 x8)))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.neg x9)))))))(check-sat)