;  time  = {'mathsat': 8.786476135253906, 'z3': 138.538}
;  terms = 75
;  score = 129.7515238647461
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.roundToIntegral RNE (fp.max (fp.add RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x8)) (fp.add RNE (fp.sub RNE x9 x9) (fp.sub RNE x9 x2))) (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE x6) (fp.add RNE x9 x6)) (fp.add RNE (fp.div RNE x2 x8) (fp.min x2 x4))))) (fp.div RNE (fp.sub RNE (fp.sub RNE (fp.div RNE (fp.neg x2) (fp.max x1 x0)) (fp.neg (fp.max x8 x5))) (fp.sub RNE (fp.mul RNE (fp.sqrt RNE x2) (fp.sqrt RNE x6)) (fp.max (fp.roundToIntegral RNE (fp.mul RNE x3 x6)) (fp.add RNE (fp.min x4 x1) (fp.sub RNE x5 x8))))) (fp.roundToIntegral RNE (fp.add RNE (fp.max (fp.div RNE x5 x5) (fp.max x3 x3)) (fp.div RNE (fp.sub RNE x4 x8) (fp.sub RNE x3 x3)))))))(check-sat)