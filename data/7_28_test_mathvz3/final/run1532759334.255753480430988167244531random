;  time  = {'mathsat': 23.895355463027954, 'z3': 600}
;  terms = 95
;  score = 576.104644536972
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.sqrt RNE (fp.sub RNE (fp.add RNE (fp.abs x1) (fp.mul RNE x4 x0)) (fp.div RNE (fp.add RNE x8 x7) (fp.div RNE x9 x9)))) (fp.sqrt RNE (fp.mul RNE (fp.sub RNE (fp.abs x4) (fp.max x6 x4)) (fp.sub RNE (fp.add RNE x8 x8) (fp.div RNE x8 x7))))) (fp.sub RNE (fp.mul RNE (fp.max (fp.min (fp.roundToIntegral RNE x7) (fp.min x8 x7)) (fp.mul RNE (fp.neg x0) (fp.abs x8))) (fp.add RNE (fp.abs (fp.roundToIntegral RNE (fp.sub RNE x9 x6))) (fp.max (fp.roundToIntegral RNE (fp.max x9 x6)) (fp.div RNE (fp.add RNE x6 x6) (fp.roundToIntegral RNE x8))))) (fp.max (fp.roundToIntegral RNE (fp.neg (fp.min (fp.div RNE x3 x3) (fp.add RNE x3 x7)))) (fp.mul RNE (fp.roundToIntegral RNE (fp.div RNE (fp.sub RNE x0 x3) (fp.abs x5))) (fp.min (fp.div RNE (fp.add RNE x3 x0) (fp.div RNE x2 x6)) (fp.min (fp.roundToIntegral RNE x8) (fp.mul RNE x6 x9))))))))(check-sat)