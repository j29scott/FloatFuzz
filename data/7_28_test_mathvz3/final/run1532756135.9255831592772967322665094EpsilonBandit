;  time  = {'mathsat': 2.9377543926239014, 'z3': 116.549}
;  terms = 91
;  score = 113.6112456073761
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.max (fp.abs (fp.max (fp.abs (fp.div RNE x4 x2)) (fp.abs (fp.add RNE x6 x9)))) (fp.sub RNE (fp.max (fp.sqrt RNE (fp.max x1 x2)) (fp.mul RNE (fp.add RNE (fp.max x5 x8) (fp.abs x1)) (fp.min (fp.abs x6) (fp.abs x4)))) (fp.abs (fp.div RNE (fp.sqrt RNE x7) (fp.abs x5))))) (fp.max (fp.sub RNE (fp.max (fp.add RNE (fp.div RNE x0 (fp.mul RNE x4 x7)) (fp.sub RNE (fp.div RNE x4 x6) (fp.neg x4))) (fp.abs (fp.add RNE x3 (fp.abs x3)))) (fp.min (fp.max (fp.sub RNE x5 x3) (fp.add RNE x6 x1)) (fp.mul RNE (fp.div RNE x0 x0) (fp.div RNE x6 (fp.sub RNE x6 x9))))) (fp.max (fp.sqrt RNE (fp.neg (fp.abs x0))) (fp.add RNE (fp.div RNE (fp.max x2 x4) (fp.add RNE x7 (fp.sub RNE x9 x5))) (fp.neg (fp.roundToIntegral RNE x4)))))))(check-sat)