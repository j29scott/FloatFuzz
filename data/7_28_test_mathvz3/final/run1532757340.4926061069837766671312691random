;  time  = {'z3': 595.156, 'mathsat': 16.950727701187134}
;  terms = 89
;  score = 578.2052722988128
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.max (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.div RNE x7 x4) (fp.add RNE x0 (fp.add RNE x8 x8))) (fp.sqrt RNE (fp.abs x7))) (fp.neg (fp.sub RNE (fp.max x6 x5) (fp.max x9 x8)))) (fp.add RNE (fp.add RNE (fp.max (fp.min (fp.sqrt RNE x5) (fp.sub RNE x0 x4)) (fp.div RNE (fp.mul RNE x3 x9) (fp.abs x6))) (fp.abs (fp.max (fp.div RNE x6 x3) (fp.add RNE x1 x7)))) (fp.sub RNE (fp.min (fp.roundToIntegral RNE (fp.roundToIntegral RNE x4)) (fp.min (fp.abs x7) (fp.mul RNE x8 x6))) (fp.add RNE (fp.add RNE (fp.mul RNE x5 x2) (fp.max x9 x2)) (fp.min (fp.add RNE x2 x6) (fp.add RNE x7 x2)))))) (fp.neg (fp.div RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.max x7 x9)) (fp.roundToIntegral RNE (fp.div RNE x7 x6))) (fp.abs (fp.neg (fp.div RNE x4 x0)))))))(check-sat)