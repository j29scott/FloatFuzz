;  time  = {'z3': 396.37, 'mathsat': 5.370443344116211}
;  terms = 115
;  score = 390.9995566558838
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.add RNE (fp.add RNE (fp.min x8 x6) (fp.sub RNE x9 x8)) (fp.sub RNE (fp.div RNE x5 x2) (fp.add RNE x8 x5))) (fp.max (fp.neg (fp.mul RNE (fp.roundToIntegral RNE x4) (fp.mul RNE x5 x7))) (fp.div RNE (fp.sqrt RNE (fp.div RNE x7 x1)) (fp.add RNE (fp.sub RNE x1 x8) (fp.abs x8))))) (fp.max (fp.max (fp.neg (fp.abs x1)) (fp.neg (fp.add RNE x8 x8))) (fp.abs (fp.add RNE (fp.mul RNE x1 x5) (fp.abs x9))))) (fp.min (fp.sub RNE (fp.mul RNE (fp.abs (fp.max x1 x9)) (fp.max (fp.max x3 x9) (fp.div RNE x1 x4))) (fp.sub RNE (fp.div RNE (fp.min (fp.abs x7) (fp.sqrt RNE x8)) (fp.div RNE (fp.sub RNE x4 x8) (fp.max x5 x5))) (fp.roundToIntegral RNE (fp.mul RNE (fp.sqrt RNE x0) (fp.min x7 x2))))) (fp.min (fp.roundToIntegral RNE (fp.div RNE (fp.sqrt RNE x6) (fp.sqrt RNE x1))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.min x7 x6) (fp.sqrt RNE x5)) (fp.add RNE (fp.sqrt RNE x7) (fp.sqrt RNE x5))) (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE x1 x1) (fp.neg x9))))))))(check-sat)