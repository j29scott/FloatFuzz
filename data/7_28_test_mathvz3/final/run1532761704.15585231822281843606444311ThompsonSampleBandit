;  time  = {'z3': 600, 'mathsat': 5.63767409324646}
;  terms = 120
;  score = 594.3623259067535
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.neg (fp.add RNE (fp.add RNE (fp.sqrt RNE (fp.add RNE x2 (fp.add RNE x2 x8))) (fp.add RNE (fp.div RNE (fp.min x3 x1) (fp.max x3 x3)) (fp.add RNE (fp.max x1 x5) (fp.sub RNE x6 x9)))) (fp.mul RNE (fp.add RNE (fp.div RNE (fp.add RNE x9 x7) (fp.add RNE x1 x7)) (fp.roundToIntegral RNE (fp.abs x1))) (fp.max (fp.sub RNE (fp.min x2 x8) (fp.add RNE x8 x9)) (fp.sub RNE (fp.add RNE x2 x6) (fp.add RNE x7 x1)))))) (fp.add RNE (fp.add RNE (fp.sqrt RNE (fp.div RNE (fp.sqrt RNE x4) (fp.add RNE (fp.div RNE x4 x8) (fp.sqrt RNE x0)))) (fp.div RNE (fp.neg (fp.add RNE (fp.sub RNE x5 x9) (fp.roundToIntegral RNE x6))) (fp.sub RNE (fp.sqrt RNE (fp.min x8 x2)) (fp.neg (fp.mul RNE x8 x9))))) (fp.add RNE (fp.div RNE (fp.sqrt RNE (fp.max (fp.max x9 x6) (fp.div RNE x5 x7))) (fp.add RNE (fp.mul RNE (fp.sqrt RNE x0) (fp.sqrt RNE x1)) (fp.div RNE (fp.add RNE x4 x8) (fp.add RNE x7 x8)))) (fp.abs (fp.div RNE (fp.max (fp.add RNE x6 x8) (fp.add RNE x3 x7)) (fp.add RNE (fp.div RNE x6 x6) (fp.max x6 x9))))))))(check-sat)