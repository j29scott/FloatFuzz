;  time  = {'z3': 491.879, 'mathsat': 2.3794028759002686}
;  terms = 69
;  score = 489.49959712409975
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.min (fp.sqrt RNE (fp.add RNE (fp.mul RNE x6 x4) (fp.neg x2))) (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE x0 (fp.div RNE x2 x4))) (fp.add RNE (fp.neg x7) (fp.sub RNE (fp.abs x1) (fp.min x1 x6))))) (fp.neg (fp.neg (fp.roundToIntegral RNE (fp.max x8 x6))))) (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.neg (fp.roundToIntegral RNE x0)) (fp.min (fp.mul RNE x6 x6) (fp.neg (fp.sqrt RNE x4)))) (fp.min (fp.abs (fp.mul RNE x9 x6)) (fp.mul RNE (fp.max x6 x2) (fp.mul RNE x6 x7)))) (fp.sqrt RNE (fp.add RNE (fp.div RNE (fp.neg x4) (fp.div RNE x8 x9)) (fp.sqrt RNE (fp.mul RNE x7 x3)))))))(check-sat)