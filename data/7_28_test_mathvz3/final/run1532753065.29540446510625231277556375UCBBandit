;  time  = {'z3': 359.083, 'mathsat': 2.72445011138916}
;  terms = 60
;  score = 356.35854988861087
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.roundToIntegral RNE (fp.abs (fp.sub RNE (fp.abs (fp.sub RNE x4 x5)) (fp.abs (fp.abs x5))))) (fp.div RNE (fp.div RNE (fp.sub RNE (fp.min (fp.mul RNE x1 x6) (fp.div RNE x5 x8)) (fp.mul RNE (fp.roundToIntegral RNE x4) (fp.min x0 x7))) (fp.sub RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x4)) (fp.add RNE (fp.abs x1) (fp.max x3 x8)))) (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x9)) (fp.div RNE (fp.min x2 x6) (fp.sub RNE x4 x0))) (fp.sub RNE (fp.div RNE (fp.div RNE x3 x8) (fp.abs x3)) (fp.roundToIntegral RNE (fp.sub RNE x7 x6)))))))(check-sat)