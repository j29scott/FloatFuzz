;  time  = {'z3': 257.997, 'mathsat': 4.3862464427948}
;  terms = 62
;  score = 253.61075355720521
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.add RNE (fp.max (fp.sub RNE (fp.max x5 x8) (fp.sqrt RNE x7)) (fp.mul RNE (fp.add RNE x3 x4) (fp.neg x6))) (fp.abs (fp.abs (fp.div RNE x6 x8)))) (fp.div RNE (fp.min (fp.div RNE (fp.neg x2) (fp.div RNE x3 x1)) (fp.roundToIntegral RNE (fp.sub RNE x8 x0))) (fp.max (fp.add RNE (fp.mul RNE x8 x9) (fp.neg x3)) (fp.max (fp.div RNE x9 x3) (fp.abs x6))))) (fp.sqrt RNE (fp.add RNE (fp.neg (fp.mul RNE (fp.min x1 x8) (fp.abs x6))) (fp.sqrt RNE (fp.max (fp.roundToIntegral RNE x9) (fp.max x5 x7)))))))(check-sat)