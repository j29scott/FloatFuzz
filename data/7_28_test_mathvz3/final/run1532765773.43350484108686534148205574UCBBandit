;  time  = {'z3': 90.02, 'mathsat': 4.910415410995483}
;  terms = 71
;  score = 85.10958458900451
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.max (fp.add RNE (fp.roundToIntegral RNE (fp.abs (fp.abs x5))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.max x0 x8)))) (fp.add RNE (fp.roundToIntegral RNE (fp.abs (fp.sub RNE x3 x8))) (fp.add RNE (fp.max (fp.div RNE x8 x0) (fp.roundToIntegral RNE x7)) (fp.div RNE (fp.add RNE x1 x2) (fp.mul RNE x9 x5))))) (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.abs (fp.min x4 x1)) (fp.neg (fp.roundToIntegral RNE x4))) (fp.mul RNE (fp.abs (fp.div RNE x5 x2)) (fp.min (fp.max x5 x2) (fp.mul RNE x0 x9)))) (fp.max (fp.neg (fp.sub RNE (fp.sub RNE x9 x1) (fp.max x3 x1))) (fp.roundToIntegral RNE (fp.sub RNE (fp.min x3 x5) (fp.div RNE x1 x5)))))))(check-sat)