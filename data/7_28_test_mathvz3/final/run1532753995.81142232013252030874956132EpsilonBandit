;  time  = {'mathsat': 13.957154750823975, 'z3': 218.422}
;  terms = 79
;  score = 204.46484524917602
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.sub RNE (fp.max (fp.div RNE (fp.div RNE x3 x4) (fp.neg x2)) (fp.mul RNE (fp.mul RNE x7 x1) (fp.max x6 x7))) (fp.sub RNE (fp.add RNE (fp.abs x9) (fp.min x1 x6)) (fp.add RNE (fp.neg x8) (fp.add RNE x3 x5)))) (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.div RNE x4 x8) (fp.mul RNE x1 x4)) (fp.max (fp.max x0 x2) (fp.sqrt RNE x5))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.max x2 x4))))) (fp.sub RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.abs x4) (fp.abs x5)))) (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.sub RNE x1 x6) (fp.div RNE x4 x4)) (fp.min (fp.abs x7) (fp.div RNE x1 x7))) (fp.neg (fp.div RNE (fp.neg x0) (fp.sqrt RNE x3)))))))(check-sat)