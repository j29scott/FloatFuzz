;  time  = {'z3': 600, 'mathsat': 5.838268518447876}
;  terms = 85
;  score = 594.1617314815521
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.abs (fp.abs (fp.max (fp.roundToIntegral RNE x7) (fp.mul RNE x6 x2)))) (fp.add RNE (fp.min (fp.mul RNE (fp.add RNE x4 x4) (fp.div RNE x9 x7)) (fp.add RNE (fp.sub RNE (fp.div RNE x4 x4) (fp.add RNE x6 x5)) (fp.div RNE (fp.add RNE x4 x0) (fp.roundToIntegral RNE x7)))) (fp.min (fp.sqrt RNE (fp.min x8 x6)) (fp.mul RNE (fp.abs x8) (fp.sub RNE x3 x0))))) (fp.div RNE (fp.abs (fp.sqrt RNE (fp.sub RNE (fp.min x3 x8) (fp.sqrt RNE x8)))) (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE (fp.min (fp.sub RNE x2 x3) (fp.div RNE x5 x6))) (fp.neg (fp.min (fp.add RNE x7 x2) (fp.sub RNE x7 x8)))) (fp.sqrt RNE (fp.div RNE (fp.min (fp.abs x0) (fp.neg x3)) (fp.div RNE (fp.div RNE x1 x5) (fp.mul RNE x7 x1))))))))(check-sat)