;  time  = {'z3': 196.911, 'mathsat': 3.6600043773651123}
;  terms = 69
;  score = 193.2509956226349
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.roundToIntegral RNE x5) (fp.max x3 x4))) (fp.abs (fp.roundToIntegral RNE (fp.max x6 x8)))) (fp.mul RNE (fp.add RNE (fp.div RNE (fp.neg x2) (fp.roundToIntegral RNE x9)) (fp.abs (fp.div RNE x8 x6))) (fp.min (fp.neg (fp.mul RNE x1 x1)) (fp.abs (fp.min x3 x6))))) (fp.mul RNE (fp.min (fp.sub RNE (fp.max (fp.min x0 x2) (fp.neg x2)) (fp.add RNE (fp.mul RNE x4 x8) (fp.add RNE x6 x9))) (fp.abs (fp.sub RNE (fp.max x1 x9) (fp.roundToIntegral RNE x9)))) (fp.sqrt RNE (fp.mul RNE (fp.neg (fp.add RNE x7 x5)) (fp.min (fp.neg x8) (fp.sqrt RNE x7)))))))(check-sat)