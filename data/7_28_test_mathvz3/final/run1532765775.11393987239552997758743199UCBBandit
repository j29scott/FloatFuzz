;  time  = {'mathsat': 6.093409776687622, 'z3': 126.18}
;  terms = 57
;  score = 120.08659022331238
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sqrt RNE (fp.roundToIntegral RNE (fp.max (fp.mul RNE (fp.sqrt RNE x6) (fp.sqrt RNE x1)) (fp.add RNE (fp.mul RNE x6 x3) (fp.sqrt RNE x9))))) (fp.div RNE (fp.min (fp.neg (fp.sqrt RNE (fp.abs x0))) (fp.div RNE (fp.neg (fp.div RNE x4 x6)) (fp.sqrt RNE (fp.sqrt RNE x6)))) (fp.mul RNE (fp.mul RNE (fp.add RNE (fp.add RNE x5 x9) (fp.neg x9)) (fp.add RNE (fp.sqrt RNE x4) (fp.sub RNE x6 x0))) (fp.max (fp.sub RNE (fp.sub RNE x8 x1) (fp.roundToIntegral RNE x9)) (fp.min (fp.sub RNE x4 x3) (fp.max x0 x2)))))))(check-sat)