;  time  = {'z3': 414.808, 'mathsat': 2.4249513149261475}
;  terms = 65
;  score = 412.38304868507385
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.abs (fp.add RNE x5 x7)))) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.div RNE x2 x3) (fp.sub RNE x0 x4)) (fp.abs (fp.sub RNE x4 x6))) (fp.max (fp.abs (fp.div RNE x8 x7)) (fp.mul RNE (fp.mul RNE x7 x5) (fp.neg x7))))) (fp.abs (fp.mul RNE (fp.sub RNE (fp.sqrt RNE (fp.abs x8)) (fp.mul RNE (fp.max (fp.mul RNE x1 x8) (fp.roundToIntegral RNE x8)) (fp.mul RNE (fp.abs x2) (fp.min x2 x6)))) (fp.max (fp.roundToIntegral RNE (fp.add RNE x4 x9)) (fp.min (fp.roundToIntegral RNE (fp.sub RNE x9 x3)) (fp.roundToIntegral RNE (fp.div RNE x9 x5))))))))(check-sat)