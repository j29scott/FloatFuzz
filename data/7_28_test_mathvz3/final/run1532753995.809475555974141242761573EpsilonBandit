;  time  = {'mathsat': 6.1548192501068115, 'z3': 289.89}
;  terms = 77
;  score = 283.7351807498932
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.abs (fp.div RNE (fp.min (fp.max x8 x8) (fp.div RNE (fp.abs x7) (fp.mul RNE x3 x1))) (fp.mul RNE (fp.abs x1) (fp.mul RNE x8 x9)))) (fp.min (fp.sub RNE (fp.abs (fp.div RNE x6 x1)) (fp.min (fp.max x8 x2) (fp.abs x5))) (fp.max (fp.neg (fp.neg (fp.max x6 x5))) (fp.min (fp.sqrt RNE (fp.min x1 x6)) (fp.neg (fp.abs x7)))))) (fp.abs (fp.div RNE (fp.mul RNE (fp.min (fp.min x3 (fp.neg x6)) (fp.abs x1)) (fp.min (fp.abs x7) (fp.mul RNE x4 x3))) (fp.min (fp.abs (fp.abs x2)) (fp.min (fp.roundToIntegral RNE (fp.roundToIntegral RNE x6)) (fp.div RNE (fp.div RNE x7 x7) (fp.div RNE x2 x7))))))))(check-sat)