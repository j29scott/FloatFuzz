;  time  = {'z3': 600, 'mathsat': 7.364580869674683}
;  terms = 68
;  score = 592.6354191303253
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE (fp.abs x8)) (fp.abs (fp.abs x4))) (fp.div RNE (fp.div RNE (fp.min x4 x9) (fp.sqrt RNE x6)) (fp.add RNE (fp.sub RNE x1 x7) (fp.abs x0)))) (fp.max (fp.div RNE (fp.div RNE (fp.div RNE x6 x4) (fp.div RNE x2 (fp.neg x6))) (fp.sqrt RNE (fp.div RNE x1 (fp.div RNE x7 x5)))) (fp.neg (fp.div RNE (fp.sub RNE x1 x5) (fp.div RNE (fp.add RNE x2 x1) (fp.div RNE x2 x5)))))) (fp.roundToIntegral RNE (fp.sub RNE (fp.sqrt RNE (fp.div RNE (fp.max x1 x9) (fp.add RNE x6 x4))) (fp.abs (fp.div RNE (fp.abs x3) (fp.div RNE x3 x4)))))))(check-sat)