;  time  = {'mathsat': 61.66530776023865, 'z3': 498.727}
;  terms = 83
;  score = 437.0616922397613
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.mul RNE (fp.sqrt RNE (fp.div RNE (fp.min x9 x3) (fp.min x0 (fp.div RNE x1 x7)))) (fp.min (fp.div RNE (fp.min x4 x5) (fp.min x2 x0)) (fp.max (fp.sub RNE x8 x5) (fp.sub RNE x1 x2)))) (fp.mul RNE (fp.add RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x7)) (fp.div RNE (fp.add RNE x1 x0) (fp.div RNE (fp.add RNE x7 x3) (fp.mul RNE x0 x5)))) (fp.sqrt RNE (fp.neg (fp.neg (fp.max x7 x0)))))) (fp.abs (fp.sub RNE (fp.abs (fp.max (fp.add RNE x0 x6) (fp.roundToIntegral RNE x4))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.add RNE x3 x6) (fp.min x9 x7)) (fp.sub RNE (fp.add RNE x7 x6) (fp.add RNE x8 x5))) (fp.abs (fp.sub RNE (fp.div RNE x9 x2) (fp.add RNE x7 x7))))))))(check-sat)