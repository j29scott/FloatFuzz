;  time  = {'mathsat': 4.032984256744385, 'z3': 335.627}
;  terms = 61
;  score = 331.5940157432556
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.mul RNE (fp.roundToIntegral RNE (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE x7)) (fp.max (fp.mul RNE x9 x3) (fp.mul RNE x5 x8)))) (fp.mul RNE (fp.sqrt RNE (fp.div RNE (fp.max x9 x5) (fp.div RNE x1 x2))) (fp.neg (fp.mul RNE (fp.sqrt RNE x1) (fp.min x7 x0))))) (fp.div RNE (fp.abs (fp.div RNE (fp.div RNE (fp.max x9 x7) (fp.add RNE x0 x1)) (fp.div RNE (fp.sqrt RNE x4) (fp.max x9 x6)))) (fp.abs (fp.mul RNE (fp.abs (fp.min x8 x7)) (fp.min (fp.max x1 x8) (fp.mul RNE x3 (fp.mul RNE x9 x9))))))))(check-sat)