;  time  = {'mathsat': 3.201134443283081, 'z3': 288.441}
;  terms = 85
;  score = 285.2398655567169
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sqrt RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.mul RNE x3 (fp.neg x7)) (fp.sub RNE (fp.mul RNE x5 x6) (fp.abs x5))) (fp.neg (fp.div RNE x4 x7))) (fp.add RNE (fp.sqrt RNE (fp.sub RNE x8 x6)) (fp.div RNE (fp.abs x6) (fp.roundToIntegral RNE x5))))) (fp.div RNE (fp.max (fp.add RNE (fp.sqrt RNE (fp.roundToIntegral RNE x9)) (fp.max (fp.mul RNE x0 x4) (fp.roundToIntegral RNE x0))) (fp.max (fp.abs (fp.neg x2)) (fp.mul RNE (fp.sqrt RNE x2) (fp.sub RNE x6 x3)))) (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.mul RNE x2 x4)) (fp.max (fp.mul RNE x8 (fp.roundToIntegral RNE x1)) (fp.roundToIntegral RNE x1))) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.sub RNE x1 x4) (fp.mul RNE x7 x0)) (fp.div RNE (fp.sqrt RNE x6) (fp.neg x0))) (fp.abs (fp.min (fp.abs x0) (fp.sub RNE x9 x6))))))))(check-sat)