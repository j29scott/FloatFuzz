;  time  = {'z3': 600, 'mathsat': 9.344905376434326}
;  terms = 102
;  score = 590.6550946235657
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.neg x8)) (fp.sub RNE (fp.mul RNE x1 x1) (fp.div RNE x5 x9))) (fp.sub RNE (fp.sqrt RNE (fp.sqrt RNE x8)) (fp.div RNE (fp.div RNE (fp.sqrt RNE x5) (fp.div RNE x1 x5)) (fp.add RNE (fp.add RNE x6 x5) (fp.sqrt RNE x0))))) (fp.sub RNE (fp.neg (fp.sub RNE (fp.add RNE x8 x9) (fp.add RNE x0 (fp.div RNE x9 x6)))) (fp.add RNE (fp.sub RNE (fp.add RNE x3 x2) (fp.abs (fp.min x3 x2))) (fp.mul RNE (fp.sub RNE x5 x5) (fp.sqrt RNE (fp.min x3 x9)))))) (fp.div RNE (fp.abs (fp.abs (fp.div RNE (fp.sqrt RNE x9) (fp.abs (fp.min x4 x3))))) (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.add RNE x8 x3) (fp.div RNE x8 (fp.div RNE x7 x8))) (fp.neg (fp.add RNE (fp.sub RNE x6 x3) (fp.div RNE x6 x7)))) (fp.div RNE (fp.sub RNE (fp.div RNE x7 x9) (fp.sqrt RNE x1)) (fp.min (fp.sub RNE x1 x4) (fp.max x8 x7)))))))(check-sat)