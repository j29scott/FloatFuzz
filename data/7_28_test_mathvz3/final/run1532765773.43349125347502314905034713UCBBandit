;  time  = {'z3': 186.287, 'mathsat': 28.78344750404358}
;  terms = 57
;  score = 157.50355249595643
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.sqrt RNE (fp.add RNE (fp.abs (fp.sqrt RNE x2)) (fp.roundToIntegral RNE (fp.abs x1)))) (fp.sqrt RNE (fp.add RNE (fp.neg (fp.abs x4)) (fp.max (fp.sqrt RNE x7) (fp.sqrt RNE x5))))) (fp.max (fp.mul RNE (fp.div RNE (fp.abs (fp.add RNE x1 x4)) (fp.abs (fp.abs x3))) (fp.sub RNE (fp.neg (fp.div RNE x8 x4)) (fp.mul RNE (fp.max x8 x3) (fp.abs x6)))) (fp.mul RNE (fp.mul RNE (fp.sub RNE (fp.neg x2) (fp.abs x4)) (fp.abs (fp.roundToIntegral RNE x0))) (fp.neg (fp.max (fp.sqrt RNE x7) (fp.sqrt RNE x0)))))))(check-sat)