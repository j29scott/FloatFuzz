;  time  = {'z3': 72.247, 'mathsat': 1.8316872119903564}
;  terms = 68
;  score = 70.41531278800964
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.add RNE (fp.abs (fp.max (fp.sub RNE (fp.abs x8) (fp.abs x6)) (fp.sqrt RNE (fp.mul RNE x0 x7)))) (fp.div RNE (fp.max (fp.max (fp.sqrt RNE x5) (fp.mul RNE x3 x3)) (fp.max (fp.sub RNE x1 x0) (fp.neg x4))) (fp.roundToIntegral RNE (fp.add RNE (fp.min x5 x3) (fp.roundToIntegral RNE x9))))) (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE (fp.sqrt RNE x1) (fp.min x7 x5)) (fp.mul RNE (fp.mul RNE x8 x4) (fp.div RNE x1 x2)))) (fp.min (fp.min (fp.abs (fp.sub RNE x5 x8)) (fp.sqrt RNE (fp.max x9 x2))) (fp.sub RNE (fp.abs (fp.neg x2)) (fp.abs (fp.add RNE x5 x4)))))))(check-sat)