;  time  = {'mathsat': 90.48784303665161, 'z3': 353.486}
;  terms = 72
;  score = 262.9981569633484
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.sqrt RNE (fp.mul RNE (fp.add RNE (fp.mul RNE x2 x7) (fp.add RNE x9 x2)) (fp.mul RNE (fp.roundToIntegral RNE x1) (fp.min x5 x2)))) (fp.max (fp.sub RNE (fp.mul RNE (fp.min x0 x4) (fp.abs x2)) (fp.add RNE (fp.div RNE x9 x8) (fp.abs x7))) (fp.add RNE (fp.mul RNE (fp.roundToIntegral RNE x4) (fp.div RNE x6 x0)) (fp.sqrt RNE (fp.abs x8))))) (fp.mul RNE (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE (fp.mul RNE x9 x0) (fp.abs x1)) (fp.max (fp.add RNE x7 x7) (fp.sqrt RNE x5)))) (fp.mul RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.min x9 x2) (fp.max x9 x5))) (fp.sqrt RNE (fp.sub RNE (fp.max x4 x7) (fp.abs x3)))))))(check-sat)