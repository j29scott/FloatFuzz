;  time  = {'z3': 314.12, 'mathsat': 3.0666308403015137}
;  terms = 96
;  score = 311.0533691596985
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.add RNE (fp.sqrt RNE (fp.sub RNE (fp.add RNE x8 x7) (fp.sub RNE x2 x9))) (fp.max (fp.mul RNE (fp.min x5 x1) (fp.neg x0)) (fp.div RNE (fp.neg x3) (fp.div RNE x2 x4)))) (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.sqrt RNE x6) (fp.roundToIntegral RNE x5)) (fp.sub RNE (fp.add RNE x1 x3) (fp.min x3 x6))))) (fp.max (fp.div RNE (fp.max (fp.sub RNE (fp.mul RNE x0 x1) (fp.min (fp.sub RNE x0 x7) (fp.min x0 x0))) (fp.roundToIntegral RNE (fp.sqrt RNE x3))) (fp.mul RNE (fp.add RNE (fp.roundToIntegral RNE x3) (fp.max x0 x3)) (fp.sqrt RNE (fp.roundToIntegral RNE x4)))) (fp.min (fp.abs (fp.neg (fp.sqrt RNE (fp.add RNE x9 x3)))) (fp.div RNE (fp.min (fp.roundToIntegral RNE (fp.add RNE x6 x9)) (fp.neg (fp.max x5 x4))) (fp.max (fp.mul RNE (fp.mul RNE x6 x8) (fp.neg x2)) (fp.div RNE (fp.mul RNE x4 x2) (fp.min x0 x9))))))))(check-sat)