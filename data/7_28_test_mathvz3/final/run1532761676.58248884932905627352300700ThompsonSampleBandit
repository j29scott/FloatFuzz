;  time  = {'mathsat': 63.85029101371765, 'z3': 592.631}
;  terms = 140
;  score = 528.7807089862823
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.min (fp.mul RNE (fp.add RNE (fp.min (fp.div RNE x5 (fp.mul RNE x9 x3)) (fp.min (fp.min x4 x2) (fp.min x9 x8))) (fp.neg (fp.sub RNE (fp.add RNE x2 x7) (fp.min x4 x3)))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.min x9 x7)))) (fp.add RNE (fp.neg (fp.mul RNE (fp.abs x1) (fp.sub RNE (fp.min x0 x4) (fp.min x5 x0)))) (fp.add RNE (fp.div RNE (fp.min (fp.add RNE x5 x5) (fp.mul RNE x0 x0)) (fp.add RNE (fp.min x5 x0) (fp.sub RNE x7 x5))) (fp.add RNE (fp.sub RNE (fp.div RNE x4 x5) (fp.add RNE x1 x8)) (fp.add RNE (fp.div RNE x5 x9) (fp.max x1 x7)))))) (fp.min (fp.add RNE (fp.add RNE (fp.min (fp.add RNE x3 x7) (fp.mul RNE x2 (fp.add RNE x5 x1))) (fp.min (fp.sqrt RNE x2) (fp.div RNE x9 x6))) (fp.min (fp.div RNE (fp.div RNE (fp.min x7 x8) (fp.add RNE x8 x8)) (fp.abs (fp.max x9 x1))) (fp.min (fp.min (fp.sqrt RNE x3) (fp.roundToIntegral RNE x7)) (fp.sub RNE (fp.div RNE x6 x2) (fp.min x1 x4))))) (fp.add RNE (fp.neg (fp.mul RNE (fp.add RNE x8 x9) (fp.add RNE x8 (fp.min x8 x2)))) (fp.div RNE (fp.neg (fp.div RNE x9 x7)) (fp.mul RNE (fp.min x8 x2) (fp.div RNE x2 x4)))))))(check-sat)