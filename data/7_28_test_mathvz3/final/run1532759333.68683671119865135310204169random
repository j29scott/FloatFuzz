;  time  = {'z3': 363.515, 'mathsat': 10.201459169387817}
;  terms = 75
;  score = 353.31354083061217
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.min (fp.div RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.roundToIntegral RNE x7) (fp.min x5 x4))) (fp.abs (fp.div RNE (fp.mul RNE x4 x4) (fp.neg x4)))) (fp.sqrt RNE (fp.sqrt RNE (fp.max (fp.neg x1) (fp.sub RNE x2 x3))))) (fp.min (fp.min (fp.div RNE (fp.mul RNE (fp.add RNE x4 x6) (fp.max x6 (fp.roundToIntegral RNE x2))) (fp.max (fp.add RNE x7 x4) (fp.sub RNE x1 x7))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.neg x6)) (fp.add RNE (fp.div RNE (fp.div RNE x1 x8) (fp.mul RNE x2 x6)) (fp.neg (fp.roundToIntegral RNE x3))))) (fp.abs (fp.min (fp.neg (fp.abs (fp.sub RNE x7 x7))) (fp.abs (fp.sub RNE (fp.mul RNE x2 x9) (fp.div RNE x8 x2))))))))(check-sat)