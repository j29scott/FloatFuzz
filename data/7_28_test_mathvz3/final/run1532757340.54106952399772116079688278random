;  time  = {'z3': 425.522, 'mathsat': 92.86828541755676}
;  terms = 116
;  score = 332.65371458244323
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.add RNE (fp.sqrt RNE (fp.neg (fp.min x0 x5))) (fp.neg (fp.max (fp.div RNE x9 x3) (fp.mul RNE x9 x1)))) (fp.sub RNE (fp.min (fp.add RNE (fp.sub RNE (fp.max x9 x9) (fp.neg x9)) (fp.add RNE (fp.mul RNE x7 x0) (fp.sqrt RNE x0))) (fp.roundToIntegral RNE (fp.mul RNE (fp.sub RNE x1 x3) (fp.neg x7)))) (fp.add RNE (fp.sub RNE (fp.max (fp.mul RNE x9 x5) (fp.abs x2)) (fp.abs (fp.sqrt RNE x2))) (fp.neg (fp.sub RNE (fp.max x9 x4) (fp.neg x0)))))) (fp.add RNE (fp.min (fp.max (fp.max (fp.sqrt RNE x6) (fp.neg x2)) (fp.add RNE (fp.roundToIntegral RNE x7) (fp.div RNE x9 (fp.sub RNE x1 x6)))) (fp.neg (fp.min (fp.min x5 x3) (fp.max x9 x6)))) (fp.max (fp.neg (fp.roundToIntegral RNE (fp.neg (fp.mul RNE x1 x1)))) (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.max x5 x6) (fp.neg x9)) (fp.max (fp.min x2 x2) (fp.add RNE x2 x7))) (fp.min (fp.div RNE (fp.max x6 x5) (fp.abs x8)) (fp.mul RNE (fp.max x2 x8) (fp.sub RNE x0 x7))))))))(check-sat)