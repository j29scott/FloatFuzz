;  time  = {'mathsat': 5.949934720993042, 'z3': 458.938}
;  terms = 72
;  score = 452.98806527900695
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.sub RNE (fp.max (fp.sub RNE (fp.sub RNE (fp.div RNE x7 (fp.min x2 x9)) (fp.abs (fp.min x0 x3))) (fp.div RNE (fp.sqrt RNE x1) (fp.neg x1))) (fp.div RNE (fp.div RNE (fp.mul RNE x4 x6) (fp.div RNE (fp.roundToIntegral RNE x6) (fp.div RNE x4 x8))) (fp.abs (fp.sub RNE x5 x0)))) (fp.sub RNE (fp.min (fp.sub RNE (fp.min (fp.sqrt RNE x4) (fp.min x2 x5)) (fp.sqrt RNE (fp.sqrt RNE x5))) (fp.sub RNE (fp.add RNE (fp.add RNE x4 x4) (fp.mul RNE x2 x8)) (fp.mul RNE (fp.sqrt RNE x1) (fp.roundToIntegral RNE x9)))) (fp.div RNE (fp.abs (fp.abs (fp.mul RNE x7 x3))) (fp.sqrt RNE (fp.mul RNE (fp.sqrt RNE x7) (fp.sub RNE x2 x3))))))))(check-sat)