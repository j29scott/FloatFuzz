;  time  = {'mathsat': 3.1685233116149902, 'z3': 216.178}
;  terms = 67
;  score = 213.009476688385
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE (fp.sub RNE (fp.sqrt RNE x8) (fp.div RNE x4 x1)) (fp.sub RNE (fp.mul RNE x9 x4) (fp.roundToIntegral RNE x7)))) (fp.abs (fp.max (fp.min (fp.roundToIntegral RNE x6) (fp.roundToIntegral RNE x3)) (fp.div RNE (fp.neg x2) (fp.div RNE x0 x9))))) (fp.sub RNE (fp.sqrt RNE (fp.div RNE (fp.min (fp.mul RNE x5 x9) (fp.mul RNE x5 x2)) (fp.abs (fp.max x6 x3)))) (fp.min (fp.sub RNE (fp.abs (fp.min x5 x1)) (fp.roundToIntegral RNE (fp.div RNE x2 x1))) (fp.sub RNE (fp.add RNE (fp.max x8 x8) (fp.neg x7)) (fp.max (fp.sub RNE x4 x2) (fp.add RNE x1 x3)))))))(check-sat)