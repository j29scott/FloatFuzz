;  time  = {'z3': 342.775, 'mathsat': 37.643455266952515}
;  terms = 68
;  score = 305.13154473304746
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.div RNE (fp.div RNE (fp.min (fp.max x8 x9) (fp.mul RNE x5 (fp.mul RNE x3 x8))) (fp.div RNE (fp.sqrt RNE x1) (fp.sqrt RNE x0))) (fp.sqrt RNE (fp.mul RNE (fp.max x3 x0) (fp.sub RNE x0 x5)))) (fp.max (fp.max (fp.mul RNE (fp.add RNE x7 (fp.sub RNE x4 x2)) (fp.div RNE x5 x6)) (fp.sqrt RNE (fp.neg x7))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x0 x5) (fp.neg x6)) (fp.max (fp.roundToIntegral RNE x5) (fp.mul RNE x0 x4))))) (fp.add RNE (fp.neg (fp.sqrt RNE (fp.max (fp.max x1 x9) (fp.add RNE x1 x4)))) (fp.abs (fp.roundToIntegral RNE (fp.abs (fp.roundToIntegral RNE x6)))))))(check-sat)