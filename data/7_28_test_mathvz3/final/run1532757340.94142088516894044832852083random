;  time  = {'z3': 191.175, 'mathsat': 24.123740911483765}
;  terms = 75
;  score = 167.05125908851625
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.abs (fp.sub RNE (fp.roundToIntegral RNE (fp.add RNE (fp.abs x9) (fp.min x3 x7))) (fp.sub RNE (fp.neg (fp.add RNE (fp.abs x6) (fp.mul RNE x5 x3))) (fp.div RNE (fp.min (fp.min x6 x7) (fp.add RNE x2 x5)) (fp.neg (fp.div RNE x0 x9)))))) (fp.mul RNE (fp.sub RNE (fp.abs (fp.mul RNE (fp.abs x7) (fp.sqrt RNE x1))) (fp.mul RNE (fp.sub RNE (fp.neg x8) (fp.sqrt RNE x4)) (fp.div RNE (fp.sqrt RNE x9) (fp.div RNE x3 x4)))) (fp.max (fp.max (fp.abs (fp.roundToIntegral RNE x1)) (fp.sqrt RNE (fp.min x3 x8))) (fp.add RNE (fp.sqrt RNE (fp.abs (fp.sqrt RNE x8))) (fp.mul RNE (fp.roundToIntegral RNE (fp.min x3 x8)) (fp.add RNE (fp.roundToIntegral RNE x3) (fp.div RNE x0 x7))))))))(check-sat)