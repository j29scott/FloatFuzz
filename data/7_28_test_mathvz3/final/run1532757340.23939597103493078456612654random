;  time  = {'mathsat': 2.0776944160461426, 'z3': 480.49}
;  terms = 78
;  score = 478.41230558395387
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.neg (fp.max (fp.add RNE (fp.add RNE (fp.abs x9) (fp.min x1 x9)) (fp.abs (fp.sqrt RNE x8))) (fp.max (fp.sub RNE (fp.neg x5) (fp.roundToIntegral RNE x8)) (fp.add RNE (fp.mul RNE x3 x3) (fp.neg x2))))) (fp.div RNE (fp.min (fp.sqrt RNE (fp.div RNE (fp.add RNE x1 x3) (fp.max x5 x7))) (fp.sub RNE (fp.add RNE (fp.abs x6) (fp.sub RNE x4 x6)) (fp.mul RNE (fp.min x7 (fp.add RNE x7 x0)) (fp.mul RNE x3 x4)))) (fp.max (fp.sub RNE (fp.sqrt RNE (fp.sub RNE x8 x4)) (fp.add RNE (fp.roundToIntegral RNE (fp.abs x6)) (fp.max (fp.sqrt RNE x3) (fp.sqrt RNE x3)))) (fp.neg (fp.div RNE (fp.max x2 x7) (fp.div RNE (fp.mul RNE x6 x7) (fp.max x7 x9))))))))(check-sat)