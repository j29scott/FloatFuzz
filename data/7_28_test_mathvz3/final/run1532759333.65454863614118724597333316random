;  time  = {'z3': 204.029, 'mathsat': 6.609711170196533}
;  terms = 78
;  score = 197.41928882980346
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.mul RNE (fp.min (fp.roundToIntegral RNE (fp.min (fp.min x7 x9) (fp.max x8 x0))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x1)))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE (fp.min (fp.max x8 x9) (fp.neg x4)) (fp.abs (fp.abs x9))) (fp.div RNE (fp.add RNE (fp.mul RNE x9 x0) (fp.add RNE x2 x6)) (fp.abs (fp.add RNE x0 x9)))))) (fp.div RNE (fp.mul RNE (fp.sub RNE (fp.min (fp.add RNE x2 x8) (fp.abs x9)) (fp.roundToIntegral RNE (fp.sqrt RNE x1))) (fp.mul RNE (fp.abs (fp.max x7 x8)) (fp.add RNE (fp.div RNE x4 x8) (fp.max x7 x2)))) (fp.div RNE (fp.roundToIntegral RNE (fp.max (fp.roundToIntegral RNE x5) (fp.min x1 x3))) (fp.sqrt RNE (fp.add RNE (fp.sqrt RNE x5) (fp.min x6 x5)))))))(check-sat)