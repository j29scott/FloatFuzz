;  time  = {'mathsat': 2.699061393737793, 'z3': 218.661}
;  terms = 84
;  score = 215.9619386062622
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.sub RNE (fp.sqrt RNE x2) (fp.sqrt RNE x0)) (fp.div RNE (fp.mul RNE x2 x4) (fp.min x0 x7))) (fp.add RNE (fp.neg (fp.sub RNE x5 x0)) (fp.add RNE (fp.mul RNE x2 x8) (fp.max x7 x9)))) (fp.max (fp.sub RNE (fp.min (fp.div RNE x0 x6) (fp.min x9 x7)) (fp.neg (fp.sqrt RNE x9))) (fp.div RNE (fp.mul RNE (fp.sub RNE x5 x3) (fp.mul RNE x4 x4)) (fp.abs (fp.add RNE x8 x8))))) (fp.max (fp.roundToIntegral RNE (fp.abs (fp.div RNE (fp.min x9 x6) (fp.sub RNE x6 x0)))) (fp.sub RNE (fp.min (fp.neg (fp.roundToIntegral RNE x9)) (fp.sub RNE (fp.min x7 x5) (fp.neg x5))) (fp.min (fp.div RNE (fp.min x5 x0) (fp.roundToIntegral RNE x8)) (fp.roundToIntegral RNE (fp.sub RNE x3 x8)))))))(check-sat)