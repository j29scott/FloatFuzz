;  time  = {'z3': 239.23, 'mathsat': 37.61139106750488}
;  terms = 71
;  score = 201.6186089324951
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.abs (fp.sub RNE (fp.div RNE x1 x9) (fp.div RNE x9 x5))) (fp.sub RNE (fp.add RNE (fp.div RNE x9 x9) (fp.sub RNE (fp.add RNE x6 x8) (fp.max x9 x5))) (fp.add RNE (fp.mul RNE x8 x2) (fp.mul RNE x7 x3)))) (fp.div RNE (fp.min (fp.abs (fp.neg (fp.abs x4))) (fp.add RNE (fp.abs (fp.add RNE x9 x9)) (fp.roundToIntegral RNE (fp.max x0 x4)))) (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.max x0 x7) (fp.div RNE x9 x7)) (fp.sub RNE (fp.roundToIntegral RNE x6) (fp.neg x7)))))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.max (fp.abs (fp.abs x4)) (fp.div RNE (fp.abs x6) (fp.min x9 x8)))))))(check-sat)