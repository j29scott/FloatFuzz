;  time  = {'mathsat': 2.759661912918091, 'z3': 500.896}
;  terms = 72
;  score = 498.1363380870819
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.add RNE (fp.mul RNE (fp.sqrt RNE (fp.min x8 x0)) (fp.abs (fp.abs x5))) (fp.mul RNE (fp.abs (fp.abs x2)) (fp.neg (fp.sqrt RNE x4)))) (fp.add RNE (fp.div RNE (fp.abs (fp.abs x3)) (fp.sub RNE (fp.roundToIntegral RNE x3) (fp.sub RNE x2 x0))) (fp.max (fp.neg (fp.mul RNE x3 x6)) (fp.add RNE (fp.div RNE x6 x1) (fp.neg x0))))) (fp.add RNE (fp.min (fp.abs (fp.roundToIntegral RNE (fp.neg x0))) (fp.div RNE (fp.mul RNE (fp.max x9 x2) (fp.abs x2)) (fp.abs (fp.max x8 x2)))) (fp.div RNE (fp.neg (fp.sub RNE (fp.max x6 x5) (fp.div RNE x9 x2))) (fp.abs (fp.mul RNE (fp.abs x7) (fp.sqrt RNE x0)))))))(check-sat)