;  time  = {'z3': 356.449, 'mathsat': 3.4597890377044678}
;  terms = 72
;  score = 352.98921096229554
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x5 x9) (fp.mul RNE x3 x0)) (fp.sub RNE (fp.max (fp.add RNE x1 x1) (fp.div RNE x4 x8)) (fp.neg (fp.roundToIntegral RNE x7)))) (fp.max (fp.neg (fp.neg (fp.add RNE x6 x5))) (fp.roundToIntegral RNE (fp.min (fp.neg x3) (fp.add RNE x5 x7))))) (fp.div RNE (fp.max (fp.sqrt RNE (fp.roundToIntegral RNE x1)) (fp.add RNE (fp.roundToIntegral RNE x1) (fp.min x1 x2))) (fp.div RNE (fp.neg (fp.min x8 x4)) (fp.div RNE (fp.add RNE x2 x9) (fp.max (fp.div RNE x3 x8) (fp.sqrt RNE x3)))))) (fp.roundToIntegral RNE (fp.abs (fp.min (fp.abs (fp.mul RNE x5 x4)) (fp.roundToIntegral RNE (fp.min x1 x3)))))))(check-sat)