;  time  = {'z3': 392.546, 'mathsat': 3.559051275253296}
;  terms = 79
;  score = 388.9869487247467
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.min (fp.sqrt RNE (fp.div RNE (fp.add RNE x2 x7) (fp.max (fp.abs x7) (fp.mul RNE x1 x1)))) (fp.add RNE (fp.sub RNE (fp.sub RNE x5 x2) (fp.min x5 x0)) (fp.neg (fp.sqrt RNE x6)))) (fp.roundToIntegral RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE x1 x7) (fp.min x4 x2)) (fp.div RNE (fp.min x6 (fp.roundToIntegral RNE x4)) (fp.sub RNE (fp.div RNE x7 x2) (fp.sqrt RNE x9)))))) (fp.abs (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.mul RNE x6 x3) (fp.abs x4)) (fp.sub RNE (fp.roundToIntegral RNE (fp.div RNE x8 x6)) (fp.mul RNE (fp.min x7 x8) (fp.add RNE x6 x1)))) (fp.mul RNE (fp.max (fp.sqrt RNE x4) (fp.min x1 x4)) (fp.max (fp.roundToIntegral RNE x7) (fp.sub RNE x0 x6)))))))(check-sat)