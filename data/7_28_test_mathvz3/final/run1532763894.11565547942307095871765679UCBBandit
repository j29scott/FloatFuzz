;  time  = {'mathsat': 2.455204486846924, 'z3': 260.18}
;  terms = 74
;  score = 257.7247955131531
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.add RNE (fp.neg (fp.min (fp.abs x3) (fp.neg x2))) (fp.sub RNE (fp.div RNE (fp.mul RNE x5 x0) (fp.min x5 x3)) (fp.add RNE (fp.add RNE x2 x4) (fp.div RNE x8 x0)))) (fp.max (fp.mul RNE (fp.abs (fp.max x0 x3)) (fp.max (fp.sqrt RNE x9) (fp.max x2 x0))) (fp.neg (fp.max (fp.abs x0) (fp.abs x5))))) (fp.div RNE (fp.sub RNE (fp.add RNE (fp.add RNE (fp.mul RNE x3 x8) (fp.max x4 x2)) (fp.max (fp.abs x8) (fp.sqrt RNE x8))) (fp.add RNE (fp.sqrt RNE (fp.mul RNE x0 x3)) (fp.roundToIntegral RNE (fp.sqrt RNE x0)))) (fp.roundToIntegral RNE (fp.add RNE (fp.sqrt RNE (fp.neg x2)) (fp.abs (fp.div RNE x8 x7)))))))(check-sat)