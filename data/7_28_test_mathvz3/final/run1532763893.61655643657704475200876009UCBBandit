;  time  = {'mathsat': 1.3539295196533203, 'z3': 103.411}
;  terms = 73
;  score = 102.05707048034668
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.roundToIntegral RNE (fp.min (fp.add RNE (fp.min x5 x5) (fp.min x1 x8)) (fp.sub RNE (fp.abs x3) (fp.sub RNE x9 x2)))) (fp.sub RNE (fp.sqrt RNE (fp.abs (fp.abs x0))) (fp.mul RNE (fp.min (fp.abs x0) (fp.mul RNE x8 x6)) (fp.abs (fp.abs x8))))) (fp.sub RNE (fp.mul RNE (fp.abs (fp.abs (fp.max x7 x2))) (fp.add RNE (fp.sub RNE (fp.max x6 x5) (fp.mul RNE x0 x7)) (fp.max (fp.max x4 x4) (fp.max x1 x0)))) (fp.mul RNE (fp.max (fp.mul RNE (fp.max x3 x6) (fp.mul RNE x4 x1)) (fp.roundToIntegral RNE (fp.max x7 x5))) (fp.neg (fp.div RNE (fp.roundToIntegral RNE x4) (fp.sqrt RNE x1)))))))(check-sat)