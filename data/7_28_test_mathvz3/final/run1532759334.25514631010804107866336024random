;  time  = {'mathsat': 5.417294502258301, 'z3': 194.07}
;  terms = 80
;  score = 188.6527054977417
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.mul RNE (fp.max (fp.div RNE (fp.abs (fp.neg x8)) (fp.neg (fp.roundToIntegral RNE x7))) (fp.min (fp.mul RNE (fp.add RNE x6 x3) (fp.neg x8)) (fp.neg (fp.sub RNE x1 x4)))) (fp.sub RNE (fp.mul RNE (fp.neg (fp.sub RNE x2 x1)) (fp.min (fp.abs x2) (fp.mul RNE x1 x3))) (fp.max (fp.roundToIntegral RNE (fp.mul RNE x1 x4)) (fp.max (fp.sqrt RNE x0) (fp.neg x6))))) (fp.mul RNE (fp.sqrt RNE (fp.max (fp.div RNE (fp.add RNE x7 x0) (fp.abs x6)) (fp.mul RNE (fp.abs x8) (fp.roundToIntegral RNE x8)))) (fp.min (fp.sub RNE (fp.min (fp.sub RNE x2 x7) (fp.mul RNE x6 x3)) (fp.div RNE (fp.add RNE x3 x0) (fp.sqrt RNE x5))) (fp.min (fp.abs (fp.neg x6)) (fp.roundToIntegral RNE (fp.div RNE x8 x9)))))))(check-sat)