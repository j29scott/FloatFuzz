;  time  = {'z3': 254.695, 'mathsat': 2.5063273906707764}
;  terms = 68
;  score = 252.18867260932922
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.neg (fp.abs (fp.mul RNE (fp.max x2 x0) (fp.div RNE x7 x8)))) (fp.min (fp.sqrt RNE (fp.roundToIntegral RNE (fp.neg x6))) (fp.mul RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.neg x4)) (fp.sqrt RNE (fp.roundToIntegral RNE x3))) (fp.roundToIntegral RNE (fp.max (fp.div RNE x2 x4) (fp.sub RNE x8 x4)))))) (fp.sub RNE (fp.sqrt RNE (fp.max (fp.abs (fp.mul RNE x6 x4)) (fp.max (fp.min x1 x6) (fp.mul RNE x6 x9)))) (fp.div RNE (fp.roundToIntegral RNE (fp.abs (fp.roundToIntegral RNE (fp.mul RNE x3 x1)))) (fp.sqrt RNE (fp.add RNE (fp.max (fp.add RNE x7 x2) (fp.min x8 x5)) (fp.max (fp.sqrt RNE x3) (fp.div RNE x8 x7))))))))(check-sat)