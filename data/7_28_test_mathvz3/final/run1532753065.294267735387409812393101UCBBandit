;  time  = {'z3': 158.209, 'mathsat': 7.088399410247803}
;  terms = 80
;  score = 151.1206005897522
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.sqrt RNE (fp.min (fp.sub RNE (fp.min x4 x9) (fp.min x2 x5)) (fp.max (fp.sub RNE x3 x3) (fp.roundToIntegral RNE x6)))) (fp.max (fp.mul RNE (fp.div RNE (fp.max x6 x6) (fp.abs x8)) (fp.sqrt RNE (fp.mul RNE x2 x4))) (fp.mul RNE (fp.sqrt RNE (fp.sqrt RNE x9)) (fp.sub RNE (fp.abs x4) (fp.max x7 x0))))) (fp.add RNE (fp.min (fp.mul RNE (fp.mul RNE (fp.min x4 x6) (fp.div RNE x0 x8)) (fp.abs (fp.sub RNE x2 x9))) (fp.neg (fp.add RNE (fp.abs x4) (fp.abs x7)))) (fp.max (fp.sub RNE (fp.sqrt RNE (fp.mul RNE x4 x3)) (fp.mul RNE (fp.roundToIntegral RNE x4) (fp.sqrt RNE x8))) (fp.sub RNE (fp.max (fp.abs x1) (fp.sqrt RNE x7)) (fp.neg (fp.div RNE x5 x5)))))))(check-sat)