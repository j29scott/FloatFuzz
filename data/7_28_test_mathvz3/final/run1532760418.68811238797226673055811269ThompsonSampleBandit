;  time  = {'mathsat': 17.4528865814209, 'z3': 373.911}
;  terms = 139
;  score = 356.4581134185791
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.sub RNE (fp.max (fp.mul RNE (fp.sub RNE x8 x4) (fp.div RNE (fp.mul RNE x9 x1) (fp.sub RNE x0 x7))) (fp.mul RNE (fp.max x3 x8) (fp.roundToIntegral RNE x0))) (fp.roundToIntegral RNE (fp.min (fp.max x2 x8) (fp.neg x5)))) (fp.add RNE (fp.max (fp.add RNE (fp.max x4 x2) (fp.add RNE (fp.div RNE x0 x4) (fp.max x5 x3))) (fp.div RNE (fp.max x8 (fp.min x1 x3)) (fp.div RNE x7 x4))) (fp.max (fp.div RNE (fp.sub RNE x1 x7) (fp.add RNE x3 x5)) (fp.add RNE (fp.div RNE (fp.add RNE x2 x7) (fp.div RNE x1 x9)) (fp.neg (fp.mul RNE x7 x4)))))) (fp.max (fp.div RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.max x8 x5) (fp.max (fp.div RNE x4 x5) (fp.sub RNE x1 x1)))) (fp.neg (fp.neg (fp.roundToIntegral RNE x4)))) (fp.max (fp.min (fp.add RNE (fp.add RNE (fp.div RNE x8 x4) (fp.mul RNE x5 x0)) (fp.min (fp.sub RNE x9 x0) (fp.sub RNE x7 x8))) (fp.max (fp.roundToIntegral RNE (fp.abs x6)) (fp.sub RNE (fp.neg x0) (fp.div RNE x8 x0)))) (fp.add RNE (fp.max (fp.sub RNE (fp.max x3 x9) (fp.mul RNE x5 x5)) (fp.max (fp.add RNE x7 x8) (fp.max x4 x3))) (fp.abs (fp.max (fp.max x2 x2) (fp.div RNE x2 x0))))))))(check-sat)