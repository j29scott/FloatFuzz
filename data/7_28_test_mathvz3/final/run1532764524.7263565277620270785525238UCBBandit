;  time  = {'z3': 358.136, 'mathsat': 4.932588815689087}
;  terms = 102
;  score = 353.20341118431094
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.sub RNE (fp.div RNE x5 x8) (fp.min x3 x8)) (fp.mul RNE (fp.min x4 x4) (fp.sub RNE x3 x2))) (fp.div RNE (fp.sub RNE (fp.min x9 x4) (fp.add RNE x8 x3)) (fp.neg (fp.mul RNE x7 x1)))) (fp.add RNE (fp.add RNE (fp.div RNE (fp.add RNE x3 x2) (fp.div RNE x4 x5)) (fp.add RNE (fp.sub RNE x0 x6) (fp.roundToIntegral RNE x5))) (fp.max (fp.sqrt RNE (fp.neg x9)) (fp.add RNE (fp.sqrt RNE x2) (fp.neg x2))))) (fp.sub RNE (fp.min (fp.min (fp.mul RNE (fp.max x0 x8) (fp.abs x5)) (fp.max (fp.add RNE x7 x9) (fp.sqrt RNE x7))) (fp.roundToIntegral RNE (fp.div RNE (fp.roundToIntegral RNE x5) (fp.div RNE x8 x8)))) (fp.add RNE (fp.mul RNE (fp.add RNE (fp.add RNE x2 x5) (fp.mul RNE x7 x8)) (fp.sub RNE (fp.mul RNE x9 x0) (fp.neg x7))) (fp.div RNE (fp.div RNE (fp.div RNE x4 x5) (fp.add RNE x9 x5)) (fp.abs (fp.neg x0)))))))(check-sat)