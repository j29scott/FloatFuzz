;  time  = {'mathsat': 2.8867571353912354, 'z3': 144.405}
;  terms = 81
;  score = 141.51824286460877
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.min (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.div RNE x8 x8) (fp.min x4 x2)) (fp.mul RNE (fp.max x0 x4) (fp.sqrt RNE x7))) (fp.abs (fp.sqrt RNE (fp.sqrt RNE x6)))) (fp.add RNE (fp.roundToIntegral RNE (fp.min (fp.add RNE x6 x8) (fp.mul RNE x5 x9))) (fp.mul RNE (fp.roundToIntegral RNE (fp.mul RNE x5 x0)) (fp.abs (fp.sqrt RNE x3))))) (fp.div RNE (fp.add RNE (fp.neg (fp.max (fp.neg x7) (fp.max x0 x0))) (fp.div RNE (fp.min (fp.min x6 x6) (fp.add RNE x7 x9)) (fp.max (fp.div RNE x6 x1) (fp.sqrt RNE x5)))) (fp.max (fp.neg (fp.sqrt RNE (fp.roundToIntegral RNE x6))) (fp.sub RNE (fp.div RNE (fp.add RNE x9 x6) (fp.div RNE x7 x3)) (fp.add RNE (fp.min x8 x2) (fp.mul RNE x2 x9)))))))(check-sat)