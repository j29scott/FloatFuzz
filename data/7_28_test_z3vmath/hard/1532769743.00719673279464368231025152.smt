;  time  = {'z3': 600}
;  terms = 64
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.min (fp.mul RNE (fp.mul RNE (fp.mul RNE x6 x5) (fp.abs x0)) (fp.abs (fp.sub RNE x8 x6))) (fp.div RNE (fp.mul RNE (fp.mul RNE x8 x5) (fp.abs (fp.mul RNE x5 x2))) (fp.mul RNE (fp.mul RNE x8 x1) (fp.abs x9)))) (fp.sub RNE (fp.max (fp.sqrt RNE (fp.roundToIntegral RNE x2)) (fp.mul RNE (fp.mul RNE x8 x4) (fp.roundToIntegral RNE x1))) (fp.mul RNE (fp.mul RNE (fp.add RNE x0 x2) (fp.neg x8)) (fp.max (fp.neg x7) (fp.div RNE x2 x7))))) (fp.abs (fp.abs (fp.mul RNE (fp.abs (fp.sqrt RNE x3)) (fp.sub RNE (fp.abs x0) (fp.neg x8)))))))(check-sat)