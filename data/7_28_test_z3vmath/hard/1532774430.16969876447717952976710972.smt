;  time  = {'z3': 600}
;  terms = 89
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.min (fp.add RNE (fp.min (fp.div RNE x3 x3) (fp.sub RNE x8 x6)) (fp.sqrt RNE (fp.sub RNE x5 x5))) (fp.min (fp.div RNE (fp.roundToIntegral RNE (fp.min x0 x4)) (fp.mul RNE (fp.sub RNE x2 x3) (fp.add RNE x8 x1))) (fp.add RNE (fp.div RNE (fp.max x4 x4) (fp.div RNE x8 x0)) (fp.div RNE (fp.max x8 x8) (fp.abs x2))))) (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.sqrt RNE x1) (fp.sqrt RNE x0)) (fp.add RNE (fp.div RNE x8 x3) (fp.roundToIntegral RNE x4))))) (fp.min (fp.max (fp.neg (fp.div RNE (fp.min x2 x0) (fp.neg x2))) (fp.sqrt RNE (fp.abs (fp.neg x4)))) (fp.sqrt RNE (fp.add RNE (fp.sub RNE (fp.neg x4) (fp.mul RNE x4 x2)) (fp.sub RNE (fp.mul RNE (fp.div RNE x3 x0) (fp.min x0 x5)) (fp.add RNE (fp.roundToIntegral RNE x9) (fp.roundToIntegral RNE x0))))))))(check-sat)