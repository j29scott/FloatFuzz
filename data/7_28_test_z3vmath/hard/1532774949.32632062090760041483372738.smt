;  time  = {'z3': 583.351}
;  terms = 74
;  score = 583.351
;  stdout= {'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isSubnormal (fp.sub RNE (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x1)) (fp.sub RNE (fp.neg x3) (fp.add RNE x9 x5))) (fp.add RNE (fp.max (fp.div RNE x3 x1) (fp.mul RNE x2 x8)) (fp.max (fp.add RNE x6 x3) (fp.roundToIntegral RNE x2)))) (fp.sub RNE (fp.mul RNE (fp.min (fp.roundToIntegral RNE x8) (fp.sub RNE x8 x7)) (fp.div RNE (fp.sub RNE x9 x7) (fp.div RNE x5 (fp.neg x2)))) (fp.mul RNE (fp.max (fp.sub RNE (fp.min x8 x7) (fp.max x4 x6)) (fp.add RNE (fp.abs x0) (fp.mul RNE x9 x9))) (fp.div RNE (fp.add RNE (fp.add RNE x6 x6) (fp.min x5 x0)) (fp.max (fp.sqrt RNE x1) (fp.add RNE x7 x6))))))))(check-sat)