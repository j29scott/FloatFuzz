;  time  = {'z3': 600}
;  terms = 69
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.sqrt RNE (fp.min (fp.sub RNE x4 x6) (fp.div RNE x3 x6))) (fp.div RNE (fp.div RNE (fp.add RNE x0 x1) (fp.neg x0)) (fp.div RNE (fp.abs x7) (fp.min x1 x2)))) (fp.neg (fp.add RNE (fp.div RNE (fp.sqrt RNE x2) (fp.max x8 x1)) (fp.div RNE (fp.sub RNE x1 x5) (fp.neg (fp.sqrt RNE x7)))))) (fp.max (fp.roundToIntegral RNE (fp.mul RNE (fp.min (fp.min x7 x5) (fp.mul RNE x7 x4)) (fp.div RNE (fp.max x3 x1) (fp.mul RNE x1 x9)))) (fp.sqrt RNE (fp.div RNE (fp.add RNE (fp.min x5 x9) (fp.mul RNE x9 x0)) (fp.neg (fp.mul RNE x1 x9)))))))(check-sat)