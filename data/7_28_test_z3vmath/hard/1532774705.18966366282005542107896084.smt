;  time  = {'z3': 592.836}
;  terms = 128
;  score = 592.836
;  stdout= {'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.min (fp.add RNE (fp.add RNE (fp.mul RNE x8 x4) (fp.sub RNE x5 x8)) (fp.div RNE (fp.sub RNE x4 (fp.div RNE x9 x0)) (fp.sub RNE x7 (fp.div RNE x3 x5)))) (fp.add RNE (fp.mul RNE (fp.sub RNE x7 (fp.sub RNE x4 x8)) (fp.roundToIntegral RNE x6)) (fp.sub RNE (fp.roundToIntegral RNE x2) (fp.sqrt RNE x5)))) (fp.min (fp.min (fp.div RNE (fp.neg (fp.sub RNE x7 x1)) (fp.max (fp.mul RNE x1 x2) (fp.roundToIntegral RNE x1))) (fp.mul RNE (fp.max (fp.neg x6) (fp.sub RNE x0 x8)) (fp.div RNE (fp.max x5 x9) (fp.sub RNE x5 x9)))) (fp.neg (fp.div RNE (fp.mul RNE (fp.neg x1) (fp.min x5 x3)) (fp.add RNE (fp.add RNE x1 x6) (fp.abs x8)))))) (fp.div RNE (fp.max (fp.sub RNE (fp.div RNE (fp.sub RNE x5 x2) (fp.mul RNE (fp.div RNE x0 x1) (fp.roundToIntegral RNE x7))) (fp.add RNE (fp.neg x5) (fp.sub RNE x5 x3))) (fp.neg (fp.add RNE (fp.max x0 x2) (fp.sub RNE x1 x1)))) (fp.div RNE (fp.abs (fp.add RNE (fp.div RNE x6 x4) (fp.max x5 x2))) (fp.add RNE (fp.min (fp.div RNE x7 x1) (fp.min x4 x7)) (fp.div RNE (fp.div RNE x5 x6) (fp.div RNE x1 x7)))))))(check-sat)