;  time  = {'z3': 600}
;  terms = 87
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.max (fp.div RNE (fp.min (fp.mul RNE (fp.neg x3) (fp.roundToIntegral RNE x7)) (fp.add RNE (fp.roundToIntegral RNE x7) (fp.div RNE x6 x8))) (fp.neg (fp.abs (fp.neg x7)))) (fp.div RNE (fp.min (fp.neg (fp.sub RNE x9 x0)) (fp.div RNE (fp.add RNE x3 x6) (fp.min x2 x0))) (fp.div RNE (fp.add RNE (fp.mul RNE x5 x6) (fp.sub RNE x8 x7)) (fp.mul RNE (fp.neg x3) (fp.neg x4))))) (fp.mul RNE (fp.div RNE (fp.neg (fp.add RNE (fp.abs x4) (fp.sqrt RNE x0))) (fp.mul RNE (fp.mul RNE (fp.div RNE x7 x0) (fp.neg x7)) (fp.max (fp.div RNE x1 x9) (fp.mul RNE x3 x9)))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.abs x9) (fp.div RNE x4 x0)) (fp.div RNE (fp.mul RNE x8 x2) (fp.add RNE x1 x5))) (fp.abs (fp.sqrt RNE (fp.sub RNE x9 x6)))))))(check-sat)