;  time  = {'z3': 600}
;  terms = 98
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.min (fp.div RNE (fp.abs x6) (fp.sub RNE x6 (fp.mul RNE x2 x2))) (fp.sub RNE (fp.sqrt RNE x7) (fp.neg x4))) (fp.sub RNE (fp.div RNE (fp.sub RNE x4 x0) (fp.div RNE x0 x1)) (fp.div RNE (fp.sub RNE x1 x6) (fp.sub RNE (fp.sub RNE x7 x2) (fp.add RNE x6 x5))))) (fp.sub RNE (fp.min (fp.div RNE (fp.abs x5) (fp.min x8 x0)) (fp.sqrt RNE (fp.mul RNE x6 x3))) (fp.sub RNE (fp.div RNE (fp.sub RNE x9 x9) (fp.abs x9)) (fp.min (fp.div RNE (fp.abs x3) (fp.min x8 x2)) (fp.abs (fp.mul RNE x9 x5)))))) (fp.mul RNE (fp.abs (fp.sub RNE (fp.div RNE (fp.min x5 x5) (fp.div RNE x3 x5)) (fp.abs (fp.div RNE x2 x3)))) (fp.roundToIntegral RNE (fp.div RNE (fp.max (fp.sub RNE x5 x1) (fp.sub RNE x7 (fp.sub RNE x7 x9))) (fp.max (fp.sub RNE x7 x2) (fp.div RNE x1 x3)))))))(check-sat)