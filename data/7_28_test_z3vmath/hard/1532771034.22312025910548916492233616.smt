;  time  = {'z3': 600}
;  terms = 71
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.min (fp.abs (fp.add RNE x7 x7)) (fp.neg (fp.abs x2))) (fp.div RNE (fp.mul RNE (fp.mul RNE x4 x8) (fp.div RNE x0 x0)) (fp.sqrt RNE (fp.div RNE x5 x6)))) (fp.neg (fp.roundToIntegral RNE (fp.sqrt RNE (fp.div RNE x0 x3))))) (fp.sub RNE (fp.div RNE (fp.abs (fp.sub RNE (fp.roundToIntegral RNE x6) (fp.abs x0))) (fp.mul RNE (fp.add RNE (fp.div RNE x7 x8) (fp.sub RNE x2 x4)) (fp.min (fp.mul RNE x4 x7) (fp.sqrt RNE x9)))) (fp.add RNE (fp.add RNE (fp.div RNE (fp.sqrt RNE x1) (fp.sub RNE x4 x3)) (fp.neg (fp.neg x4))) (fp.add RNE (fp.sqrt RNE (fp.max x1 x7)) (fp.neg (fp.sub RNE x0 x2)))))))(check-sat)