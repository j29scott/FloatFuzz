;  time  = {'z3': 600}
;  terms = 82
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.min (fp.min (fp.mul RNE (fp.min (fp.add RNE x3 x4) (fp.sqrt RNE x0)) (fp.sqrt RNE (fp.abs x0))) (fp.neg (fp.sub RNE (fp.div RNE x3 x9) (fp.min x6 x3)))) (fp.div RNE (fp.min (fp.div RNE (fp.mul RNE (fp.abs x8) (fp.sqrt RNE x8)) (fp.mul RNE (fp.max x0 x5) (fp.abs x4))) (fp.abs (fp.neg (fp.sqrt RNE x8)))) (fp.abs (fp.sub RNE (fp.sqrt RNE (fp.neg x2)) (fp.max (fp.min x2 x4) (fp.sub RNE x3 x8)))))) (fp.neg (fp.div RNE (fp.div RNE (fp.mul RNE (fp.min x4 x4) (fp.add RNE x1 x8)) (fp.add RNE (fp.min x9 (fp.min x6 x1)) (fp.div RNE x3 x1))) (fp.add RNE (fp.add RNE (fp.sub RNE x3 x2) (fp.div RNE x2 x6)) (fp.roundToIntegral RNE (fp.mul RNE x7 x3)))))))(check-sat)