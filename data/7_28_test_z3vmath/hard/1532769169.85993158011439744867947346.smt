;  time  = {'z3': 600}
;  terms = 64
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.add RNE (fp.neg x7) (fp.div RNE x9 x2))) (fp.mul RNE (fp.add RNE (fp.div RNE x0 x3) (fp.div RNE x1 (fp.div RNE x3 x5))) (fp.neg (fp.sqrt RNE x4)))) (fp.sub RNE (fp.div RNE (fp.add RNE (fp.add RNE x4 (fp.abs x4)) (fp.min (fp.div RNE x8 x3) (fp.add RNE x0 x6))) (fp.add RNE (fp.sub RNE x4 x1) (fp.roundToIntegral RNE x0))) (fp.div RNE (fp.add RNE (fp.div RNE x0 (fp.roundToIntegral RNE x8)) (fp.div RNE x0 (fp.min x4 x5))) (fp.div RNE (fp.mul RNE x8 x6) (fp.add RNE (fp.neg x3) (fp.add RNE x9 x6))))))))(check-sat)