;  time  = {'z3': 600}
;  terms = 113
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.mul RNE (fp.abs (fp.min (fp.add RNE x1 x6) (fp.mul RNE x5 (fp.mul RNE x3 x9)))) (fp.mul RNE (fp.div RNE (fp.mul RNE x2 (fp.div RNE x4 x1)) (fp.abs x9)) (fp.div RNE (fp.mul RNE (fp.div RNE x5 x0) (fp.max x3 x0)) (fp.min (fp.mul RNE x5 x3) (fp.max x7 x1))))) (fp.mul RNE (fp.mul RNE (fp.max (fp.sub RNE (fp.sub RNE x4 x8) (fp.neg x6)) (fp.min (fp.div RNE x6 x5) (fp.sub RNE x7 x8))) (fp.max (fp.div RNE (fp.abs x4) (fp.abs x8)) (fp.sub RNE (fp.max x8 x5) (fp.mul RNE x9 x1)))) (fp.roundToIntegral RNE (fp.mul RNE (fp.div RNE (fp.sub RNE x5 x1) (fp.mul RNE x6 x2)) (fp.min (fp.neg x2) (fp.max x3 x7)))))) (fp.mul RNE (fp.neg (fp.max (fp.add RNE (fp.abs x8) (fp.mul RNE x6 x3)) (fp.max (fp.neg x1) (fp.roundToIntegral RNE x5)))) (fp.add RNE (fp.abs (fp.abs (fp.mul RNE x5 (fp.roundToIntegral RNE x5)))) (fp.max (fp.sqrt RNE (fp.sqrt RNE x6)) (fp.add RNE (fp.mul RNE x3 x6) (fp.sub RNE x4 x9)))))))(check-sat)