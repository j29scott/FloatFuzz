;  time  = {'z3': 600}
;  terms = 106
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.sqrt RNE (fp.mul RNE (fp.add RNE (fp.abs x2) (fp.roundToIntegral RNE (fp.div RNE x6 x5))) (fp.div RNE (fp.div RNE x2 x3) (fp.mul RNE x0 x0)))) (fp.div RNE (fp.add RNE (fp.add RNE (fp.neg x2) (fp.abs (fp.div RNE x1 x3))) (fp.roundToIntegral RNE (fp.div RNE x6 x3))) (fp.mul RNE (fp.div RNE (fp.min (fp.max x2 x6) (fp.mul RNE x7 x1)) (fp.roundToIntegral RNE (fp.sqrt RNE x0))) (fp.roundToIntegral RNE (fp.sub RNE (fp.div RNE x2 x7) (fp.max x0 x4)))))) (fp.sub RNE (fp.min (fp.add RNE (fp.div RNE (fp.add RNE x8 x6) (fp.sub RNE (fp.neg x3) (fp.div RNE x3 x8))) (fp.max (fp.roundToIntegral RNE x1) (fp.roundToIntegral RNE x7))) (fp.max (fp.max (fp.add RNE x3 (fp.abs x5)) (fp.neg x9)) (fp.roundToIntegral RNE (fp.sqrt RNE x6)))) (fp.mul RNE (fp.add RNE (fp.roundToIntegral RNE (fp.neg x7)) (fp.div RNE (fp.div RNE x6 x1) (fp.roundToIntegral RNE x5))) (fp.div RNE (fp.abs (fp.abs x0)) (fp.min (fp.neg (fp.sub RNE x6 x1)) (fp.add RNE (fp.div RNE x8 x8) (fp.abs x6))))))))(check-sat)