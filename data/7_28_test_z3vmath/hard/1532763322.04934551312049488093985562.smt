;  time  = {'z3': 600}
;  terms = 102
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.abs (fp.div RNE (fp.div RNE (fp.div RNE x2 x6) (fp.abs x6)) (fp.div RNE (fp.div RNE x8 x1) (fp.sqrt RNE x1)))) (fp.sub RNE (fp.div RNE (fp.add RNE (fp.neg x1) (fp.roundToIntegral RNE x4)) (fp.mul RNE (fp.add RNE x5 x2) (fp.add RNE x8 x4))) (fp.div RNE (fp.abs (fp.abs x8)) (fp.div RNE (fp.abs (fp.sub RNE x9 x8)) (fp.max (fp.neg x2) (fp.add RNE x0 x6)))))) (fp.div RNE (fp.div RNE (fp.min (fp.div RNE (fp.sub RNE x9 x3) (fp.add RNE x3 x6)) (fp.div RNE (fp.min x1 x0) (fp.div RNE x5 x3))) (fp.min (fp.neg (fp.min (fp.max x9 x4) (fp.max x7 x2))) (fp.neg (fp.div RNE (fp.sqrt RNE x1) (fp.div RNE x9 x9))))) (fp.neg (fp.div RNE (fp.div RNE (fp.div RNE x1 (fp.div RNE x1 x5)) (fp.div RNE x6 x2)) (fp.mul RNE (fp.add RNE (fp.div RNE x7 x4) (fp.abs x3)) (fp.mul RNE (fp.div RNE x6 x1) (fp.sqrt RNE x1))))))))(check-sat)