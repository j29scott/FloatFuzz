;  time  = {'z3': 600}
;  terms = 72
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.div RNE (fp.div RNE (fp.add RNE (fp.min (fp.div RNE x0 x4) (fp.add RNE x3 x3)) (fp.min (fp.abs x0) (fp.min x5 (fp.mul RNE x3 x6)))) (fp.max (fp.sqrt RNE (fp.min (fp.div RNE x4 x6) (fp.abs x7))) (fp.div RNE (fp.div RNE (fp.mul RNE x4 x5) (fp.max x7 x6)) (fp.sub RNE (fp.max x6 x0) (fp.add RNE x7 x5))))) (fp.div RNE (fp.sub RNE (fp.min (fp.abs x2) (fp.min x5 x0)) (fp.neg (fp.max (fp.roundToIntegral RNE x6) (fp.div RNE x5 x1)))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x2 x7) (fp.sqrt RNE x9)) (fp.sub RNE (fp.div RNE x5 (fp.div RNE x9 x3)) (fp.neg x2)))))))(check-sat)