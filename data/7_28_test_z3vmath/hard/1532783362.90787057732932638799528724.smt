;  time  = {'z3': 552.972}
;  terms = 79
;  score = 552.972
;  stdout= {'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.neg (fp.min (fp.sqrt RNE (fp.sub RNE x1 x8)) (fp.roundToIntegral RNE (fp.sqrt RNE x3)))) (fp.add RNE (fp.sub RNE (fp.sqrt RNE (fp.div RNE x9 x0)) (fp.abs (fp.mul RNE x4 x6))) (fp.add RNE (fp.max (fp.sqrt RNE x5) (fp.div RNE x4 x9)) (fp.mul RNE (fp.max x6 x0) (fp.neg x2))))) (fp.sub RNE (fp.min (fp.min (fp.neg (fp.sqrt RNE x0)) (fp.mul RNE (fp.min x9 x1) (fp.mul RNE x3 x2))) (fp.div RNE (fp.add RNE (fp.min x0 x0) (fp.max x8 x6)) (fp.abs (fp.max x4 x4)))) (fp.add RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.add RNE x0 x4)) (fp.roundToIntegral RNE (fp.max x7 x0))) (fp.div RNE (fp.abs (fp.neg x7)) (fp.div RNE (fp.sub RNE x5 x6) (fp.neg x0)))))))(check-sat)