;  time  = {'z3': 577.986}
;  terms = 77
;  score = 577.986
;  stdout= {'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.min (fp.mul RNE (fp.roundToIntegral RNE (fp.add RNE x8 x1)) (fp.abs (fp.sub RNE (fp.roundToIntegral RNE x4) (fp.neg x9)))) (fp.sqrt RNE (fp.neg (fp.sub RNE x1 x0)))) (fp.sqrt RNE (fp.div RNE (fp.div RNE (fp.sqrt RNE x6) (fp.mul RNE x1 (fp.div RNE x2 x4))) (fp.div RNE (fp.mul RNE x3 x4) (fp.sqrt RNE x5))))) (fp.mul RNE (fp.mul RNE (fp.add RNE (fp.div RNE (fp.abs x2) (fp.roundToIntegral RNE x9)) (fp.roundToIntegral RNE (fp.neg x6))) (fp.mul RNE (fp.abs (fp.min x9 x1)) (fp.neg (fp.mul RNE x3 x2)))) (fp.max (fp.neg (fp.div RNE (fp.div RNE x7 x0) (fp.neg (fp.div RNE x3 x8)))) (fp.div RNE (fp.div RNE (fp.add RNE x5 x8) (fp.neg (fp.min x3 x4))) (fp.neg (fp.roundToIntegral RNE x7)))))))(check-sat)