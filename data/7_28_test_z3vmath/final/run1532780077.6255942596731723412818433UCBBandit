;  time  = {'z3': 267.296, 'mathsat': 10.525578260421753}
;  terms = 76
;  score = 256.77042173957824
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE (fp.mul RNE (fp.min x5 x0) (fp.max x4 x1)) (fp.roundToIntegral RNE (fp.min x7 x2)))) (fp.max (fp.min (fp.max (fp.sub RNE x5 x7) (fp.neg x0)) (fp.mul RNE (fp.sub RNE x6 x2) (fp.add RNE x6 x6))) (fp.sub RNE (fp.neg (fp.roundToIntegral RNE x7)) (fp.sqrt RNE (fp.abs x2))))) (fp.div RNE (fp.sqrt RNE (fp.sub RNE (fp.div RNE (fp.min x3 x7) (fp.mul RNE x9 x5)) (fp.sqrt RNE (fp.abs x1)))) (fp.min (fp.div RNE (fp.mul RNE (fp.sub RNE x2 x9) (fp.max x0 x4)) (fp.neg (fp.div RNE x7 x5))) (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE x6) (fp.min x4 x9)) (fp.min (fp.max x1 x4) (fp.neg x7)))))))(check-sat)