;  time  = {'z3': 341.09, 'mathsat': 2.1999406814575195}
;  terms = 95
;  score = 338.89005931854246
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.max (fp.min (fp.min (fp.abs x8) (fp.neg (fp.sub RNE x0 x7))) (fp.abs (fp.sub RNE (fp.div RNE x3 x1) (fp.sub RNE x4 x7)))) (fp.roundToIntegral RNE (fp.neg (fp.mul RNE x6 x7)))) (fp.abs (fp.min (fp.min (fp.min x8 (fp.max x0 x8)) (fp.sub RNE (fp.neg x8) (fp.min x1 x8))) (fp.min (fp.abs x0) (fp.sqrt RNE x4))))) (fp.mul RNE (fp.min (fp.max (fp.min (fp.abs x5) (fp.min x0 x1)) (fp.add RNE (fp.min x0 (fp.add RNE x2 x2)) (fp.div RNE x5 x1))) (fp.sub RNE (fp.sub RNE (fp.max (fp.mul RNE x7 x5) (fp.mul RNE x4 x4)) (fp.roundToIntegral RNE (fp.mul RNE x0 x3))) (fp.sub RNE (fp.min (fp.neg x5) (fp.max x1 x8)) (fp.add RNE (fp.sqrt RNE x5) (fp.sub RNE x7 x9))))) (fp.abs (fp.abs (fp.abs (fp.min x1 (fp.div RNE x6 x2))))))))(check-sat)