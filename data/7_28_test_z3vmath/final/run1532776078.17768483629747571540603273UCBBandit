;  time  = {'mathsat': 10.96918249130249, 'z3': 67.529}
;  terms = 57
;  score = 56.559817508697506
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.neg (fp.neg (fp.min x6 x9))) (fp.mul RNE (fp.sqrt RNE (fp.mul RNE x7 x3)) (fp.sqrt RNE (fp.min x6 x5)))) (fp.neg (fp.neg (fp.min (fp.min x2 x1) (fp.sub RNE x6 x6))))) (fp.div RNE (fp.min (fp.sub RNE (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x0)) (fp.div RNE (fp.roundToIntegral RNE x5) (fp.roundToIntegral RNE x1))) (fp.neg (fp.div RNE (fp.div RNE x4 x4) (fp.min x4 x4)))) (fp.max (fp.neg (fp.neg (fp.abs x9))) (fp.neg (fp.roundToIntegral RNE (fp.max x6 x2)))))))(check-sat)