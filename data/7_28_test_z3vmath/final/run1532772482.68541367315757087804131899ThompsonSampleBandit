;  time  = {'z3': 499.08, 'mathsat': 5.276185512542725}
;  terms = 76
;  score = 493.80381448745726
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.add RNE x9 x0) (fp.sub RNE x1 x5)) (fp.roundToIntegral RNE (fp.abs x2))) (fp.div RNE (fp.neg (fp.add RNE x8 x9)) (fp.div RNE (fp.abs x3) (fp.abs x5)))) (fp.add RNE (fp.max (fp.mul RNE (fp.roundToIntegral RNE x2) (fp.add RNE x1 x5)) (fp.mul RNE (fp.add RNE x7 (fp.add RNE x7 x9)) (fp.max x8 x7))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.mul RNE x5 x2) (fp.sub RNE x3 x6)) (fp.mul RNE (fp.roundToIntegral RNE x0) (fp.abs x8))) (fp.roundToIntegral RNE (fp.min (fp.roundToIntegral RNE x8) (fp.max x4 x9)))))) (fp.abs (fp.abs (fp.div RNE (fp.sqrt RNE (fp.div RNE x7 x6)) (fp.sub RNE (fp.add RNE x2 x7) (fp.sub RNE x0 x1)))))))(check-sat)