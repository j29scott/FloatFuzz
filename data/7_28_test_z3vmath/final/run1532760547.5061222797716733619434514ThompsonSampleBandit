;  time  = {'z3': 546.603, 'mathsat': 47.343390226364136}
;  terms = 72
;  score = 499.2596097736358
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.mul RNE (fp.roundToIntegral RNE (fp.add RNE (fp.sub RNE x1 x5) (fp.neg x7))) (fp.div RNE (fp.min (fp.sub RNE x2 x8) (fp.div RNE x8 x6)) (fp.abs (fp.add RNE x0 x5)))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE (fp.min x7 x8) (fp.max x7 x4))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x7 x6) (fp.min x6 x7)) (fp.add RNE (fp.div RNE x9 x6) (fp.sqrt RNE x4))))) (fp.sub RNE (fp.roundToIntegral RNE (fp.max (fp.add RNE (fp.abs x8) (fp.neg x2)) (fp.max (fp.abs x7) (fp.roundToIntegral RNE x3)))) (fp.div RNE (fp.neg (fp.roundToIntegral RNE (fp.sub RNE x0 x4))) (fp.div RNE (fp.sqrt RNE (fp.roundToIntegral RNE x4)) (fp.sqrt RNE (fp.add RNE x5 x9)))))))(check-sat)