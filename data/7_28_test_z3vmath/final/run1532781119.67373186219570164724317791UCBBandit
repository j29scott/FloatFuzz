;  time  = {'mathsat': 7.4945104122161865, 'z3': 236.989}
;  terms = 62
;  score = 229.49448958778382
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.add RNE (fp.min (fp.min x6 x8) (fp.abs x2)) (fp.add RNE (fp.div RNE x6 x5) (fp.div RNE x7 x4))) (fp.abs (fp.mul RNE (fp.max x3 x7) (fp.sub RNE x3 x7)))) (fp.neg (fp.mul RNE (fp.abs (fp.neg x4)) (fp.sub RNE (fp.sub RNE x9 x2) (fp.add RNE x7 x1))))) (fp.neg (fp.div RNE (fp.max (fp.max (fp.abs x7) (fp.div RNE x9 x4)) (fp.sub RNE (fp.abs x5) (fp.sqrt RNE x8))) (fp.max (fp.sub RNE (fp.roundToIntegral RNE x8) (fp.sqrt RNE x6)) (fp.min (fp.roundToIntegral RNE x2) (fp.abs x3)))))))(check-sat)