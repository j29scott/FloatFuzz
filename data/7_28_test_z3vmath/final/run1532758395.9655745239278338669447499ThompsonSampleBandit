;  time  = {'mathsat': 5.0666258335113525, 'z3': 314.334}
;  terms = 50
;  score = 309.26737416648865
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sqrt RNE (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.abs x2)) (fp.sqrt RNE (fp.mul RNE x1 x8))) (fp.sub RNE (fp.add RNE (fp.div RNE x1 x0) (fp.add RNE x1 x4)) (fp.div RNE (fp.mul RNE x1 x6) (fp.div RNE x9 x0))))) (fp.add RNE (fp.abs (fp.roundToIntegral RNE (fp.sub RNE (fp.sqrt RNE x7) (fp.abs x7)))) (fp.sqrt RNE (fp.div RNE (fp.max (fp.sub RNE x5 x8) (fp.min x4 x6)) (fp.add RNE (fp.max x4 x0) (fp.div RNE x6 x4)))))))(check-sat)