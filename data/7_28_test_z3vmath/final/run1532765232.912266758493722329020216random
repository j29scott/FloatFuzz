;  time  = {'mathsat': 1.9777932167053223, 'z3': 95.65}
;  terms = 85
;  score = 93.67220678329468
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.abs (fp.neg (fp.add RNE (fp.neg x0) (fp.add RNE x7 x5)))) (fp.mul RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.sub RNE x9 x9) (fp.sqrt RNE x1))) (fp.sub RNE (fp.max (fp.add RNE x0 x8) (fp.abs x2)) (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.mul RNE x9 x5))))) (fp.max (fp.div RNE (fp.add RNE (fp.div RNE (fp.mul RNE x9 x7) (fp.sub RNE x1 (fp.add RNE x8 x9))) (fp.neg (fp.max x5 x4))) (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.max x6 x0) (fp.sqrt RNE x3)) (fp.add RNE (fp.roundToIntegral RNE x3) (fp.abs x0))) (fp.sub RNE (fp.abs (fp.max x2 x2)) (fp.neg (fp.min x7 x4))))) (fp.roundToIntegral RNE (fp.sub RNE (fp.div RNE (fp.min x9 x9) (fp.add RNE x4 x7)) (fp.mul RNE (fp.mul RNE x5 x7) (fp.max x7 x3)))))))(check-sat)