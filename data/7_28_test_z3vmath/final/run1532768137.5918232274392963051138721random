;  time  = {'z3': 308.211, 'mathsat': 5.463596343994141}
;  terms = 75
;  score = 302.7474036560059
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.sqrt RNE (fp.div RNE (fp.sqrt RNE (fp.neg x9)) (fp.add RNE (fp.mul RNE x8 x3) (fp.abs x8)))) (fp.max (fp.sqrt RNE (fp.div RNE (fp.abs x6) (fp.mul RNE x0 x8))) (fp.min (fp.div RNE (fp.sqrt RNE x8) (fp.sub RNE x6 x4)) (fp.roundToIntegral RNE (fp.min x4 x7))))) (fp.add RNE (fp.sub RNE (fp.add RNE (fp.div RNE (fp.mul RNE x4 x3) (fp.min x4 x2)) (fp.div RNE (fp.add RNE x5 x8) (fp.roundToIntegral RNE x8))) (fp.roundToIntegral RNE (fp.min (fp.neg x6) (fp.max x9 x7)))) (fp.sub RNE (fp.div RNE (fp.sub RNE (fp.sub RNE x0 x9) (fp.max x1 x3)) (fp.sqrt RNE (fp.mul RNE x2 x7))) (fp.sub RNE (fp.roundToIntegral RNE (fp.neg x9)) (fp.sqrt RNE (fp.sqrt RNE x1)))))))(check-sat)