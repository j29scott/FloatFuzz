;  time  = {'mathsat': 4.32747483253479, 'z3': 82.905}
;  terms = 59
;  score = 78.57752516746521
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.roundToIntegral RNE (fp.sqrt RNE (fp.add RNE (fp.abs (fp.sqrt RNE x0)) (fp.add RNE (fp.roundToIntegral RNE x5) (fp.neg x6))))) (fp.sub RNE (fp.min (fp.abs (fp.max (fp.sub RNE x6 x2) (fp.sqrt RNE x5))) (fp.mul RNE (fp.min (fp.abs x4) (fp.mul RNE x0 x4)) (fp.sub RNE (fp.mul RNE x8 x6) (fp.abs x3)))) (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.abs x3) (fp.mul RNE x1 x6)) (fp.add RNE (fp.roundToIntegral RNE x2) (fp.mul RNE x2 x3))) (fp.div RNE (fp.div RNE (fp.max x4 x1) (fp.abs x3)) (fp.neg (fp.max x4 x4)))))))(check-sat)