;  time  = {'mathsat': 7.257737398147583, 'z3': 200.218}
;  terms = 69
;  score = 192.9602626018524
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.neg (fp.max (fp.sqrt RNE (fp.min (fp.sqrt RNE x1) (fp.mul RNE x2 x0))) (fp.sub RNE (fp.mul RNE (fp.min x7 x8) (fp.div RNE x1 x4)) (fp.sqrt RNE (fp.abs x8))))) (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.add RNE (fp.add RNE x5 x6) (fp.sqrt RNE x3)) (fp.max (fp.sqrt RNE x3) (fp.roundToIntegral RNE x6))) (fp.mul RNE (fp.sub RNE (fp.div RNE x4 x9) (fp.mul RNE x3 x0)) (fp.neg (fp.neg x0)))) (fp.mul RNE (fp.div RNE (fp.neg (fp.add RNE x2 x0)) (fp.max (fp.abs x6) (fp.max x3 x2))) (fp.div RNE (fp.min (fp.max x4 x5) (fp.abs x6)) (fp.roundToIntegral RNE (fp.mul RNE x2 x8)))))))(check-sat)