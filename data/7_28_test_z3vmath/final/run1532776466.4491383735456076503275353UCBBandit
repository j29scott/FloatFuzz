;  time  = {'z3': 225.059, 'mathsat': 2.743478536605835}
;  terms = 56
;  score = 222.31552146339416
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.min (fp.add RNE (fp.div RNE (fp.abs x8) (fp.abs x2)) (fp.abs (fp.neg x1))) (fp.div RNE (fp.sqrt RNE (fp.min x8 x6)) (fp.sub RNE (fp.sqrt RNE x6) (fp.neg x7)))) (fp.abs (fp.add RNE (fp.div RNE (fp.abs x8) (fp.sqrt RNE x7)) (fp.abs (fp.neg x8))))) (fp.mul RNE (fp.abs (fp.mul RNE (fp.sqrt RNE (fp.add RNE x5 x3)) (fp.max (fp.neg x9) (fp.roundToIntegral RNE x5)))) (fp.abs (fp.add RNE (fp.roundToIntegral RNE (fp.sqrt RNE x2)) (fp.div RNE (fp.mul RNE x0 x8) (fp.sub RNE x4 x8)))))))(check-sat)