;  time  = {'mathsat': 11.879246950149536, 'z3': 84.897}
;  terms = 78
;  score = 73.01775304985047
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.add RNE (fp.mul RNE (fp.sqrt RNE (fp.neg x8)) (fp.mul RNE (fp.roundToIntegral RNE x5) (fp.sqrt RNE x4))) (fp.max (fp.div RNE (fp.add RNE x2 x9) (fp.sub RNE x2 x5)) (fp.min (fp.roundToIntegral RNE x2) (fp.max x6 x9)))) (fp.div RNE (fp.neg (fp.min (fp.max x6 x0) (fp.max x6 x5))) (fp.neg (fp.neg (fp.add RNE x6 x2))))) (fp.add RNE (fp.max (fp.max (fp.roundToIntegral RNE (fp.abs x5)) (fp.sub RNE (fp.sub RNE x5 x3) (fp.roundToIntegral RNE x4))) (fp.add RNE (fp.div RNE (fp.mul RNE x9 x6) (fp.sub RNE x9 x6)) (fp.add RNE (fp.neg x3) (fp.roundToIntegral RNE x0)))) (fp.sqrt RNE (fp.max (fp.add RNE (fp.neg x2) (fp.sqrt RNE x3)) (fp.mul RNE (fp.max x6 x4) (fp.roundToIntegral RNE x9)))))))(check-sat)