;  time  = {'mathsat': 3.3018741607666016, 'z3': 294.18}
;  terms = 72
;  score = 290.8781258392334
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.max (fp.abs (fp.abs x2)) (fp.add RNE (fp.abs x7) (fp.abs x0))) (fp.abs (fp.div RNE (fp.min x7 x0) (fp.div RNE x6 x1)))) (fp.max (fp.min (fp.roundToIntegral RNE (fp.sqrt RNE x4)) (fp.add RNE (fp.sqrt RNE x5) (fp.abs x1))) (fp.max (fp.sub RNE (fp.abs x0) (fp.abs x3)) (fp.div RNE (fp.add RNE x8 x9) (fp.div RNE x7 x5))))) (fp.max (fp.div RNE (fp.roundToIntegral RNE (fp.abs (fp.min x7 x2))) (fp.abs (fp.abs (fp.abs x6)))) (fp.max (fp.max (fp.div RNE (fp.max x4 x8) (fp.mul RNE x2 x4)) (fp.roundToIntegral RNE (fp.min x6 x6))) (fp.neg (fp.abs (fp.max x1 x8)))))))(check-sat)