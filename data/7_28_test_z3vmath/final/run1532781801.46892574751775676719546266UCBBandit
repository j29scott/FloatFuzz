;  time  = {'z3': 425.126, 'mathsat': 68.85503721237183}
;  terms = 78
;  score = 356.27096278762815
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.min (fp.div RNE (fp.neg (fp.add RNE (fp.abs x9) (fp.max x4 x4))) (fp.div RNE (fp.sqrt RNE (fp.sub RNE x4 x6)) (fp.min (fp.sub RNE x7 x8) (fp.div RNE x2 x9)))) (fp.min (fp.roundToIntegral RNE (fp.neg (fp.add RNE x7 x3))) (fp.mul RNE (fp.neg (fp.neg x0)) (fp.add RNE (fp.div RNE x9 x6) (fp.abs x6))))) (fp.max (fp.max (fp.abs (fp.abs (fp.min x4 x4))) (fp.add RNE (fp.sub RNE (fp.roundToIntegral RNE x9) (fp.min x9 x3)) (fp.div RNE (fp.mul RNE x9 x0) (fp.neg x7)))) (fp.max (fp.sqrt RNE (fp.abs (fp.add RNE x0 x7))) (fp.div RNE (fp.mul RNE (fp.max x2 x0) (fp.sqrt RNE x1)) (fp.div RNE (fp.mul RNE x2 x0) (fp.max x3 x8)))))))(check-sat)