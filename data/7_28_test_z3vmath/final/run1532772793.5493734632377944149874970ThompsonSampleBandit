;  time  = {'z3': 256.033, 'mathsat': 27.536377906799316}
;  terms = 75
;  score = 228.4966220932007
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.max (fp.min (fp.mul RNE (fp.sub RNE x2 x3) (fp.max x5 x4)) (fp.add RNE (fp.add RNE x5 x3) (fp.abs x5))) (fp.neg (fp.neg (fp.abs x6)))) (fp.abs (fp.sub RNE (fp.sub RNE (fp.mul RNE x8 x8) (fp.abs x7)) (fp.min (fp.sqrt RNE x9) (fp.abs x3))))) (fp.mul RNE (fp.add RNE (fp.roundToIntegral RNE (fp.abs (fp.mul RNE x8 x7))) (fp.min (fp.min (fp.roundToIntegral RNE x6) (fp.max x0 x6)) (fp.sub RNE (fp.sqrt RNE x1) (fp.add RNE x5 x4)))) (fp.div RNE (fp.mul RNE (fp.abs (fp.abs x3)) (fp.abs (fp.div RNE x5 x0))) (fp.add RNE (fp.div RNE (fp.mul RNE x3 x4) (fp.abs x3)) (fp.min (fp.abs x4) (fp.roundToIntegral RNE x9)))))))(check-sat)