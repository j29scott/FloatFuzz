;  time  = {'mathsat': 2.1121559143066406, 'z3': 132.28}
;  terms = 65
;  score = 130.16784408569336
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.min (fp.add RNE (fp.neg (fp.sqrt RNE x3)) (fp.add RNE (fp.roundToIntegral RNE x6) (fp.mul RNE x5 x2))) (fp.neg (fp.sub RNE (fp.min x9 x0) (fp.min x3 x8)))) (fp.sqrt RNE (fp.div RNE (fp.sqrt RNE (fp.neg x8)) (fp.mul RNE (fp.sqrt RNE x1) (fp.add RNE x0 x8))))) (fp.max (fp.abs (fp.mul RNE (fp.neg (fp.mul RNE x0 x6)) (fp.mul RNE (fp.sub RNE x9 x7) (fp.sub RNE x7 x0)))) (fp.add RNE (fp.add RNE (fp.abs (fp.sqrt RNE x9)) (fp.max (fp.neg x4) (fp.max x7 x8))) (fp.add RNE (fp.sqrt RNE (fp.neg x2)) (fp.roundToIntegral RNE (fp.add RNE x0 x2)))))))(check-sat)