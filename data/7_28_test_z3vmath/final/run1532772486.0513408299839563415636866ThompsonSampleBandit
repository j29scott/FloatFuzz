;  time  = {'z3': 320.757, 'mathsat': 26.3541738986969}
;  terms = 92
;  score = 294.4028261013031
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sub RNE (fp.min (fp.div RNE (fp.div RNE (fp.abs x7) (fp.min x1 x6)) (fp.sqrt RNE (fp.min (fp.abs x9) (fp.mul RNE x5 x8)))) (fp.sqrt RNE (fp.add RNE (fp.min x4 x5) (fp.div RNE x1 x4)))) (fp.max (fp.abs (fp.div RNE (fp.div RNE x0 (fp.sub RNE x3 x8)) (fp.max (fp.abs x2) (fp.mul RNE x9 x4)))) (fp.max (fp.div RNE (fp.min x5 x7) (fp.sub RNE x3 x8)) (fp.sqrt RNE (fp.max x1 x8))))) (fp.min (fp.min (fp.max (fp.min (fp.max x4 x2) (fp.abs x8)) (fp.sqrt RNE (fp.abs x5))) (fp.abs (fp.sub RNE (fp.div RNE x3 x9) (fp.div RNE x2 x5)))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.max x3 x5) (fp.mul RNE (fp.max x1 x5) (fp.sub RNE x9 x1))) (fp.roundToIntegral RNE (fp.div RNE x1 x1))) (fp.abs (fp.abs (fp.roundToIntegral RNE x9)))))))(check-sat)