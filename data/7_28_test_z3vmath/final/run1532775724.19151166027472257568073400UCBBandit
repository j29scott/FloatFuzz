;  time  = {'z3': 208.571, 'mathsat': 9.201078176498413}
;  terms = 74
;  score = 199.36992182350158
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.add RNE (fp.mul RNE (fp.min (fp.min x8 x8) (fp.add RNE x7 x6)) (fp.mul RNE (fp.sub RNE x5 x1) (fp.div RNE x6 x1))) (fp.add RNE (fp.sqrt RNE (fp.sub RNE x7 x3)) (fp.div RNE (fp.abs x3) (fp.roundToIntegral RNE x3)))) (fp.abs (fp.neg (fp.mul RNE (fp.roundToIntegral RNE x4) (fp.div RNE x0 x8))))) (fp.sub RNE (fp.max (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x0))) (fp.div RNE (fp.sub RNE (fp.add RNE x4 x3) (fp.min x6 x8)) (fp.div RNE (fp.add RNE x7 x0) (fp.mul RNE x6 x2)))) (fp.add RNE (fp.sqrt RNE (fp.add RNE (fp.neg x4) (fp.mul RNE x7 x1))) (fp.div RNE (fp.abs (fp.mul RNE x6 x4)) (fp.abs (fp.sub RNE x8 x5)))))))(check-sat)