;  time  = {'z3': 127.434, 'mathsat': 2.76249361038208}
;  terms = 75
;  score = 124.67150638961792
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.sqrt RNE (fp.min (fp.roundToIntegral RNE (fp.max x8 x5)) (fp.div RNE (fp.max x7 x7) (fp.neg x0)))) (fp.sub RNE (fp.max (fp.mul RNE (fp.sqrt RNE x7) (fp.neg x8)) (fp.neg (fp.min x8 x8))) (fp.add RNE (fp.mul RNE (fp.neg x4) (fp.max x9 x0)) (fp.add RNE (fp.mul RNE x2 x0) (fp.min x8 x1))))) (fp.add RNE (fp.abs (fp.max (fp.min (fp.abs x7) (fp.roundToIntegral RNE x5)) (fp.sqrt RNE (fp.min x1 x0)))) (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE (fp.sqrt RNE x9)) (fp.min (fp.max x8 x2) (fp.mul RNE x8 x3))) (fp.sub RNE (fp.mul RNE (fp.add RNE x7 x0) (fp.div RNE x2 x1)) (fp.neg (fp.sub RNE x3 x5)))))))(check-sat)