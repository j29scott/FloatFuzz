;  time  = {'z3': 570.109, 'mathsat': 3.2690930366516113}
;  terms = 96
;  score = 566.8399069633484
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.mul RNE (fp.sqrt RNE (fp.add RNE (fp.max x7 x5) (fp.sub RNE x5 x5))) (fp.div RNE (fp.neg (fp.neg x3)) (fp.add RNE (fp.sub RNE x0 x8) (fp.neg x0)))) (fp.div RNE (fp.sqrt RNE (fp.abs (fp.mul RNE x5 x4))) (fp.sub RNE (fp.sub RNE (fp.max x4 x3) (fp.div RNE x7 x9)) (fp.roundToIntegral RNE (fp.add RNE x5 x4))))) (fp.mul RNE (fp.mul RNE (fp.abs (fp.sub RNE (fp.max x4 x5) (fp.min x9 x8))) (fp.add RNE (fp.neg (fp.neg x9)) (fp.max (fp.mul RNE x4 x4) (fp.mul RNE x0 (fp.abs x7))))) (fp.add RNE (fp.mul RNE (fp.min (fp.mul RNE x6 (fp.div RNE x6 x4)) (fp.max x4 x8)) (fp.sub RNE (fp.add RNE (fp.mul RNE x4 x5) (fp.roundToIntegral RNE x7)) (fp.max (fp.add RNE x7 x8) (fp.add RNE x9 x5)))) (fp.max (fp.roundToIntegral RNE (fp.add RNE x7 x2)) (fp.div RNE (fp.neg x8) (fp.sqrt RNE x1)))))))(check-sat)