;  time  = {'z3': 315.652, 'mathsat': 13.268818378448486}
;  terms = 83
;  score = 302.3831816215515
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.min (fp.sub RNE x7 x6) (fp.add RNE x5 x5)) (fp.sub RNE (fp.max x4 (fp.min x5 x7)) (fp.neg x6))) (fp.sqrt RNE (fp.max (fp.abs x6) (fp.roundToIntegral RNE x5)))) (fp.mul RNE (fp.add RNE (fp.mul RNE (fp.div RNE x5 x1) (fp.sqrt RNE x8)) (fp.roundToIntegral RNE (fp.add RNE x1 x7))) (fp.add RNE (fp.min (fp.sqrt RNE x0) (fp.add RNE x0 x2)) (fp.add RNE (fp.sub RNE x0 x9) (fp.sub RNE x1 x1))))) (fp.min (fp.div RNE (fp.sub RNE (fp.min (fp.max x4 x5) (fp.add RNE x1 x3)) (fp.sub RNE (fp.mul RNE x9 x7) (fp.roundToIntegral RNE x1))) (fp.abs (fp.sub RNE (fp.mul RNE x0 x5) (fp.sub RNE x5 x4)))) (fp.sqrt RNE (fp.sqrt RNE (fp.min (fp.min x6 x2) (fp.neg x0)))))))(check-sat)