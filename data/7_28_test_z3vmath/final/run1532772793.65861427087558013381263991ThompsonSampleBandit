;  time  = {'z3': 276.615, 'mathsat': 20.424481868743896}
;  terms = 68
;  score = 256.1905181312561
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.abs (fp.div RNE x2 x2)) (fp.add RNE (fp.roundToIntegral RNE x1) (fp.abs x2))) (fp.mul RNE (fp.max (fp.mul RNE x7 x1) (fp.div RNE x1 x8)) (fp.add RNE (fp.div RNE x5 x7) (fp.sqrt RNE x2)))) (fp.neg (fp.mul RNE (fp.add RNE (fp.abs x4) (fp.mul RNE x4 x2)) (fp.add RNE (fp.abs x8) (fp.abs x6))))) (fp.max (fp.abs (fp.roundToIntegral RNE (fp.min (fp.neg x8) (fp.abs x1)))) (fp.div RNE (fp.sqrt RNE (fp.abs (fp.mul RNE x4 x9))) (fp.add RNE (fp.abs (fp.abs x3)) (fp.div RNE (fp.sub RNE (fp.abs x9) (fp.add RNE x0 x0)) (fp.sqrt RNE (fp.sqrt RNE x9))))))))(check-sat)