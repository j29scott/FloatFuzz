;  time  = {'z3': 153.734, 'mathsat': 2.795426368713379}
;  terms = 87
;  score = 150.93857363128663
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.div RNE (fp.sqrt RNE (fp.max (fp.sqrt RNE x7) (fp.sqrt RNE x1))) (fp.sub RNE (fp.sqrt RNE (fp.neg x3)) (fp.sub RNE (fp.min x9 x1) (fp.abs x5)))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.div RNE x9 x7)) (fp.add RNE (fp.mul RNE x9 x6) (fp.add RNE x2 x9))) (fp.max (fp.min (fp.min x9 x3) (fp.max x9 x7)) (fp.max (fp.sub RNE x1 x0) (fp.add RNE x2 x3))))) (fp.add RNE (fp.min (fp.max (fp.max (fp.abs x3) (fp.add RNE x2 x8)) (fp.sqrt RNE (fp.min x1 x8))) (fp.add RNE (fp.min (fp.sub RNE x7 x2) (fp.sqrt RNE x5)) (fp.max (fp.min x1 x1) (fp.mul RNE x3 x8)))) (fp.sqrt RNE (fp.max (fp.mul RNE (fp.sub RNE x7 x7) (fp.neg x7)) (fp.div RNE (fp.roundToIntegral RNE x1) (fp.abs x1)))))))(check-sat)