;  time  = {'mathsat': 2.8666727542877197, 'z3': 284.014}
;  terms = 73
;  score = 281.1473272457123
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.roundToIntegral RNE (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.abs x4) (fp.add RNE (fp.mul RNE x2 x2) (fp.sqrt RNE x0))) (fp.mul RNE (fp.add RNE x2 x5) (fp.sqrt RNE x0))))) (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.sub RNE x8 x1) (fp.sub RNE (fp.sqrt RNE x5) (fp.min x9 x5))) (fp.add RNE (fp.add RNE x5 x1) (fp.add RNE x2 x4))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x0 x9) (fp.mul RNE x0 x4)) (fp.min (fp.abs x0) (fp.sqrt RNE x0)))) (fp.mul RNE (fp.min (fp.div RNE (fp.max x4 x1) (fp.div RNE x9 x3)) (fp.mul RNE (fp.abs x0) (fp.div RNE x9 x7))) (fp.neg (fp.max (fp.neg x5) (fp.neg x2)))))))(check-sat)