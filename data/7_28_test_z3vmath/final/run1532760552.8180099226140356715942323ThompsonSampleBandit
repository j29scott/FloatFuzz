;  time  = {'z3': 166.664, 'mathsat': 4.5241124629974365}
;  terms = 86
;  score = 162.13988753700255
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.abs (fp.neg x4)) (fp.max (fp.min x8 (fp.abs x7)) (fp.abs x4))) (fp.sqrt RNE (fp.min (fp.abs x9) (fp.min x6 (fp.neg x0))))) (fp.min (fp.add RNE (fp.add RNE (fp.sub RNE x3 x8) (fp.min x0 x3)) (fp.sub RNE (fp.mul RNE x3 x4) (fp.min x9 (fp.max x1 x2)))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.add RNE x5 x9)) (fp.abs (fp.min x7 x5))) (fp.min (fp.roundToIntegral RNE (fp.mul RNE x6 x3)) (fp.roundToIntegral RNE (fp.div RNE x1 x8)))))) (fp.abs (fp.sub RNE (fp.max (fp.min (fp.min x2 (fp.min x4 x0)) (fp.neg x1)) (fp.max (fp.min x6 x2) (fp.abs x5))) (fp.abs (fp.add RNE (fp.mul RNE x7 x0) (fp.min x2 (fp.div RNE x0 x5))))))))(check-sat)