;  time  = {'z3': 600, 'mathsat': 60.35611867904663}
;  terms = 89
;  score = 539.6438813209534
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.sub RNE (fp.add RNE (fp.div RNE (fp.add RNE x5 x7) (fp.abs x7)) (fp.mul RNE (fp.max (fp.roundToIntegral RNE x0) (fp.sub RNE x1 x8)) (fp.sqrt RNE (fp.min x2 x7)))) (fp.abs (fp.sub RNE (fp.neg x5) (fp.sub RNE x7 x2)))) (fp.div RNE (fp.min (fp.min (fp.max x6 x2) (fp.mul RNE x0 x6)) (fp.sqrt RNE (fp.roundToIntegral RNE x9))) (fp.abs (fp.sqrt RNE (fp.abs x6))))) (fp.add RNE (fp.sub RNE (fp.neg (fp.sqrt RNE (fp.div RNE x5 x0))) (fp.mul RNE (fp.min (fp.div RNE x8 x9) (fp.min x6 x9)) (fp.sqrt RNE (fp.abs x6)))) (fp.add RNE (fp.min (fp.max (fp.mul RNE x5 x6) (fp.max x4 x5)) (fp.min (fp.sub RNE x3 x0) (fp.min x5 x6))) (fp.mul RNE (fp.sub RNE (fp.div RNE x1 x6) (fp.neg x3)) (fp.sqrt RNE (fp.min x3 x3)))))))(check-sat)