;  time  = {'z3': 144.751, 'mathsat': 3.2854971885681152}
;  terms = 72
;  score = 141.4655028114319
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.roundToIntegral RNE (fp.min (fp.add RNE (fp.sqrt RNE x9) (fp.abs x1)) (fp.roundToIntegral RNE (fp.max x9 x1)))) (fp.abs (fp.sqrt RNE (fp.add RNE (fp.div RNE x9 x0) (fp.max x3 x5))))) (fp.max (fp.mul RNE (fp.min (fp.sub RNE (fp.div RNE x4 x4) (fp.sub RNE x5 x8)) (fp.div RNE (fp.add RNE x1 x0) (fp.max x0 x0))) (fp.div RNE (fp.sub RNE (fp.min x0 x3) (fp.min x6 x2)) (fp.add RNE (fp.add RNE x1 x2) (fp.div RNE x9 x5)))) (fp.div RNE (fp.min (fp.abs (fp.add RNE x2 x7)) (fp.sqrt RNE (fp.roundToIntegral RNE x9))) (fp.roundToIntegral RNE (fp.abs (fp.max (fp.mul RNE x6 x8) (fp.div RNE x1 x6))))))))(check-sat)