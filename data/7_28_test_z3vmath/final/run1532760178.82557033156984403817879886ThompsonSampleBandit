;  time  = {'mathsat': 5.084461450576782, 'z3': 84.063}
;  terms = 59
;  score = 78.97853854942322
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.roundToIntegral RNE (fp.sub RNE (fp.add RNE (fp.sub RNE (fp.sub RNE x7 x9) (fp.abs x9)) (fp.sqrt RNE (fp.mul RNE x3 x7))) (fp.max (fp.abs (fp.abs x3)) (fp.neg (fp.neg x0))))) (fp.mul RNE (fp.add RNE (fp.add RNE (fp.max (fp.roundToIntegral RNE x3) (fp.sqrt RNE x5)) (fp.neg (fp.sub RNE x9 x0))) (fp.min (fp.div RNE (fp.sqrt RNE x2) (fp.abs x0)) (fp.neg (fp.roundToIntegral RNE x1)))) (fp.min (fp.mul RNE (fp.add RNE (fp.div RNE x8 x2) (fp.sub RNE x4 x9)) (fp.roundToIntegral RNE (fp.mul RNE x5 x3))) (fp.abs (fp.sqrt RNE (fp.sqrt RNE x2)))))))(check-sat)