;  time  = {'mathsat': 23.513012170791626, 'z3': 579.119}
;  terms = 76
;  score = 555.6059878292084
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.max (fp.div RNE (fp.min x1 x6) (fp.min x2 x1)) (fp.mul RNE (fp.mul RNE x3 x7) (fp.add RNE x8 x4))) (fp.abs (fp.div RNE (fp.mul RNE x0 x7) (fp.div RNE x5 x7)))) (fp.mul RNE (fp.min (fp.sqrt RNE (fp.min x9 x2)) (fp.mul RNE (fp.min x9 x5) (fp.mul RNE x5 x0))) (fp.sqrt RNE (fp.neg (fp.max x2 x7))))) (fp.mul RNE (fp.abs (fp.sub RNE (fp.max (fp.abs x4) (fp.div RNE x8 x9)) (fp.abs (fp.roundToIntegral RNE x3)))) (fp.div RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x7 x0) (fp.div RNE x1 x9)) (fp.add RNE (fp.min x7 x6) (fp.div RNE x2 x9))) (fp.neg (fp.neg (fp.abs x7)))))))(check-sat)