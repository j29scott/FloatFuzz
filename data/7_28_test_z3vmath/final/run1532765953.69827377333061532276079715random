;  time  = {'z3': 229.205, 'mathsat': 27.937188148498535}
;  terms = 73
;  score = 201.26781185150148
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.neg (fp.max (fp.max (fp.min x2 x1) (fp.mul RNE x3 x9)) (fp.mul RNE (fp.mul RNE x5 x3) (fp.abs x0)))) (fp.div RNE (fp.sqrt RNE (fp.min (fp.div RNE x9 x0) (fp.sub RNE x7 x9))) (fp.min (fp.add RNE (fp.add RNE x3 x9) (fp.add RNE x6 x4)) (fp.mul RNE (fp.max x2 x7) (fp.roundToIntegral RNE (fp.add RNE x6 x9)))))) (fp.add RNE (fp.neg (fp.max (fp.max (fp.abs x6) (fp.roundToIntegral RNE x8)) (fp.max (fp.mul RNE x6 x8) (fp.roundToIntegral RNE x9)))) (fp.mul RNE (fp.min (fp.div RNE (fp.mul RNE x5 x9) (fp.min x2 x3)) (fp.roundToIntegral RNE (fp.neg x9))) (fp.roundToIntegral RNE (fp.abs (fp.sub RNE x5 x7)))))))(check-sat)