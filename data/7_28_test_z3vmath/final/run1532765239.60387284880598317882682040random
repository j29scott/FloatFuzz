;  time  = {'z3': 379.563, 'mathsat': 15.261609077453613}
;  terms = 72
;  score = 364.3013909225464
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.sub RNE (fp.abs (fp.sub RNE x0 (fp.max x0 x2))) (fp.neg (fp.neg x7))) (fp.add RNE (fp.add RNE (fp.neg x8) (fp.min x0 x2)) (fp.sqrt RNE (fp.div RNE x4 x0)))) (fp.add RNE (fp.sub RNE (fp.min (fp.roundToIntegral RNE x4) (fp.mul RNE x1 x9)) (fp.abs (fp.min x1 (fp.div RNE x6 x5)))) (fp.neg (fp.neg (fp.add RNE x9 x2))))) (fp.min (fp.min (fp.abs (fp.div RNE (fp.add RNE x1 x4) (fp.neg x8))) (fp.min (fp.neg (fp.mul RNE x1 x4)) (fp.abs (fp.sqrt RNE x5)))) (fp.mul RNE (fp.roundToIntegral RNE (fp.max (fp.roundToIntegral RNE x0) (fp.mul RNE x5 x3))) (fp.abs (fp.sqrt RNE (fp.sqrt RNE x4)))))))(check-sat)