;  time  = {'mathsat': 3.336005210876465, 'z3': 229.162}
;  terms = 84
;  score = 225.82599478912354
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.max (fp.div RNE (fp.sub RNE (fp.add RNE x1 x4) (fp.mul RNE (fp.sub RNE x5 x9) (fp.div RNE x9 x6))) (fp.min (fp.min x2 x5) (fp.sub RNE x6 (fp.roundToIntegral RNE x9)))) (fp.abs (fp.sub RNE (fp.neg x0) (fp.mul RNE x8 x0)))) (fp.abs (fp.neg (fp.add RNE (fp.add RNE x0 x8) (fp.sqrt RNE x4))))) (fp.min (fp.add RNE (fp.mul RNE (fp.add RNE (fp.neg x6) (fp.sub RNE x2 x6)) (fp.sqrt RNE (fp.div RNE x4 x1))) (fp.abs (fp.sub RNE (fp.abs x8) (fp.div RNE x7 x8)))) (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.max x5 x5)) (fp.sub RNE (fp.neg x9) (fp.add RNE x9 x0))) (fp.sub RNE (fp.mul RNE (fp.sub RNE x3 (fp.min x2 x2)) (fp.sub RNE x9 x9)) (fp.abs (fp.div RNE x9 x1)))))))(check-sat)