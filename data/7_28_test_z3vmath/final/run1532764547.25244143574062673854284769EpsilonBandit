;  time  = {'mathsat': 32.559645652770996, 'z3': 349.091}
;  terms = 78
;  score = 316.531354347229
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.roundToIntegral RNE (fp.div RNE (fp.min (fp.sqrt RNE (fp.sub RNE x1 x6)) (fp.div RNE (fp.sub RNE x4 x3) (fp.add RNE x2 x7))) (fp.max (fp.sub RNE (fp.sqrt RNE x4) (fp.sub RNE x0 x9)) (fp.abs (fp.min x9 (fp.div RNE x8 x0)))))) (fp.sub RNE (fp.min (fp.add RNE (fp.mul RNE (fp.min x6 (fp.roundToIntegral RNE x6)) (fp.sqrt RNE x5)) (fp.mul RNE (fp.abs x2) (fp.roundToIntegral RNE x7))) (fp.min (fp.abs (fp.div RNE x3 x1)) (fp.abs (fp.sub RNE x9 x1)))) (fp.add RNE (fp.sub RNE (fp.abs (fp.max x8 x8)) (fp.add RNE (fp.add RNE (fp.div RNE x6 x0) (fp.min x8 x6)) (fp.abs (fp.min x0 x2)))) (fp.div RNE (fp.neg (fp.sub RNE x6 x8)) (fp.abs (fp.neg x2)))))))(check-sat)