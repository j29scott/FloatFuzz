;  time  = {'mathsat': 9.927699565887451, 'z3': 190.84}
;  terms = 79
;  score = 180.91230043411255
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.abs (fp.max x4 x3))) (fp.abs (fp.sqrt RNE (fp.max x6 x1)))) (fp.add RNE (fp.abs (fp.div RNE (fp.sqrt RNE (fp.mul RNE x6 x5)) (fp.roundToIntegral RNE (fp.sub RNE x6 x8)))) (fp.mul RNE (fp.roundToIntegral RNE (fp.abs (fp.mul RNE x9 x3))) (fp.abs (fp.roundToIntegral RNE (fp.neg x4)))))) (fp.sub RNE (fp.mul RNE (fp.abs (fp.abs (fp.sub RNE x6 x9))) (fp.sqrt RNE (fp.neg (fp.max (fp.add RNE x3 x2) (fp.mul RNE x3 x9))))) (fp.mul RNE (fp.sqrt RNE (fp.abs (fp.mul RNE x4 (fp.mul RNE x7 x6)))) (fp.div RNE (fp.add RNE (fp.sub RNE (fp.abs x8) (fp.add RNE x6 x5)) (fp.mul RNE (fp.add RNE x4 x0) (fp.roundToIntegral RNE x5))) (fp.sqrt RNE (fp.max (fp.roundToIntegral RNE x6) (fp.mul RNE x6 x9))))))))(check-sat)