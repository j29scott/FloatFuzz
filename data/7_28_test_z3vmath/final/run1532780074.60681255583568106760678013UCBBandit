;  time  = {'mathsat': 49.884660720825195, 'z3': 453.188}
;  terms = 75
;  score = 403.3033392791748
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.max (fp.add RNE (fp.mul RNE (fp.roundToIntegral RNE x6) (fp.add RNE x9 x2)) (fp.min (fp.min x2 x8) (fp.add RNE x6 x5))) (fp.abs (fp.sqrt RNE (fp.min x6 x5)))) (fp.add RNE (fp.add RNE (fp.neg (fp.sqrt RNE x1)) (fp.div RNE (fp.div RNE x8 x5) (fp.add RNE x3 x1))) (fp.sqrt RNE (fp.sqrt RNE (fp.add RNE x8 x6))))) (fp.div RNE (fp.sub RNE (fp.neg (fp.sub RNE (fp.mul RNE x8 x3) (fp.min x5 x8))) (fp.max (fp.mul RNE (fp.mul RNE x1 x8) (fp.roundToIntegral RNE x2)) (fp.abs (fp.sqrt RNE x0)))) (fp.div RNE (fp.abs (fp.abs (fp.div RNE x4 x9))) (fp.add RNE (fp.div RNE (fp.sub RNE x5 x5) (fp.neg x0)) (fp.abs (fp.sqrt RNE x9)))))))(check-sat)