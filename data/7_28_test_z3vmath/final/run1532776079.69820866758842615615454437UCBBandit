;  time  = {'z3': 138.257, 'mathsat': 33.035932302474976}
;  terms = 75
;  score = 105.22106769752503
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.abs (fp.mul RNE (fp.sqrt RNE (fp.min x6 x7)) (fp.neg (fp.sqrt RNE x6)))) (fp.min (fp.min (fp.sqrt RNE (fp.mul RNE x8 x9)) (fp.sqrt RNE (fp.mul RNE x8 x1))) (fp.min (fp.add RNE (fp.div RNE x7 x0) (fp.min x6 x7)) (fp.min (fp.sub RNE x6 x9) (fp.sqrt RNE x7))))) (fp.add RNE (fp.sub RNE (fp.sqrt RNE (fp.div RNE (fp.abs x6) (fp.roundToIntegral RNE x0))) (fp.sub RNE (fp.add RNE (fp.roundToIntegral RNE x4) (fp.roundToIntegral RNE x4)) (fp.max (fp.sub RNE x8 x5) (fp.abs x4)))) (fp.min (fp.abs (fp.div RNE (fp.neg x2) (fp.roundToIntegral RNE x6))) (fp.mul RNE (fp.mul RNE (fp.abs x9) (fp.abs x8)) (fp.sub RNE (fp.max x6 x1) (fp.div RNE x4 x8)))))))(check-sat)