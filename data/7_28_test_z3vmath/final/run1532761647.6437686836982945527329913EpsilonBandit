;  time  = {'z3': 243.139, 'mathsat': 18.748838901519775}
;  terms = 89
;  score = 224.39016109848023
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.neg (fp.neg x7)) (fp.div RNE (fp.add RNE x9 x3) (fp.mul RNE x6 x9))) (fp.mul RNE (fp.max (fp.sub RNE x0 x8) (fp.roundToIntegral RNE x7)) (fp.max (fp.abs (fp.min x7 x6)) (fp.abs (fp.sub RNE x0 x1))))) (fp.div RNE (fp.min (fp.min (fp.mul RNE x2 x8) (fp.roundToIntegral RNE x0)) (fp.min (fp.sub RNE x5 (fp.div RNE x2 x8)) (fp.mul RNE x1 x3))) (fp.mul RNE (fp.roundToIntegral RNE (fp.min x1 x0)) (fp.sub RNE (fp.sub RNE x0 (fp.roundToIntegral RNE x5)) (fp.mul RNE x3 (fp.neg x2)))))) (fp.sub RNE (fp.roundToIntegral RNE (fp.add RNE (fp.max (fp.min x4 x1) (fp.roundToIntegral RNE x1)) (fp.mul RNE (fp.add RNE x3 x9) (fp.abs x8)))) (fp.sub RNE (fp.abs (fp.roundToIntegral RNE (fp.sub RNE x6 (fp.sub RNE x5 x7)))) (fp.abs (fp.abs (fp.sub RNE x9 x4)))))))(check-sat)