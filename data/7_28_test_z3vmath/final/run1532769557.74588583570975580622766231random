;  time  = {'z3': 327.13, 'mathsat': 6.0530104637146}
;  terms = 97
;  score = 321.0769895362854
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.sub RNE (fp.add RNE (fp.max (fp.neg x8) (fp.max x2 x5)) (fp.max (fp.abs (fp.neg x9)) (fp.max (fp.neg x4) (fp.max x2 x2)))) (fp.mul RNE (fp.add RNE (fp.max (fp.min x2 x7) (fp.sub RNE x2 x0)) (fp.add RNE (fp.min x2 x8) (fp.min x8 x1))) (fp.add RNE (fp.mul RNE (fp.mul RNE x8 x9) (fp.div RNE x0 x4)) (fp.div RNE (fp.div RNE x9 x8) (fp.add RNE x0 x1))))) (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x7)) (fp.mul RNE (fp.sqrt RNE x6) (fp.min x0 x6))) (fp.neg (fp.mul RNE (fp.neg x2) (fp.mul RNE x9 x5))))) (fp.abs (fp.sub RNE (fp.div RNE (fp.add RNE (fp.max x0 x1) (fp.min x7 x8)) (fp.max (fp.mul RNE x8 x8) (fp.div RNE x5 x6))) (fp.min (fp.add RNE (fp.div RNE x3 x1) (fp.mul RNE x0 x7)) (fp.abs (fp.sqrt RNE x0)))))))(check-sat)