;  time  = {'mathsat': 4.425520420074463, 'z3': 238.456}
;  terms = 93
;  score = 234.03047957992553
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.sqrt RNE x5) (fp.mul RNE x1 x9)) (fp.abs (fp.abs x8))) (fp.min (fp.div RNE (fp.sub RNE x3 (fp.min x4 x2)) (fp.max x9 x1)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x0)))) (fp.div RNE (fp.div RNE (fp.max (fp.roundToIntegral RNE (fp.add RNE x7 x1)) (fp.roundToIntegral RNE (fp.div RNE x3 x5))) (fp.add RNE (fp.mul RNE (fp.sqrt RNE x2) (fp.abs x1)) (fp.neg (fp.sub RNE x0 x3)))) (fp.neg (fp.abs (fp.min (fp.abs x4) (fp.add RNE x6 x8)))))) (fp.sub RNE (fp.add RNE (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE x0) (fp.sqrt RNE x5)) (fp.sqrt RNE (fp.sub RNE x9 x2))) (fp.sqrt RNE (fp.sub RNE (fp.max x9 x6) (fp.abs x8)))) (fp.min (fp.sqrt RNE (fp.max (fp.div RNE x5 x8) (fp.roundToIntegral RNE x8))) (fp.mul RNE (fp.div RNE (fp.min x4 x9) (fp.sub RNE x5 x1)) (fp.roundToIntegral RNE (fp.sqrt RNE x1)))))))(check-sat)