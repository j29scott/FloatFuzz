;  time  = {'mathsat': 4.667170763015747, 'z3': 150.094}
;  terms = 77
;  score = 145.42682923698425
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.abs x8)) (fp.min (fp.abs x8) (fp.sub RNE x1 x4))) (fp.mul RNE (fp.mul RNE (fp.roundToIntegral RNE x3) (fp.div RNE x9 x6)) (fp.sqrt RNE (fp.roundToIntegral RNE x9)))) (fp.max (fp.max (fp.abs (fp.max x4 x5)) (fp.sub RNE (fp.abs x5) (fp.abs x4))) (fp.max (fp.max (fp.roundToIntegral RNE x9) (fp.div RNE x9 x4)) (fp.sub RNE (fp.mul RNE x2 x9) (fp.neg x7))))) (fp.div RNE (fp.abs (fp.roundToIntegral RNE (fp.mul RNE (fp.add RNE x0 x0) (fp.sub RNE x9 x2)))) (fp.mul RNE (fp.neg (fp.div RNE (fp.neg x6) (fp.max x3 x3))) (fp.sub RNE (fp.neg (fp.div RNE x7 x2)) (fp.div RNE (fp.min x5 x8) (fp.add RNE x6 x0)))))))(check-sat)