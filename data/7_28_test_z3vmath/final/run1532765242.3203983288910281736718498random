;  time  = {'z3': 196.272, 'mathsat': 2.8024258613586426}
;  terms = 78
;  score = 193.46957413864135
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.sqrt RNE (fp.max (fp.min (fp.neg x7) (fp.abs x4)) (fp.div RNE (fp.roundToIntegral RNE x3) (fp.min x3 x3)))) (fp.roundToIntegral RNE (fp.abs (fp.roundToIntegral RNE (fp.add RNE x2 x2))))) (fp.div RNE (fp.max (fp.sub RNE (fp.abs (fp.sqrt RNE x0)) (fp.neg (fp.abs x2))) (fp.min (fp.max (fp.max (fp.div RNE x8 x1) (fp.abs x8)) (fp.min (fp.min x9 x5) (fp.neg x6))) (fp.abs (fp.min (fp.sqrt RNE x7) (fp.div RNE x7 x8))))) (fp.sub RNE (fp.min (fp.max (fp.sub RNE x9 x4) (fp.neg x0)) (fp.roundToIntegral RNE (fp.div RNE (fp.mul RNE x8 x2) (fp.min x4 x1)))) (fp.sub RNE (fp.abs (fp.sub RNE x0 x9)) (fp.max (fp.roundToIntegral RNE x6) (fp.min x9 x8)))))))(check-sat)