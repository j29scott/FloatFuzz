;  time  = {'z3': 300.536, 'mathsat': 4.888852834701538}
;  terms = 94
;  score = 295.64714716529846
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.abs (fp.min (fp.add RNE (fp.min x1 x4) (fp.min (fp.div RNE x0 x2) (fp.abs x6))) (fp.abs (fp.mul RNE x4 x9)))) (fp.max (fp.max (fp.sub RNE (fp.mul RNE x4 x2) (fp.min (fp.roundToIntegral RNE x9) (fp.div RNE x0 x9))) (fp.sub RNE (fp.roundToIntegral RNE x6) (fp.div RNE x3 x5))) (fp.div RNE (fp.sub RNE (fp.neg x3) (fp.neg x8)) (fp.sqrt RNE (fp.min x5 x2))))) (fp.min (fp.min (fp.add RNE (fp.max (fp.roundToIntegral RNE x2) (fp.roundToIntegral RNE x0)) (fp.sqrt RNE (fp.min x0 x7))) (fp.min (fp.sqrt RNE (fp.sub RNE x0 x6)) (fp.mul RNE (fp.sub RNE x1 x0) (fp.abs x4)))) (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.add RNE x0 x2) (fp.roundToIntegral RNE x1)) (fp.div RNE (fp.div RNE x0 x3) (fp.neg x5))) (fp.add RNE (fp.neg (fp.mul RNE x8 x6)) (fp.div RNE (fp.sqrt RNE x0) (fp.min x2 x2)))))))(check-sat)