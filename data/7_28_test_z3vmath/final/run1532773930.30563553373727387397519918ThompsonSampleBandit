;  time  = {'mathsat': 2.2117857933044434, 'z3': 114.755}
;  terms = 62
;  score = 112.54321420669555
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sqrt RNE (fp.mul RNE (fp.neg (fp.sub RNE (fp.max x8 x4) (fp.div RNE x9 x7))) (fp.add RNE (fp.roundToIntegral RNE (fp.abs x9)) (fp.roundToIntegral RNE (fp.neg x2))))) (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.max x8 x8) (fp.neg x3)) (fp.mul RNE (fp.abs x1) (fp.add RNE x2 x2))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x9 x7) (fp.abs x9)))) (fp.add RNE (fp.max (fp.mul RNE (fp.sub RNE x1 x8) (fp.roundToIntegral RNE x2)) (fp.roundToIntegral RNE (fp.abs x5))) (fp.sub RNE (fp.neg (fp.mul RNE x8 x5)) (fp.max (fp.add RNE x2 x8) (fp.neg x9)))))))(check-sat)