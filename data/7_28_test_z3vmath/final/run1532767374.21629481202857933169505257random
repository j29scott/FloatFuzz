;  time  = {'z3': 296.282, 'mathsat': 4.3864288330078125}
;  terms = 118
;  score = 291.89557116699217
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.min (fp.div RNE (fp.sqrt RNE (fp.max x5 x3)) (fp.neg (fp.max (fp.add RNE x3 x6) (fp.div RNE x6 x0)))) (fp.add RNE (fp.neg (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.add RNE x5 x8))) (fp.add RNE (fp.mul RNE (fp.sub RNE x6 x5) (fp.roundToIntegral RNE x8)) (fp.abs (fp.roundToIntegral RNE x4))))) (fp.mul RNE (fp.min (fp.div RNE (fp.abs (fp.div RNE x0 x3)) (fp.max (fp.add RNE x8 x3) (fp.min x6 x1))) (fp.add RNE (fp.roundToIntegral RNE (fp.neg x3)) (fp.neg (fp.sqrt RNE x1)))) (fp.min (fp.min (fp.max (fp.roundToIntegral RNE x2) (fp.abs x3)) (fp.max (fp.mul RNE x9 x9) (fp.sqrt RNE x2))) (fp.add RNE (fp.abs (fp.div RNE x7 x2)) (fp.min (fp.min x1 x4) (fp.neg x6)))))) (fp.add RNE (fp.min (fp.sub RNE (fp.min (fp.roundToIntegral RNE x1) (fp.max x6 x5)) (fp.neg (fp.sub RNE x9 x5))) (fp.abs (fp.mul RNE (fp.mul RNE x7 x4) (fp.sqrt RNE x7)))) (fp.neg (fp.add RNE (fp.add RNE (fp.div RNE x2 x8) (fp.roundToIntegral RNE x5)) (fp.sub RNE (fp.abs (fp.abs x1)) (fp.min (fp.add RNE x6 x5) (fp.div RNE x6 x4))))))))(check-sat)