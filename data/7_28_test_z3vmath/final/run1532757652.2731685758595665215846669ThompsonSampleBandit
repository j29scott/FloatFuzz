;  time  = {'mathsat': 58.0743625164032, 'z3': 320.416}
;  terms = 69
;  score = 262.3416374835968
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.add RNE (fp.div RNE (fp.abs (fp.roundToIntegral RNE x6)) (fp.neg (fp.min x9 x3))) (fp.add RNE (fp.mul RNE (fp.roundToIntegral RNE x6) (fp.mul RNE x4 x1)) (fp.neg (fp.abs x6)))) (fp.neg (fp.add RNE (fp.div RNE (fp.sqrt RNE x6) (fp.sub RNE x4 x5)) (fp.abs (fp.add RNE x2 x0))))) (fp.max (fp.neg (fp.roundToIntegral RNE (fp.sqrt RNE (fp.roundToIntegral RNE x9)))) (fp.div RNE (fp.max (fp.div RNE (fp.max x3 x3) (fp.add RNE x1 x3)) (fp.max (fp.min x7 x5) (fp.abs x5))) (fp.div RNE (fp.add RNE (fp.mul RNE x0 x6) (fp.max x7 x4)) (fp.max (fp.div RNE x9 x6) (fp.add RNE x8 x4)))))))(check-sat)