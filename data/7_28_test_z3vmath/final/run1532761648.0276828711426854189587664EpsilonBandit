;  time  = {'z3': 506.388, 'mathsat': 4.735615968704224}
;  terms = 97
;  score = 501.65238403129575
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.max (fp.mul RNE (fp.div RNE (fp.abs x4) (fp.abs (fp.max x5 x3))) (fp.sub RNE (fp.sub RNE x1 x0) (fp.div RNE x6 (fp.mul RNE x6 x8)))) (fp.mul RNE (fp.add RNE (fp.sub RNE x0 (fp.neg x4)) (fp.max x8 x0)) (fp.sub RNE (fp.abs x8) (fp.sub RNE (fp.max x2 x4) (fp.sub RNE x7 x5))))) (fp.roundToIntegral RNE (fp.div RNE (fp.sub RNE (fp.sub RNE x3 (fp.div RNE x9 x9)) (fp.add RNE x9 x4)) (fp.min (fp.sub RNE x5 (fp.roundToIntegral RNE x8)) (fp.neg x2))))) (fp.add RNE (fp.add RNE (fp.div RNE (fp.min (fp.min x2 x4) (fp.max x4 x3)) (fp.min (fp.sub RNE x5 x8) (fp.div RNE x0 x9))) (fp.div RNE (fp.min (fp.div RNE x1 x3) (fp.neg x2)) (fp.mul RNE (fp.min x5 x2) (fp.div RNE x0 x6)))) (fp.abs (fp.neg (fp.div RNE (fp.mul RNE x8 x3) (fp.max x1 x2)))))))(check-sat)