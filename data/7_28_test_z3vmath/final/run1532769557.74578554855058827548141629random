;  time  = {'mathsat': 14.838757753372192, 'z3': 313.486}
;  terms = 72
;  score = 298.6472422466278
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.neg (fp.add RNE (fp.neg (fp.sub RNE (fp.sub RNE x1 x8) (fp.sub RNE x6 x5))) (fp.max (fp.abs (fp.abs x5)) (fp.div RNE (fp.mul RNE x7 x7) (fp.mul RNE x7 x8))))) (fp.max (fp.div RNE (fp.max (fp.sqrt RNE (fp.min x1 x9)) (fp.sqrt RNE (fp.min x3 x8))) (fp.min (fp.sub RNE (fp.sqrt RNE x7) (fp.min (fp.sub RNE x3 x0) (fp.sub RNE x4 x9))) (fp.neg (fp.mul RNE x5 x5)))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE (fp.neg x6) (fp.abs (fp.sub RNE x1 x3)))) (fp.sub RNE (fp.roundToIntegral RNE (fp.add RNE x8 x4)) (fp.sub RNE (fp.max (fp.max x4 x7) (fp.sqrt RNE x6)) (fp.roundToIntegral RNE (fp.sqrt RNE x0))))))))(check-sat)