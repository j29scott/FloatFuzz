;  time  = {'z3': 346.1, 'mathsat': 82.46723818778992}
;  terms = 78
;  score = 263.6327618122101
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.add RNE (fp.add RNE (fp.max (fp.div RNE x1 x9) (fp.sqrt RNE x9)) (fp.sqrt RNE (fp.sub RNE x7 x1))) (fp.neg (fp.mul RNE (fp.div RNE x1 x1) (fp.add RNE x3 x7)))) (fp.div RNE (fp.max (fp.neg (fp.mul RNE x8 x4)) (fp.roundToIntegral RNE (fp.min x9 x4))) (fp.min (fp.sub RNE (fp.mul RNE x5 x3) (fp.min x6 x8)) (fp.sub RNE (fp.sub RNE x9 x0) (fp.sub RNE x3 x2))))) (fp.max (fp.min (fp.max (fp.mul RNE (fp.neg x7) (fp.roundToIntegral RNE x4)) (fp.add RNE (fp.sqrt RNE x7) (fp.mul RNE x8 x2))) (fp.sqrt RNE (fp.add RNE (fp.add RNE x5 x1) (fp.div RNE x0 x5)))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.max (fp.add RNE x9 x1) (fp.mul RNE x9 x8)))))))(check-sat)