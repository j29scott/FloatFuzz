;  time  = {'mathsat': 18.952316999435425, 'z3': 376.192}
;  terms = 74
;  score = 357.2396830005646
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.neg (fp.div RNE (fp.min x0 x0) (fp.sqrt RNE x5))) (fp.abs (fp.min (fp.abs x9) (fp.min x3 x0)))) (fp.sqrt RNE (fp.div RNE (fp.add RNE (fp.min x3 x3) (fp.min x2 x8)) (fp.neg (fp.neg x9))))) (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.min (fp.sub RNE x4 x8) (fp.div RNE x9 x6)) (fp.abs (fp.neg x8))) (fp.mul RNE (fp.mul RNE (fp.div RNE x1 x1) (fp.neg x8)) (fp.sqrt RNE (fp.neg x7)))) (fp.max (fp.sqrt RNE (fp.add RNE (fp.mul RNE x4 x6) (fp.neg x2))) (fp.mul RNE (fp.sub RNE (fp.div RNE x0 x2) (fp.sqrt RNE x1)) (fp.div RNE (fp.mul RNE x6 x5) (fp.div RNE x5 x5)))))))(check-sat)