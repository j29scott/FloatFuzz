;  time  = {'mathsat': 2.584023952484131, 'z3': 211.391}
;  terms = 73
;  score = 208.80697604751586
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.sub RNE (fp.sqrt RNE (fp.mul RNE (fp.sqrt RNE x3) (fp.abs x7))) (fp.div RNE (fp.abs (fp.abs x9)) (fp.sub RNE (fp.min x5 x4) (fp.mul RNE x8 x1)))) (fp.mul RNE (fp.min (fp.neg (fp.abs x3)) (fp.min (fp.add RNE x5 x0) (fp.abs x8))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x3 x4) (fp.sub RNE x5 x1)) (fp.add RNE (fp.abs x4) (fp.abs x0))))) (fp.sub RNE (fp.abs (fp.abs (fp.mul RNE (fp.neg x1) (fp.mul RNE x2 x2)))) (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.abs x2) (fp.abs x5)) (fp.mul RNE (fp.abs x8) (fp.div RNE x8 x5))) (fp.sqrt RNE (fp.add RNE (fp.div RNE x5 x6) (fp.roundToIntegral RNE x8)))))))(check-sat)