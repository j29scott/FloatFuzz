;  time  = {'mathsat': 2.805630683898926, 'z3': 212.31}
;  terms = 84
;  score = 209.50436931610108
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.mul RNE (fp.max (fp.roundToIntegral RNE (fp.div RNE (fp.roundToIntegral RNE x5) (fp.abs x5))) (fp.abs (fp.sqrt RNE (fp.max (fp.abs x2) (fp.mul RNE x6 x9))))) (fp.min (fp.roundToIntegral RNE (fp.abs (fp.abs x5))) (fp.max (fp.sqrt RNE (fp.roundToIntegral RNE x9)) (fp.min (fp.div RNE x6 x8) (fp.abs x5))))) (fp.div RNE (fp.max (fp.max (fp.sub RNE (fp.max x0 x5) (fp.roundToIntegral RNE x5)) (fp.min (fp.div RNE (fp.add RNE x7 x8) (fp.sub RNE x5 x9)) (fp.sub RNE (fp.abs x4) (fp.abs x8)))) (fp.abs (fp.mul RNE (fp.sqrt RNE x1) (fp.mul RNE x6 x5)))) (fp.max (fp.mul RNE (fp.sqrt RNE (fp.abs x1)) (fp.div RNE (fp.roundToIntegral RNE x2) (fp.sub RNE x6 x7))) (fp.add RNE (fp.sub RNE (fp.abs x7) (fp.abs x3)) (fp.min (fp.max x9 x0) (fp.abs x3)))))))(check-sat)