;  time  = {'mathsat': 21.319750547409058, 'z3': 324.776}
;  terms = 68
;  score = 303.45624945259095
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE (fp.neg (fp.sqrt RNE x9)) (fp.roundToIntegral RNE (fp.div RNE x3 x9))) (fp.roundToIntegral RNE (fp.max (fp.sub RNE x5 x7) (fp.div RNE x3 x8))))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.div RNE x5 x9) (fp.div RNE x9 x2)) (fp.mul RNE (fp.sqrt RNE x4) (fp.max x6 x7))) (fp.neg (fp.min (fp.neg x3) (fp.neg x5)))) (fp.sub RNE (fp.mul RNE (fp.abs (fp.mul RNE x5 x7)) (fp.min (fp.roundToIntegral RNE x3) (fp.add RNE x8 x0))) (fp.min (fp.div RNE (fp.min x6 x2) (fp.min x0 x3)) (fp.min (fp.add RNE x9 x6) (fp.min x9 x9)))))))(check-sat)