;  time  = {'z3': 153.267, 'mathsat': 7.106686353683472}
;  terms = 73
;  score = 146.16031364631652
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.min (fp.max (fp.max (fp.neg x2) (fp.mul RNE x1 x7)) (fp.add RNE (fp.add RNE x2 x5) (fp.abs x1))) (fp.mul RNE (fp.roundToIntegral RNE (fp.sqrt RNE x5)) (fp.sqrt RNE (fp.abs x9)))) (fp.roundToIntegral RNE (fp.min (fp.abs (fp.sqrt RNE x4)) (fp.abs (fp.min x8 x9))))) (fp.min (fp.sub RNE (fp.max (fp.roundToIntegral RNE (fp.max x5 x1)) (fp.add RNE (fp.abs x7) (fp.mul RNE x4 x0))) (fp.max (fp.mul RNE (fp.min x8 x3) (fp.max x9 x8)) (fp.div RNE (fp.mul RNE x2 x8) (fp.max x7 x9)))) (fp.roundToIntegral RNE (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE x4 x4)) (fp.min (fp.max x8 x6) (fp.sub RNE x1 x3)))))))(check-sat)