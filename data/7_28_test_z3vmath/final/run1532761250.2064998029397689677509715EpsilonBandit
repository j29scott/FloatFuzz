;  time  = {'mathsat': 3.5929625034332275, 'z3': 307.495}
;  terms = 96
;  score = 303.9020374965668
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.max (fp.mul RNE (fp.div RNE (fp.max (fp.div RNE x4 x8) (fp.max x0 x8)) (fp.div RNE (fp.roundToIntegral RNE (fp.sub RNE x9 x2)) (fp.mul RNE (fp.mul RNE x4 x2) (fp.min x7 x8)))) (fp.max (fp.max (fp.sub RNE (fp.add RNE x1 x9) (fp.div RNE x1 x8)) (fp.sub RNE (fp.min x4 x0) (fp.neg x4))) (fp.add RNE (fp.sqrt RNE (fp.max x0 x1)) (fp.min (fp.add RNE x5 x9) (fp.add RNE x0 x4))))) (fp.sub RNE (fp.abs (fp.div RNE (fp.mul RNE x9 x1) (fp.mul RNE x1 x9))) (fp.max (fp.abs (fp.abs x4)) (fp.max (fp.mul RNE x6 x3) (fp.max (fp.abs x6) (fp.neg x3)))))) (fp.abs (fp.add RNE (fp.abs (fp.sqrt RNE (fp.min x1 x2))) (fp.mul RNE (fp.mul RNE (fp.mul RNE x8 x0) (fp.max (fp.sub RNE x6 x2) (fp.div RNE x7 x8))) (fp.roundToIntegral RNE (fp.abs (fp.mul RNE x2 x5))))))))(check-sat)