;  time  = {'mathsat': 5.395800590515137, 'z3': 187.3}
;  terms = 71
;  score = 181.90419940948487
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sqrt RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.div RNE (fp.roundToIntegral RNE x9) (fp.abs x6)) (fp.min (fp.min x4 x3) (fp.min (fp.sqrt RNE x4) (fp.min x9 x9)))))) (fp.min (fp.add RNE (fp.add RNE (fp.min (fp.div RNE x2 x0) (fp.div RNE x0 x5)) (fp.add RNE (fp.div RNE (fp.add RNE x3 x1) (fp.neg x8)) (fp.max (fp.sqrt RNE x5) (fp.roundToIntegral RNE x8)))) (fp.mul RNE (fp.abs (fp.max x7 x8)) (fp.abs (fp.abs x3)))) (fp.mul RNE (fp.sub RNE (fp.abs (fp.neg x4)) (fp.roundToIntegral RNE (fp.sqrt RNE x9))) (fp.add RNE (fp.mul RNE (fp.abs x0) (fp.mul RNE x7 x5)) (fp.div RNE (fp.mul RNE x1 x1) (fp.max x0 x4)))))))(check-sat)