;  time  = {'mathsat': 1.7996289730072021, 'z3': 95.041}
;  terms = 72
;  score = 93.2413710269928
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.mul RNE (fp.sub RNE (fp.min (fp.abs (fp.roundToIntegral RNE x6)) (fp.sqrt RNE (fp.min x4 x8))) (fp.sub RNE (fp.max (fp.add RNE x0 x1) (fp.min x5 x9)) (fp.abs (fp.mul RNE x5 x9)))) (fp.mul RNE (fp.sqrt RNE (fp.min (fp.add RNE x0 x7) (fp.div RNE x3 x4))) (fp.neg (fp.abs (fp.sub RNE x6 x1))))) (fp.min (fp.add RNE (fp.div RNE (fp.min (fp.roundToIntegral RNE x2) (fp.add RNE x7 x2)) (fp.abs (fp.abs x0))) (fp.abs (fp.abs (fp.abs x5)))) (fp.div RNE (fp.min (fp.max (fp.add RNE x2 x6) (fp.max x5 x0)) (fp.mul RNE (fp.abs x4) (fp.mul RNE x8 x1))) (fp.abs (fp.sqrt RNE (fp.abs x4)))))))(check-sat)