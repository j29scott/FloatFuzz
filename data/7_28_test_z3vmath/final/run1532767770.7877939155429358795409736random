;  time  = {'mathsat': 3.534949779510498, 'z3': 254.325}
;  terms = 82
;  score = 250.7900502204895
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.neg x0)) (fp.mul RNE (fp.max x2 x3) (fp.div RNE x5 (fp.neg x4)))) (fp.neg (fp.min (fp.neg x0) (fp.div RNE x8 x5)))) (fp.min (fp.add RNE (fp.sub RNE (fp.sub RNE x5 x1) (fp.sqrt RNE x6)) (fp.roundToIntegral RNE (fp.min x0 x9))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x8 (fp.neg x7)) (fp.sub RNE x6 x3)) (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE x8) (fp.sub RNE x7 x2)) (fp.neg (fp.mul RNE x8 x2)))))) (fp.mul RNE (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE (fp.mul RNE x0 x3)) (fp.roundToIntegral RNE (fp.neg x6))) (fp.sub RNE (fp.max (fp.roundToIntegral RNE x1) (fp.sub RNE x5 x8)) (fp.roundToIntegral RNE (fp.neg x7)))) (fp.abs (fp.abs (fp.max (fp.sqrt RNE x3) (fp.mul RNE x9 x4)))))))(check-sat)