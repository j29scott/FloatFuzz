;  time  = {'z3': 424.705, 'mathsat': 9.205324172973633}
;  terms = 86
;  score = 415.49967582702635
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.mul RNE (fp.sub RNE (fp.abs (fp.roundToIntegral RNE (fp.roundToIntegral RNE x4))) (fp.min (fp.abs (fp.mul RNE x9 x3)) (fp.roundToIntegral RNE (fp.abs x6)))) (fp.min (fp.min (fp.mul RNE (fp.abs x0) (fp.mul RNE x2 (fp.sqrt RNE x5))) (fp.roundToIntegral RNE (fp.mul RNE x2 x9))) (fp.max (fp.neg (fp.add RNE x5 x7)) (fp.sub RNE (fp.max x2 x4) (fp.div RNE x6 x7))))) (fp.div RNE (fp.sqrt RNE (fp.div RNE (fp.min (fp.div RNE x8 x0) (fp.min x9 x2)) (fp.div RNE (fp.sub RNE x5 x6) (fp.abs (fp.add RNE x0 x1))))) (fp.mul RNE (fp.abs (fp.sub RNE (fp.sub RNE (fp.add RNE x8 x3) (fp.sqrt RNE x2)) (fp.roundToIntegral RNE (fp.max x8 x8)))) (fp.neg (fp.add RNE (fp.div RNE (fp.div RNE x0 x0) (fp.sub RNE x1 x0)) (fp.add RNE (fp.mul RNE x8 x3) (fp.abs x4))))))))(check-sat)