;  time  = {'mathsat': 29.07650399208069, 'z3': 302.164}
;  terms = 68
;  score = 273.0874960079193
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.abs (fp.roundToIntegral RNE (fp.add RNE (fp.mul RNE x0 x8) (fp.abs x1)))) (fp.div RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.min x9 x7) (fp.div RNE x4 x7))) (fp.abs (fp.sub RNE (fp.mul RNE x8 x2) (fp.roundToIntegral RNE x8))))) (fp.min (fp.roundToIntegral RNE (fp.min (fp.mul RNE (fp.add RNE x6 x6) (fp.abs x1)) (fp.add RNE (fp.mul RNE x9 x3) (fp.mul RNE x8 x0)))) (fp.max (fp.div RNE (fp.sub RNE (fp.sqrt RNE x1) (fp.sqrt RNE x2)) (fp.max (fp.mul RNE x4 x9) (fp.neg x3))) (fp.div RNE (fp.max (fp.roundToIntegral RNE x5) (fp.sub RNE x5 x3)) (fp.sub RNE (fp.add RNE x5 x1) (fp.neg x9)))))))(check-sat)