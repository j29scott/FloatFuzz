;  time  = {'mathsat': 4.21788215637207, 'z3': 177.278}
;  terms = 63
;  score = 173.06011784362792
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.max (fp.add RNE (fp.sqrt RNE (fp.min x9 x5)) (fp.sqrt RNE (fp.sqrt RNE x8))) (fp.mul RNE (fp.max (fp.add RNE x6 x5) (fp.mul RNE x7 x7)) (fp.sub RNE (fp.neg x8) (fp.sqrt RNE x3)))) (fp.abs (fp.abs (fp.abs (fp.neg x4))))) (fp.mul RNE (fp.mul RNE (fp.min (fp.roundToIntegral RNE (fp.sqrt RNE x9)) (fp.roundToIntegral RNE (fp.abs x7))) (fp.sub RNE (fp.sqrt RNE (fp.roundToIntegral RNE x6)) (fp.mul RNE (fp.mul RNE x4 x6) (fp.add RNE x0 x9)))) (fp.abs (fp.add RNE (fp.div RNE (fp.sqrt RNE x8) (fp.mul RNE x0 x9)) (fp.div RNE (fp.roundToIntegral RNE x1) (fp.max x2 x0)))))))(check-sat)