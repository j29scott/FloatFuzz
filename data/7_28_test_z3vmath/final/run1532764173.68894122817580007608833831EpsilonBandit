;  time  = {'mathsat': 10.787539005279541, 'z3': 287.089}
;  terms = 73
;  score = 276.30146099472046
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.div RNE (fp.min (fp.div RNE (fp.abs x6) (fp.neg (fp.abs x6))) (fp.sqrt RNE (fp.div RNE x1 x0))) (fp.sqrt RNE (fp.sub RNE (fp.roundToIntegral RNE x4) (fp.roundToIntegral RNE x2)))) (fp.min (fp.sub RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x8)) (fp.abs (fp.max x9 x0))) (fp.div RNE (fp.add RNE (fp.div RNE x1 x2) (fp.add RNE x9 x9)) (fp.add RNE (fp.add RNE x1 x4) (fp.div RNE x7 (fp.add RNE x4 x6)))))) (fp.min (fp.mul RNE (fp.sqrt RNE (fp.div RNE (fp.roundToIntegral RNE x1) (fp.roundToIntegral RNE x5))) (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE x7) (fp.div RNE x1 x3)) (fp.min (fp.div RNE x3 x4) (fp.abs x6)))) (fp.abs (fp.sqrt RNE (fp.abs (fp.min x6 x3)))))))(check-sat)