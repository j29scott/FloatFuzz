;  time  = {'mathsat': 26.06541395187378, 'z3': 299.891}
;  terms = 94
;  score = 273.82558604812624
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sub RNE (fp.min (fp.add RNE (fp.add RNE (fp.sub RNE x7 (fp.div RNE x8 x2)) (fp.neg x3)) (fp.mul RNE (fp.sub RNE x9 (fp.mul RNE x5 x4)) (fp.sub RNE (fp.add RNE x5 x3) (fp.max x2 x8)))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.min x5 x0)))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.min (fp.neg x2) (fp.sqrt RNE (fp.add RNE x6 x2)))))) (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE (fp.neg (fp.min x6 (fp.mul RNE x1 x0)))) (fp.div RNE (fp.neg (fp.min x5 x7)) (fp.min (fp.sub RNE (fp.div RNE x2 x7) (fp.min x9 x6)) (fp.sub RNE (fp.sub RNE x5 x8) (fp.neg x2))))) (fp.neg (fp.mul RNE (fp.mul RNE (fp.max (fp.sqrt RNE x8) (fp.sub RNE x6 x2)) (fp.neg (fp.roundToIntegral RNE x2))) (fp.div RNE (fp.mul RNE (fp.sub RNE x0 x2) (fp.min x5 x3)) (fp.div RNE (fp.mul RNE x4 x2) (fp.mul RNE x1 x3))))))))(check-sat)