;  time  = {'z3': 240.056, 'mathsat': 13.854138612747192}
;  terms = 86
;  score = 226.20186138725282
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.add RNE (fp.mul RNE (fp.min (fp.max x3 x5) (fp.div RNE x7 x2)) (fp.div RNE (fp.abs x6) (fp.abs x8))) (fp.abs (fp.neg (fp.div RNE x7 x1)))) (fp.sub RNE (fp.div RNE (fp.add RNE (fp.abs x6) (fp.div RNE x9 x0)) (fp.roundToIntegral RNE (fp.min x7 x6))) (fp.min (fp.sqrt RNE (fp.div RNE x8 x5)) (fp.abs (fp.max x6 x4))))) (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.max (fp.min x6 x5) (fp.add RNE x6 x1)) (fp.sub RNE (fp.sub RNE x5 x5) (fp.roundToIntegral RNE x1))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x1 x2) (fp.min x2 x1)) (fp.sqrt RNE (fp.div RNE x3 x5)))) (fp.sub RNE (fp.neg (fp.sqrt RNE (fp.neg x4))) (fp.mul RNE (fp.div RNE (fp.roundToIntegral RNE x0) (fp.add RNE x5 x9)) (fp.sqrt RNE (fp.sub RNE x4 x2)))))))(check-sat)