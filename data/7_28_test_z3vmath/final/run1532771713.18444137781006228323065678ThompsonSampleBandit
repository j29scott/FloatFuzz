;  time  = {'mathsat': 9.551504611968994, 'z3': 222.963}
;  terms = 85
;  score = 213.411495388031
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.neg (fp.neg (fp.sub RNE (fp.add RNE x6 (fp.max x1 x3)) (fp.neg x9)))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.min x3 x5) (fp.add RNE x5 x7)) (fp.min (fp.mul RNE x0 x7) (fp.min x9 x8))) (fp.max (fp.div RNE (fp.neg x3) (fp.roundToIntegral RNE x5)) (fp.add RNE (fp.max x7 x3) (fp.neg x2)))))) (fp.mul RNE (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.max x3 x2) (fp.min x0 x5)) (fp.add RNE (fp.sqrt RNE x9) (fp.mul RNE x1 x4))) (fp.add RNE (fp.div RNE (fp.div RNE x6 x7) (fp.max x3 x4)) (fp.add RNE (fp.add RNE x6 x9) (fp.neg (fp.max x1 x4))))) (fp.abs (fp.mul RNE (fp.sqrt RNE (fp.max x7 x3)) (fp.neg (fp.add RNE x1 (fp.max x9 x1))))))))(check-sat)