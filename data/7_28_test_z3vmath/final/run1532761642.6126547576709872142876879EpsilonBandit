;  time  = {'mathsat': 3.3940627574920654, 'z3': 404.136}
;  terms = 103
;  score = 400.74193724250796
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.mul RNE (fp.add RNE (fp.mul RNE (fp.max x8 x5) (fp.sqrt RNE x6)) (fp.sub RNE (fp.max x8 x4) (fp.sub RNE x7 x8))) (fp.sub RNE (fp.mul RNE (fp.add RNE x5 x7) (fp.div RNE x8 x8)) (fp.max (fp.sqrt RNE (fp.sub RNE x0 x2)) (fp.sub RNE (fp.add RNE x8 x7) (fp.mul RNE x8 x9))))) (fp.sub RNE (fp.min (fp.sqrt RNE (fp.sub RNE x9 x5)) (fp.div RNE (fp.sub RNE x4 (fp.mul RNE x6 x6)) (fp.div RNE x1 x9))) (fp.sub RNE (fp.max (fp.max (fp.min x2 x5) (fp.abs x7)) (fp.sub RNE (fp.roundToIntegral RNE x2) (fp.sqrt RNE x0))) (fp.add RNE (fp.min (fp.abs x0) (fp.mul RNE x5 x0)) (fp.sub RNE (fp.add RNE x4 x1) (fp.roundToIntegral RNE x8)))))) (fp.div RNE (fp.neg (fp.sub RNE (fp.add RNE (fp.sub RNE x1 x2) (fp.abs x4)) (fp.max (fp.abs x4) (fp.sub RNE x1 (fp.mul RNE x0 x7))))) (fp.abs (fp.roundToIntegral RNE (fp.div RNE (fp.sub RNE x8 x7) (fp.abs x3)))))))(check-sat)