;  time  = {'z3': 90.949, 'mathsat': 4.888557434082031}
;  terms = 65
;  score = 86.06044256591797
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.add RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.sub RNE (fp.add RNE x2 x5) (fp.neg x5)) (fp.mul RNE (fp.sqrt RNE x2) (fp.roundToIntegral RNE x4)))) (fp.min (fp.sqrt RNE (fp.mul RNE (fp.roundToIntegral RNE x2) (fp.neg x0))) (fp.div RNE (fp.max (fp.div RNE x7 x9) (fp.div RNE x4 x9)) (fp.add RNE (fp.sub RNE x4 x4) (fp.abs x5))))) (fp.mul RNE (fp.neg (fp.abs (fp.sub RNE (fp.max x9 x1) (fp.sub RNE x6 x0)))) (fp.min (fp.mul RNE (fp.min (fp.neg x2) (fp.sqrt RNE x8)) (fp.div RNE (fp.sqrt RNE x0) (fp.mul RNE x1 x7))) (fp.roundToIntegral RNE (fp.max (fp.roundToIntegral RNE x0) (fp.neg x9)))))))(check-sat)