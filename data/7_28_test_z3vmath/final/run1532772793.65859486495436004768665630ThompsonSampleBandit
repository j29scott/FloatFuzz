;  time  = {'mathsat': 7.369129180908203, 'z3': 155.91}
;  terms = 79
;  score = 148.5408708190918
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.max (fp.add RNE (fp.sub RNE (fp.add RNE x3 x5) (fp.sqrt RNE x1)) (fp.roundToIntegral RNE (fp.sub RNE x8 x0))) (fp.abs (fp.mul RNE (fp.neg x9) (fp.neg x9)))) (fp.add RNE (fp.max (fp.sub RNE (fp.max x4 x6) (fp.sub RNE x4 x7)) (fp.div RNE (fp.add RNE x6 x4) (fp.div RNE x2 x8))) (fp.mul RNE (fp.neg (fp.neg x5)) (fp.max (fp.mul RNE x6 x4) (fp.sub RNE x9 x2))))) (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE (fp.min (fp.neg x7) (fp.mul RNE x1 x4)))) (fp.div RNE (fp.neg (fp.max (fp.div RNE x4 x5) (fp.mul RNE x9 x0))) (fp.max (fp.max (fp.roundToIntegral RNE x6) (fp.sub RNE x0 x6)) (fp.add RNE (fp.sub RNE x4 x2) (fp.add RNE x3 x4)))))))(check-sat)