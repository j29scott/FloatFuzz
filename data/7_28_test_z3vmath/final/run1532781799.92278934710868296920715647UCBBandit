;  time  = {'mathsat': 3.683285713195801, 'z3': 166.857}
;  terms = 68
;  score = 163.1737142868042
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sub RNE (fp.div RNE (fp.neg (fp.add RNE (fp.abs x0) (fp.mul RNE x7 x4))) (fp.abs (fp.sqrt RNE (fp.neg x5)))) (fp.max (fp.add RNE (fp.roundToIntegral RNE (fp.min x3 x6)) (fp.roundToIntegral RNE (fp.min x3 x6))) (fp.max (fp.min (fp.sqrt RNE x3) (fp.mul RNE x4 x5)) (fp.sqrt RNE (fp.abs x1))))) (fp.mul RNE (fp.abs (fp.div RNE (fp.abs (fp.div RNE x9 x4)) (fp.abs (fp.abs x9)))) (fp.sub RNE (fp.add RNE (fp.sub RNE (fp.abs x2) (fp.div RNE x5 x2)) (fp.div RNE (fp.abs x6) (fp.div RNE x0 x0))) (fp.add RNE (fp.neg (fp.roundToIntegral RNE x3)) (fp.mul RNE (fp.neg x0) (fp.max x5 x4)))))))(check-sat)