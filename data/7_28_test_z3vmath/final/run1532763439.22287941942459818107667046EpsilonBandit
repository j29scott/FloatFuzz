;  time  = {'z3': 513.943, 'mathsat': 3.5883963108062744}
;  terms = 71
;  score = 510.3546036891937
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.div RNE (fp.min (fp.abs (fp.abs x3)) (fp.div RNE (fp.div RNE (fp.mul RNE x9 x4) (fp.neg x1)) (fp.mul RNE (fp.roundToIntegral RNE x7) (fp.min x3 x9)))) (fp.min (fp.max (fp.abs x0) (fp.roundToIntegral RNE x4)) (fp.abs (fp.min x6 x5)))) (fp.div RNE (fp.div RNE (fp.neg (fp.mul RNE x1 x3)) (fp.min (fp.abs x4) (fp.div RNE x5 x0))) (fp.min (fp.abs (fp.abs x2)) (fp.neg (fp.sqrt RNE (fp.add RNE x8 x1)))))) (fp.sub RNE (fp.abs (fp.abs (fp.max (fp.min x3 (fp.mul RNE x6 x3)) (fp.div RNE x1 x6)))) (fp.abs (fp.roundToIntegral RNE (fp.min (fp.add RNE x6 x9) (fp.abs x0)))))))(check-sat)