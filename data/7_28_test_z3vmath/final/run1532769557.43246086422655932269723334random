;  time  = {'z3': 415.272, 'mathsat': 7.173196792602539}
;  terms = 88
;  score = 408.09880320739745
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.min (fp.mul RNE (fp.sub RNE (fp.neg x5) (fp.min x7 x0)) (fp.mul RNE (fp.abs x1) (fp.sqrt RNE x6))) (fp.max (fp.max (fp.abs x3) (fp.max x8 x2)) (fp.max (fp.sub RNE x3 x7) (fp.sub RNE x0 x4)))) (fp.div RNE (fp.sub RNE (fp.sqrt RNE (fp.add RNE x2 x3)) (fp.add RNE (fp.roundToIntegral RNE x3) (fp.sqrt RNE x6))) (fp.add RNE (fp.min (fp.div RNE x5 x2) (fp.sub RNE x1 x1)) (fp.mul RNE (fp.min x9 x3) (fp.add RNE x4 x5))))) (fp.mul RNE (fp.sub RNE (fp.sqrt RNE (fp.min (fp.neg x8) (fp.roundToIntegral RNE x6))) (fp.neg (fp.sub RNE (fp.div RNE x8 x3) (fp.min x0 x7)))) (fp.sub RNE (fp.roundToIntegral RNE (fp.div RNE (fp.abs x6) (fp.sub RNE x2 x6))) (fp.min (fp.sub RNE (fp.roundToIntegral RNE x9) (fp.abs x5)) (fp.neg (fp.sqrt RNE x2)))))))(check-sat)