;  time  = {'z3': 600, 'mathsat': 17.526939630508423}
;  terms = 92
;  score = 582.4730603694916
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.div RNE (fp.add RNE (fp.sqrt RNE (fp.sub RNE x9 x5)) (fp.sub RNE (fp.max x9 x6) (fp.sub RNE (fp.mul RNE x4 x0) (fp.mul RNE x5 x5)))) (fp.sub RNE (fp.sub RNE (fp.min x0 x6) (fp.mul RNE x0 x8)) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.div RNE x4 x7))))) (fp.sqrt RNE (fp.max (fp.abs (fp.max (fp.div RNE x6 x4) (fp.abs x3))) (fp.abs (fp.mul RNE (fp.abs x9) (fp.abs x2)))))) (fp.min (fp.max (fp.abs (fp.roundToIntegral RNE (fp.sub RNE x2 (fp.mul RNE x0 x7)))) (fp.div RNE (fp.abs (fp.abs x1)) (fp.sqrt RNE (fp.sqrt RNE x4)))) (fp.min (fp.sub RNE (fp.abs (fp.sub RNE x8 x4)) (fp.max (fp.max x2 x9) (fp.sub RNE x0 x9))) (fp.sub RNE (fp.min (fp.sub RNE x7 x6) (fp.max x5 x3)) (fp.sqrt RNE (fp.add RNE (fp.mul RNE x0 x3) (fp.mul RNE x1 x0))))))))(check-sat)