;  time  = {'mathsat': 2.457357883453369, 'z3': 393.113}
;  terms = 74
;  score = 390.65564211654663
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.max (fp.sub RNE (fp.neg (fp.min x1 x1)) (fp.sqrt RNE (fp.min (fp.sqrt RNE x2) (fp.sqrt RNE x6)))) (fp.min (fp.mul RNE (fp.abs (fp.sub RNE x7 x0)) (fp.add RNE (fp.add RNE x3 x4) (fp.sub RNE x6 x5))) (fp.sqrt RNE (fp.neg (fp.neg x5))))) (fp.neg (fp.sub RNE (fp.max (fp.div RNE x3 (fp.min x0 x5)) (fp.sub RNE x9 x0)) (fp.roundToIntegral RNE (fp.mul RNE x0 x3))))) (fp.abs (fp.min (fp.roundToIntegral RNE (fp.neg (fp.add RNE x1 x7))) (fp.mul RNE (fp.div RNE (fp.min x9 x1) (fp.add RNE x7 (fp.neg x8))) (fp.div RNE (fp.sub RNE (fp.mul RNE x1 x1) (fp.div RNE x5 x8)) (fp.abs (fp.mul RNE x5 x0))))))))(check-sat)