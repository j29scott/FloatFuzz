;  time  = {'z3': 148.286, 'mathsat': 2.409970283508301}
;  terms = 73
;  score = 145.8760297164917
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.add RNE (fp.max (fp.neg (fp.max x0 x4)) (fp.max (fp.min x0 x3) (fp.sqrt RNE x5))) (fp.roundToIntegral RNE (fp.add RNE (fp.sqrt RNE x6) (fp.sub RNE x4 x5)))) (fp.max (fp.add RNE (fp.sqrt RNE (fp.sqrt RNE x2)) (fp.sqrt RNE (fp.abs x8))) (fp.div RNE (fp.sqrt RNE (fp.abs x0)) (fp.abs (fp.sub RNE x2 x3))))) (fp.max (fp.div RNE (fp.max (fp.mul RNE (fp.div RNE x0 x7) (fp.max x8 x0)) (fp.add RNE (fp.sqrt RNE x1) (fp.sqrt RNE x6))) (fp.max (fp.roundToIntegral RNE (fp.neg x5)) (fp.max (fp.max x4 x4) (fp.sqrt RNE x5)))) (fp.sqrt RNE (fp.add RNE (fp.abs (fp.div RNE x9 x4)) (fp.div RNE (fp.abs x6) (fp.neg x2)))))))(check-sat)