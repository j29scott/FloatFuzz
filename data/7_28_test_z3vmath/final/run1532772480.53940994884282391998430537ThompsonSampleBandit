;  time  = {'mathsat': 5.1234893798828125, 'z3': 319.706}
;  terms = 64
;  score = 314.5825106201172
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.abs (fp.add RNE (fp.min (fp.add RNE x6 x8) (fp.sqrt RNE x7)) (fp.abs (fp.neg x2)))) (fp.div RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.mul RNE x5 x3)) (fp.neg (fp.neg x9))) (fp.div RNE (fp.max (fp.roundToIntegral RNE x9) (fp.neg x2)) (fp.sqrt RNE (fp.mul RNE x6 x0))))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.add RNE (fp.div RNE x5 x9) (fp.neg x4)) (fp.neg (fp.max x4 x5))) (fp.sqrt RNE (fp.sub RNE (fp.min x2 x9) (fp.neg x3)))) (fp.roundToIntegral RNE (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE x2) (fp.div RNE x9 x1)) (fp.neg (fp.mul RNE x9 x5)))))))(check-sat)