;  time  = {'mathsat': 18.954433917999268, 'z3': 279.532}
;  terms = 60
;  score = 260.5775660820007
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.add RNE (fp.max (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE x9) (fp.abs x2)) (fp.div RNE (fp.abs x1) (fp.sqrt RNE x1))) (fp.div RNE (fp.sub RNE (fp.min x1 x9) (fp.abs x3)) (fp.add RNE (fp.abs x6) (fp.div RNE x5 x4)))) (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.div RNE x1 x3) (fp.max x2 x2)) (fp.abs (fp.min x4 x9))) (fp.add RNE (fp.max (fp.roundToIntegral RNE (fp.sub RNE x9 x1)) (fp.max (fp.max x1 x3) (fp.abs x3))) (fp.roundToIntegral RNE (fp.sub RNE (fp.min x2 x5) (fp.mul RNE x5 x8))))))))(check-sat)