;  time  = {'z3': 191.474, 'mathsat': 4.842546224594116}
;  terms = 81
;  score = 186.63145377540587
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.sqrt RNE (fp.max (fp.abs (fp.neg x4)) (fp.min (fp.max x1 x1) (fp.sqrt RNE x2)))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x9 x3) (fp.neg x7)) (fp.div RNE (fp.roundToIntegral RNE x1) (fp.neg x4))) (fp.neg (fp.mul RNE (fp.roundToIntegral RNE x0) (fp.max x2 x6))))) (fp.min (fp.add RNE (fp.add RNE (fp.mul RNE (fp.div RNE x5 x8) (fp.add RNE x4 x5)) (fp.div RNE (fp.mul RNE x1 x5) (fp.roundToIntegral RNE x1))) (fp.div RNE (fp.max (fp.div RNE x5 x5) (fp.div RNE x1 x0)) (fp.sqrt RNE (fp.max x6 x9)))) (fp.mul RNE (fp.sub RNE (fp.abs (fp.roundToIntegral RNE x2)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x6))) (fp.min (fp.mul RNE (fp.div RNE x9 x3) (fp.sqrt RNE x8)) (fp.div RNE (fp.abs x4) (fp.sqrt RNE x7)))))))(check-sat)