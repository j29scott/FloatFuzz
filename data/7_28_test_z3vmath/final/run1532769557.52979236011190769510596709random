;  time  = {'z3': 506.487, 'mathsat': 83.97333717346191}
;  terms = 71
;  score = 422.5136628265381
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.sqrt RNE (fp.sub RNE (fp.mul RNE (fp.sqrt RNE x3) (fp.min x6 x1)) (fp.mul RNE (fp.mul RNE x6 x7) (fp.div RNE (fp.abs x9) (fp.mul RNE x7 x3))))) (fp.roundToIntegral RNE (fp.div RNE (fp.sub RNE (fp.mul RNE x7 (fp.max x5 x9)) (fp.add RNE x5 x9)) (fp.max (fp.abs x4) (fp.max x1 (fp.mul RNE x3 x8)))))) (fp.max (fp.add RNE (fp.max (fp.mul RNE (fp.neg x2) (fp.mul RNE x2 x9)) (fp.abs (fp.sub RNE x4 x6))) (fp.abs (fp.div RNE (fp.neg (fp.abs x0)) (fp.mul RNE (fp.sqrt RNE x3) (fp.mul RNE x5 x5))))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.div RNE x3 x7) (fp.sqrt RNE x2)))))))(check-sat)