;  time  = {'z3': 333.591, 'mathsat': 39.116867780685425}
;  terms = 91
;  score = 294.4741322193146
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.div RNE (fp.mul RNE (fp.add RNE (fp.max x2 x0) (fp.div RNE x3 x7)) (fp.roundToIntegral RNE (fp.abs x1))) (fp.sub RNE (fp.neg (fp.mul RNE x0 x1)) (fp.neg (fp.abs x1)))) (fp.div RNE (fp.abs (fp.min (fp.add RNE x6 x7) (fp.add RNE x1 x2))) (fp.div RNE (fp.mul RNE (fp.max x9 x5) (fp.add RNE x9 x4)) (fp.sub RNE (fp.mul RNE x7 x6) (fp.min x9 x0))))) (fp.add RNE (fp.max (fp.min (fp.add RNE (fp.roundToIntegral RNE x6) (fp.max x4 x7)) (fp.mul RNE (fp.max x7 x1) (fp.roundToIntegral RNE x3))) (fp.min (fp.roundToIntegral RNE (fp.neg x2)) (fp.min (fp.abs x2) (fp.max x4 x8)))) (fp.mul RNE (fp.sqrt RNE (fp.div RNE (fp.sqrt RNE x2) (fp.neg x7))) (fp.sub RNE (fp.add RNE (fp.max x6 x5) (fp.div RNE x3 x5)) (fp.mul RNE (fp.roundToIntegral RNE x5) (fp.roundToIntegral RNE x9)))))))(check-sat)