;  time  = {'mathsat': 21.042352437973022, 'z3': 117.919}
;  terms = 73
;  score = 96.87664756202697
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.div RNE (fp.sqrt RNE x7) (fp.neg x8)) (fp.div RNE (fp.max x8 x8) (fp.min x7 x3))) (fp.mul RNE (fp.min (fp.sub RNE x0 x0) (fp.add RNE x7 x4)) (fp.add RNE (fp.add RNE x8 x6) (fp.max x3 x1)))) (fp.neg (fp.neg (fp.neg (fp.roundToIntegral RNE x0))))) (fp.max (fp.max (fp.max (fp.sqrt RNE (fp.add RNE x0 x8)) (fp.min (fp.max x0 x0) (fp.neg x5))) (fp.abs (fp.roundToIntegral RNE (fp.neg x0)))) (fp.add RNE (fp.add RNE (fp.sqrt RNE (fp.div RNE x7 x8)) (fp.max (fp.sub RNE x0 x2) (fp.div RNE x8 x0))) (fp.max (fp.sqrt RNE (fp.neg x2)) (fp.neg (fp.abs x2)))))))(check-sat)