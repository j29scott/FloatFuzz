;  time  = {'mathsat': 2.01725435256958, 'z3': 308.79}
;  terms = 54
;  score = 306.77274564743044
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.abs (fp.div RNE (fp.min (fp.add RNE (fp.sub RNE x7 x2) (fp.div RNE x3 x6)) (fp.sub RNE (fp.mul RNE (fp.sub RNE x2 x5) (fp.sqrt RNE x0)) (fp.div RNE (fp.sqrt RNE x4) (fp.mul RNE x2 x9)))) (fp.abs (fp.abs (fp.min x3 (fp.sqrt RNE x5)))))) (fp.sqrt RNE (fp.sub RNE (fp.div RNE (fp.neg (fp.max x2 x2)) (fp.mul RNE (fp.add RNE x3 x5) (fp.mul RNE x9 x1))) (fp.add RNE (fp.max (fp.neg x3) (fp.max x4 x7)) (fp.sqrt RNE (fp.sqrt RNE x8)))))))(check-sat)