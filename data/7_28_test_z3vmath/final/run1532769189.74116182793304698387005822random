;  time  = {'mathsat': 19.809661626815796, 'z3': 434.763}
;  terms = 64
;  score = 414.9533383731842
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.abs (fp.sqrt RNE (fp.mul RNE (fp.div RNE (fp.sqrt RNE x6) (fp.mul RNE x2 x9)) (fp.mul RNE (fp.sub RNE x4 x7) (fp.abs (fp.abs x5)))))) (fp.mul RNE (fp.min (fp.add RNE (fp.sub RNE (fp.div RNE x4 x6) (fp.max x7 x9)) (fp.max (fp.min x5 x8) (fp.max x9 x8))) (fp.add RNE (fp.neg (fp.abs x9)) (fp.abs (fp.abs x0)))) (fp.add RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x9 x5) (fp.div RNE x0 x7)) (fp.mul RNE (fp.sqrt RNE x1) (fp.div RNE x7 x8))) (fp.abs (fp.div RNE (fp.max x5 x8) (fp.add RNE x9 x9)))))))(check-sat)