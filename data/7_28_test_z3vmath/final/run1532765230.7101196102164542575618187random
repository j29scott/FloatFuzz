;  time  = {'z3': 355.62, 'mathsat': 12.00617265701294}
;  terms = 83
;  score = 343.61382734298707
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.min (fp.div RNE (fp.add RNE (fp.add RNE (fp.div RNE x7 x4) (fp.mul RNE (fp.div RNE x9 x5) (fp.min x5 x0))) (fp.mul RNE (fp.min (fp.sqrt RNE x3) (fp.sqrt RNE x7)) (fp.roundToIntegral RNE (fp.sub RNE x4 x6)))) (fp.div RNE (fp.sub RNE (fp.max x2 x2) (fp.min (fp.max x4 x6) (fp.div RNE x9 x7))) (fp.sqrt RNE (fp.div RNE x4 x2)))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.sub RNE x2 x9) (fp.max x1 (fp.sub RNE x3 x1))) (fp.div RNE (fp.sqrt RNE x6) (fp.min (fp.max x4 x0) (fp.mul RNE x0 x3)))) (fp.min (fp.min (fp.mul RNE (fp.min x5 x9) (fp.sqrt RNE x2)) (fp.abs (fp.neg x1))) (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE x7) (fp.div RNE x7 x3)) (fp.roundToIntegral RNE (fp.abs x2))))))))(check-sat)