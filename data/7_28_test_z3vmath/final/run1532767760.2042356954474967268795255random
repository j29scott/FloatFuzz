;  time  = {'mathsat': 4.931035757064819, 'z3': 356.844}
;  terms = 76
;  score = 351.9129642429352
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.roundToIntegral RNE (fp.neg (fp.roundToIntegral RNE (fp.sqrt RNE x0)))) (fp.min (fp.max (fp.min (fp.neg x3) (fp.sub RNE x5 (fp.neg x5))) (fp.mul RNE (fp.div RNE x7 x3) (fp.add RNE x8 (fp.mul RNE x8 x1)))) (fp.min (fp.div RNE (fp.div RNE x9 x5) (fp.neg x1)) (fp.add RNE (fp.min x5 x7) (fp.div RNE x1 (fp.abs x2)))))) (fp.add RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.mul RNE (fp.sub RNE x7 x8) (fp.sqrt RNE x9)) (fp.neg (fp.neg x8)))) (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.max x5 x5)) (fp.max (fp.sub RNE (fp.max x4 x4) (fp.neg x5)) (fp.min (fp.min x6 x3) (fp.div RNE x7 x1)))) (fp.sqrt RNE (fp.sqrt RNE (fp.roundToIntegral RNE x4)))))))(check-sat)