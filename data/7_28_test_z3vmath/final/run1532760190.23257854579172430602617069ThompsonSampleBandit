;  time  = {'z3': 106.384, 'mathsat': 9.837778806686401}
;  terms = 63
;  score = 96.5462211933136
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.min (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sub RNE x0 x2))) (fp.max (fp.mul RNE (fp.neg x3) (fp.sub RNE x2 x2)) (fp.sqrt RNE (fp.abs x1)))) (fp.div RNE (fp.abs (fp.mul RNE (fp.sub RNE x8 x2) (fp.neg x9))) (fp.neg (fp.sqrt RNE (fp.div RNE x5 x9))))) (fp.div RNE (fp.mul RNE (fp.add RNE (fp.neg (fp.mul RNE x4 x2)) (fp.roundToIntegral RNE (fp.sqrt RNE x6))) (fp.div RNE (fp.abs (fp.roundToIntegral RNE x5)) (fp.min (fp.abs x2) (fp.add RNE x3 x2)))) (fp.max (fp.roundToIntegral RNE (fp.sqrt RNE (fp.neg x4))) (fp.sqrt RNE (fp.sub RNE (fp.div RNE x5 x1) (fp.roundToIntegral RNE x0)))))))(check-sat)