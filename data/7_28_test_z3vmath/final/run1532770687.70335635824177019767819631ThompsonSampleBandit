;  time  = {'mathsat': 10.234008073806763, 'z3': 139.454}
;  terms = 64
;  score = 129.21999192619325
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.abs (fp.min (fp.abs (fp.roundToIntegral RNE x4)) (fp.abs (fp.mul RNE x7 x0)))) (fp.div RNE (fp.min (fp.max (fp.sqrt RNE x7) (fp.abs x1)) (fp.add RNE (fp.min x7 x6) (fp.min x5 x7))) (fp.sub RNE (fp.add RNE (fp.max x7 x8) (fp.roundToIntegral RNE x3)) (fp.mul RNE (fp.min x4 x9) (fp.div RNE x5 x6))))) (fp.sqrt RNE (fp.sub RNE (fp.div RNE (fp.mul RNE (fp.div RNE x5 x9) (fp.roundToIntegral RNE x0)) (fp.max (fp.sub RNE x3 x5) (fp.sqrt RNE x4))) (fp.sub RNE (fp.roundToIntegral RNE (fp.abs x7)) (fp.mul RNE (fp.abs x9) (fp.div RNE x2 x8)))))))(check-sat)