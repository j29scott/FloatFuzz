;  time  = {'mathsat': 28.07982563972473, 'z3': 586.685}
;  terms = 78
;  score = 558.6051743602752
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.abs (fp.add RNE (fp.min (fp.abs x7) (fp.sub RNE x7 x6)) (fp.mul RNE (fp.abs x8) (fp.abs (fp.roundToIntegral RNE x3))))) (fp.max (fp.sqrt RNE (fp.max (fp.sqrt RNE x6) (fp.mul RNE x4 x2))) (fp.div RNE (fp.mul RNE (fp.abs x7) (fp.neg x5)) (fp.abs (fp.sqrt RNE x4))))) (fp.max (fp.min (fp.sqrt RNE (fp.mul RNE (fp.mul RNE x3 (fp.add RNE x3 x5)) (fp.neg x6))) (fp.add RNE (fp.abs (fp.abs x7)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE x2 x2))))) (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.abs x0) (fp.max x4 x4)) (fp.abs (fp.abs x0))) (fp.add RNE (fp.add RNE (fp.abs x6) (fp.div RNE x8 x7)) (fp.mul RNE (fp.abs (fp.sqrt RNE x2)) (fp.abs (fp.neg x7))))))))(check-sat)