;  time  = {'mathsat': 23.15270972251892, 'z3': 389.791}
;  terms = 80
;  score = 366.6382902774811
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.add RNE (fp.abs (fp.div RNE x2 x4)) (fp.div RNE (fp.roundToIntegral RNE x7) (fp.abs x0))) (fp.add RNE (fp.mul RNE (fp.add RNE x2 x2) (fp.min (fp.sub RNE x1 x8) (fp.sqrt RNE x4))) (fp.roundToIntegral RNE (fp.abs (fp.mul RNE x5 x6))))) (fp.abs (fp.add RNE (fp.add RNE (fp.mul RNE (fp.abs x5) (fp.mul RNE x2 x7)) (fp.abs (fp.div RNE x3 x6))) (fp.div RNE (fp.add RNE (fp.neg x7) (fp.abs x1)) (fp.add RNE (fp.div RNE x2 x1) (fp.mul RNE x8 x9)))))) (fp.add RNE (fp.neg (fp.add RNE (fp.max (fp.div RNE x1 x6) (fp.sqrt RNE x7)) (fp.neg (fp.mul RNE x2 x5)))) (fp.abs (fp.abs (fp.mul RNE (fp.add RNE x8 x5) (fp.min (fp.mul RNE x4 x0) (fp.abs x6))))))))(check-sat)