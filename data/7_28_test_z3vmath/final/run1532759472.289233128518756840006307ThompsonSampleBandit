;  time  = {'mathsat': 1.9550552368164062, 'z3': 120.294}
;  terms = 67
;  score = 118.33894476318359
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.abs x9) (fp.sub RNE x1 x6)) (fp.add RNE (fp.neg x1) (fp.sub RNE x8 x4))) (fp.min (fp.max (fp.add RNE x5 x5) (fp.max x1 x2)) (fp.sqrt RNE (fp.min x7 x3)))) (fp.add RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x5))) (fp.div RNE (fp.max (fp.abs x2) (fp.sub RNE x6 x4)) (fp.neg (fp.abs x4))))) (fp.neg (fp.add RNE (fp.max (fp.add RNE (fp.roundToIntegral RNE x5) (fp.abs x8)) (fp.sqrt RNE (fp.sqrt RNE x1))) (fp.sub RNE (fp.min (fp.roundToIntegral RNE x2) (fp.neg x2)) (fp.div RNE (fp.div RNE x0 x3) (fp.div RNE x7 x9)))))))(check-sat)