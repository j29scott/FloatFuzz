;  time  = {'z3': 359.997, 'mathsat': 10.944729804992676}
;  terms = 63
;  score = 349.05227019500734
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.sqrt RNE (fp.mul RNE (fp.sub RNE x6 x1) (fp.roundToIntegral RNE x2))) (fp.abs (fp.sqrt RNE (fp.roundToIntegral RNE x4)))) (fp.div RNE (fp.sub RNE (fp.sqrt RNE (fp.abs x4)) (fp.min (fp.neg x6) (fp.neg x7))) (fp.min (fp.div RNE (fp.mul RNE x9 x8) (fp.neg x5)) (fp.abs (fp.sqrt RNE x9))))) (fp.min (fp.add RNE (fp.abs (fp.neg (fp.mul RNE x2 x3))) (fp.div RNE (fp.max (fp.roundToIntegral RNE x9) (fp.div RNE x5 x8)) (fp.add RNE (fp.max x0 x2) (fp.abs x3)))) (fp.abs (fp.roundToIntegral RNE (fp.max (fp.add RNE x6 x9) (fp.div RNE x6 x0)))))))(check-sat)