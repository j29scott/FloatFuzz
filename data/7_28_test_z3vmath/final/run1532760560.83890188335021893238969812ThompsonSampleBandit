;  time  = {'mathsat': 6.32536244392395, 'z3': 600}
;  terms = 93
;  score = 593.674637556076
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.div RNE (fp.abs (fp.div RNE x9 x7)) (fp.sub RNE (fp.neg x0) (fp.mul RNE x9 x2))) (fp.add RNE (fp.div RNE (fp.sub RNE x1 x0) (fp.add RNE x1 x1)) (fp.sub RNE (fp.max x1 x2) (fp.mul RNE x1 x6)))) (fp.div RNE (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE x0)) (fp.max (fp.neg x3) (fp.mul RNE x5 x0))) (fp.roundToIntegral RNE (fp.add RNE (fp.mul RNE x3 x5) (fp.sub RNE x4 x5))))) (fp.max (fp.mul RNE (fp.add RNE (fp.neg (fp.abs x3)) (fp.add RNE (fp.min x0 x9) (fp.neg x2))) (fp.min (fp.neg (fp.div RNE x8 x5)) (fp.sub RNE (fp.sub RNE x1 x7) (fp.div RNE x9 x6)))) (fp.min (fp.sub RNE (fp.div RNE (fp.abs x1) (fp.mul RNE x5 x0)) (fp.neg (fp.abs x5))) (fp.add RNE (fp.abs (fp.neg x4)) (fp.mul RNE (fp.div RNE x9 x8) (fp.abs x1)))))))(check-sat)