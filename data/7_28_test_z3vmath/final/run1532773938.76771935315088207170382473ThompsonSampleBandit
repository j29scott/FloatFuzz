;  time  = {'mathsat': 9.370240211486816, 'z3': 148.75}
;  terms = 73
;  score = 139.37975978851318
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.min (fp.div RNE (fp.add RNE (fp.sqrt RNE x9) (fp.max x4 x9)) (fp.abs (fp.max x8 x8))) (fp.sqrt RNE (fp.sub RNE (fp.sqrt RNE (fp.min x7 x0)) (fp.mul RNE (fp.roundToIntegral RNE x6) (fp.min x8 x8))))) (fp.sqrt RNE (fp.min (fp.roundToIntegral RNE (fp.sub RNE x5 x3)) (fp.sqrt RNE (fp.min x4 (fp.sqrt RNE x6)))))) (fp.max (fp.neg (fp.abs (fp.min (fp.roundToIntegral RNE x5) (fp.abs x7)))) (fp.min (fp.min (fp.min (fp.mul RNE x4 x8) (fp.min x0 x2)) (fp.roundToIntegral RNE (fp.min x4 (fp.min x9 x2)))) (fp.mul RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE x0 x0))) (fp.sqrt RNE (fp.div RNE (fp.mul RNE x1 x8) (fp.abs x6))))))))(check-sat)