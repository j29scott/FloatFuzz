;  time  = {'z3': 294.75, 'mathsat': 3.511061906814575}
;  terms = 72
;  score = 291.2389380931854
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE (fp.min (fp.abs x8) (fp.abs x5)) (fp.min (fp.mul RNE x8 x6) (fp.max x8 x9))) (fp.sub RNE (fp.abs (fp.abs x9)) (fp.max (fp.div RNE x0 x4) (fp.min x3 x5))))) (fp.div RNE (fp.sub RNE (fp.max (fp.div RNE (fp.abs x1) (fp.min x3 x8)) (fp.div RNE (fp.div RNE x5 x1) (fp.div RNE x6 x5))) (fp.roundToIntegral RNE (fp.abs (fp.abs x6)))) (fp.max (fp.sub RNE (fp.sub RNE (fp.max x4 x7) (fp.add RNE x5 x6)) (fp.add RNE (fp.min x6 x1) (fp.roundToIntegral RNE x4))) (fp.min (fp.roundToIntegral RNE (fp.div RNE x3 x2)) (fp.div RNE (fp.sqrt RNE x6) (fp.roundToIntegral RNE x3)))))))(check-sat)