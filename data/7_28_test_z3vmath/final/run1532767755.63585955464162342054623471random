;  time  = {'z3': 100.65, 'mathsat': 2.698748826980591}
;  terms = 66
;  score = 97.95125117301941
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sub RNE (fp.neg (fp.sub RNE (fp.add RNE (fp.min x4 (fp.mul RNE x1 x2)) (fp.add RNE x5 (fp.sub RNE x5 x2))) (fp.min (fp.sqrt RNE x0) (fp.mul RNE (fp.div RNE x2 x5) (fp.div RNE x3 x6))))) (fp.mul RNE (fp.roundToIntegral RNE (fp.abs (fp.min x2 x0))) (fp.min (fp.sub RNE (fp.sqrt RNE x1) (fp.div RNE x5 (fp.mul RNE x9 x1))) (fp.sub RNE (fp.min x0 x4) (fp.roundToIntegral RNE x7))))) (fp.max (fp.neg (fp.mul RNE (fp.add RNE (fp.min x2 x9) (fp.sqrt RNE x8)) (fp.sqrt RNE (fp.max x9 x3)))) (fp.neg (fp.sqrt RNE (fp.min (fp.roundToIntegral RNE x0) (fp.roundToIntegral RNE x9)))))))(check-sat)