;  time  = {'mathsat': 6.257949590682983, 'z3': 239.318}
;  terms = 76
;  score = 233.06005040931703
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.min (fp.abs (fp.div RNE (fp.div RNE (fp.div RNE x3 x2) (fp.max x3 x3)) (fp.sqrt RNE (fp.max x6 x0)))) (fp.neg (fp.roundToIntegral RNE (fp.sqrt RNE (fp.abs x3))))) (fp.sub RNE (fp.add RNE (fp.min (fp.add RNE (fp.neg x0) (fp.add RNE x1 x4)) (fp.mul RNE (fp.sqrt RNE x7) (fp.mul RNE x8 x1))) (fp.min (fp.sub RNE (fp.max x5 x4) (fp.min x6 x1)) (fp.neg (fp.mul RNE x4 x4)))) (fp.add RNE (fp.min (fp.sub RNE (fp.div RNE x2 x7) (fp.neg x0)) (fp.mul RNE (fp.mul RNE x7 x7) (fp.mul RNE x8 x0))) (fp.add RNE (fp.div RNE (fp.div RNE x3 x7) (fp.sqrt RNE x8)) (fp.add RNE (fp.div RNE x6 x6) (fp.max x1 x9)))))))(check-sat)