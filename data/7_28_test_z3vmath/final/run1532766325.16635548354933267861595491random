;  time  = {'z3': 211.439, 'mathsat': 11.393011331558228}
;  terms = 91
;  score = 200.04598866844177
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.max (fp.min x4 x4) (fp.neg x1)) (fp.min (fp.max x5 x0) (fp.add RNE x8 (fp.max x4 x5)))) (fp.max (fp.mul RNE (fp.abs (fp.min x5 x8)) (fp.mul RNE (fp.sub RNE x2 x5) (fp.sqrt RNE x2))) (fp.sqrt RNE (fp.sqrt RNE (fp.roundToIntegral RNE x6))))) (fp.roundToIntegral RNE (fp.add RNE (fp.sqrt RNE (fp.sqrt RNE x2)) (fp.sub RNE (fp.max (fp.mul RNE x2 x5) (fp.max x1 x5)) (fp.div RNE (fp.sub RNE x2 x2) (fp.mul RNE x2 x9)))))) (fp.min (fp.mul RNE (fp.sqrt RNE (fp.div RNE (fp.neg x1) (fp.div RNE x3 x5))) (fp.add RNE (fp.min (fp.sub RNE x9 x2) (fp.sub RNE x4 (fp.sub RNE x0 x1))) (fp.add RNE (fp.roundToIntegral RNE x4) (fp.max x7 (fp.div RNE x0 x7))))) (fp.sqrt RNE (fp.min (fp.roundToIntegral RNE (fp.min x2 x8)) (fp.roundToIntegral RNE (fp.abs x4)))))))(check-sat)