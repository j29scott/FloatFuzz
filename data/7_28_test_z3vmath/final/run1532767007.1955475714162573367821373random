;  time  = {'z3': 489.643, 'mathsat': 19.312161922454834}
;  terms = 113
;  score = 470.33083807754514
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.mul RNE (fp.min (fp.sqrt RNE (fp.abs x2)) (fp.min (fp.neg x3) (fp.add RNE x8 x7))) (fp.add RNE (fp.mul RNE (fp.neg (fp.max x7 x9)) (fp.min (fp.sqrt RNE x5) (fp.div RNE x9 x7))) (fp.add RNE (fp.neg (fp.roundToIntegral RNE x7)) (fp.abs (fp.abs x8))))) (fp.add RNE (fp.min (fp.neg (fp.abs x4)) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x8 x9) (fp.abs x3)))) (fp.sqrt RNE (fp.mul RNE (fp.sqrt RNE x9) (fp.add RNE x0 x0))))) (fp.max (fp.mul RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.sub RNE x2 x8) (fp.min x0 x6))) (fp.div RNE (fp.min (fp.min (fp.sub RNE x7 x7) (fp.neg x6)) (fp.roundToIntegral RNE (fp.sub RNE x6 x4))) (fp.min (fp.roundToIntegral RNE (fp.div RNE x7 x7)) (fp.min (fp.abs x0) (fp.div RNE x0 x6))))) (fp.add RNE (fp.sub RNE (fp.max (fp.abs x6) (fp.add RNE x2 x6)) (fp.roundToIntegral RNE (fp.div RNE x7 x1))) (fp.add RNE (fp.add RNE (fp.sqrt RNE x6) (fp.sub RNE x7 x8)) (fp.sub RNE (fp.mul RNE (fp.min x9 x0) (fp.roundToIntegral RNE x2)) (fp.abs (fp.abs x2))))))))(check-sat)