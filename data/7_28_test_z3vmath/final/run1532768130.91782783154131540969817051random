;  time  = {'z3': 297.627, 'mathsat': 18.856357097625732}
;  terms = 82
;  score = 278.7706429023743
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.div RNE (fp.abs (fp.sqrt RNE (fp.min x5 x4))) (fp.abs (fp.sub RNE (fp.max x3 x7) (fp.sub RNE x1 x1)))) (fp.min (fp.neg (fp.sub RNE (fp.div RNE (fp.sqrt RNE x0) (fp.div RNE x5 x2)) (fp.roundToIntegral RNE (fp.sqrt RNE x4)))) (fp.neg (fp.add RNE (fp.sqrt RNE (fp.min x3 x4)) (fp.neg (fp.add RNE x1 x2)))))) (fp.add RNE (fp.abs (fp.neg (fp.abs (fp.add RNE x3 x8)))) (fp.add RNE (fp.max (fp.mul RNE (fp.neg x2) (fp.div RNE x2 x2)) (fp.roundToIntegral RNE (fp.min x5 x2))) (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.add RNE x8 x6) (fp.max x0 x1)) (fp.div RNE (fp.max x9 x3) (fp.add RNE x3 x6))) (fp.min (fp.sqrt RNE (fp.sub RNE x1 x5)) (fp.roundToIntegral RNE (fp.add RNE x6 x7))))))))(check-sat)