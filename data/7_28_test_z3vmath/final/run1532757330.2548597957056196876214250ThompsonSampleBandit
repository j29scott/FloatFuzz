;  time  = {'z3': 250.545, 'mathsat': 4.832443714141846}
;  terms = 90
;  score = 245.71255628585814
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.max (fp.div RNE (fp.max (fp.sqrt RNE x9) (fp.sqrt RNE x2)) (fp.sqrt RNE (fp.min x9 x1))) (fp.mul RNE (fp.mul RNE (fp.min x3 x6) (fp.sqrt RNE x7)) (fp.mul RNE (fp.add RNE x7 x2) (fp.max x5 x5)))) (fp.max (fp.div RNE (fp.sub RNE (fp.add RNE x2 x8) (fp.div RNE x2 x9)) (fp.mul RNE (fp.roundToIntegral RNE x9) (fp.abs x5))) (fp.add RNE (fp.abs (fp.div RNE x7 x6)) (fp.sqrt RNE (fp.sqrt RNE x3))))) (fp.sub RNE (fp.add RNE (fp.min (fp.sub RNE (fp.neg x7) (fp.sub RNE x2 x2)) (fp.max (fp.abs x1) (fp.add RNE x3 x0))) (fp.sqrt RNE (fp.neg (fp.min x3 x6)))) (fp.min (fp.div RNE (fp.max (fp.sqrt RNE x8) (fp.min x0 x0)) (fp.mul RNE (fp.add RNE x1 x5) (fp.neg x5))) (fp.neg (fp.min (fp.mul RNE x2 x3) (fp.abs x6)))))))(check-sat)