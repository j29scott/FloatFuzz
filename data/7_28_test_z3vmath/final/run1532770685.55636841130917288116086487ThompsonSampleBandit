;  time  = {'z3': 600, 'mathsat': 31.557571411132812}
;  terms = 70
;  score = 568.4424285888672
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.max (fp.sqrt RNE (fp.div RNE (fp.div RNE x9 x1) (fp.abs x0))) (fp.roundToIntegral RNE (fp.mul RNE (fp.sub RNE x8 (fp.roundToIntegral RNE x8)) (fp.sub RNE x5 x4)))) (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE (fp.sqrt RNE (fp.sqrt RNE x2)))) (fp.max (fp.abs (fp.sqrt RNE (fp.neg x2))) (fp.max (fp.sub RNE (fp.sub RNE x7 x8) (fp.roundToIntegral RNE x4)) (fp.div RNE (fp.roundToIntegral RNE x9) (fp.sub RNE x1 x4)))))) (fp.max (fp.abs (fp.abs (fp.div RNE (fp.sub RNE x0 x6) (fp.mul RNE x5 x8)))) (fp.sub RNE (fp.sqrt RNE (fp.div RNE (fp.sub RNE x5 x6) (fp.sqrt RNE x3))) (fp.sqrt RNE (fp.sub RNE (fp.sub RNE x5 (fp.sqrt RNE x1)) (fp.min x0 x6)))))))(check-sat)