;  time  = {'z3': 220.964, 'mathsat': 12.715398788452148}
;  terms = 92
;  score = 208.24860121154785
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.max (fp.max (fp.sub RNE (fp.roundToIntegral RNE x3) (fp.add RNE x0 x8)) (fp.neg (fp.max x8 x4))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sqrt RNE x6)))) (fp.max (fp.sub RNE (fp.max (fp.neg x8) (fp.mul RNE x3 x6)) (fp.sqrt RNE (fp.add RNE x4 x8))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE x9) (fp.div RNE x9 x4)) (fp.add RNE (fp.sub RNE x8 x6) (fp.abs x7))))) (fp.mul RNE (fp.div RNE (fp.min (fp.mul RNE (fp.add RNE x2 x8) (fp.sub RNE x0 x9)) (fp.neg (fp.max x2 x2))) (fp.sub RNE (fp.add RNE (fp.sqrt RNE x6) (fp.roundToIntegral RNE x6)) (fp.add RNE (fp.div RNE x7 x2) (fp.div RNE x6 x7)))) (fp.sub RNE (fp.sqrt RNE (fp.div RNE (fp.div RNE x2 x5) (fp.roundToIntegral RNE x9))) (fp.div RNE (fp.min (fp.sub RNE x5 x2) (fp.min x4 x8)) (fp.add RNE (fp.neg x5) (fp.div RNE x5 x6)))))))(check-sat)