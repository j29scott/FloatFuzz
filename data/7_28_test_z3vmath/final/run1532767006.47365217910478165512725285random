;  time  = {'mathsat': 2.3405675888061523, 'z3': 250.958}
;  terms = 59
;  score = 248.61743241119385
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.mul RNE (fp.sub RNE (fp.abs (fp.roundToIntegral RNE (fp.neg x2))) (fp.mul RNE (fp.neg (fp.div RNE x9 x0)) (fp.sub RNE (fp.div RNE (fp.abs x6) (fp.max x3 x5)) (fp.max (fp.max x8 x2) (fp.mul RNE x0 x6))))) (fp.mul RNE (fp.div RNE (fp.max (fp.sqrt RNE x2) (fp.div RNE (fp.add RNE x9 x0) (fp.add RNE x3 x8))) (fp.max (fp.min x9 x6) (fp.mul RNE x7 x5))) (fp.add RNE (fp.sqrt RNE (fp.sub RNE x4 x7)) (fp.mul RNE (fp.abs x9) (fp.add RNE (fp.add RNE x6 x3) (fp.roundToIntegral RNE x5))))))))(check-sat)