;  time  = {'mathsat': 8.559626817703247, 'z3': 399.214}
;  terms = 84
;  score = 390.65437318229675
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.abs (fp.sqrt RNE x1)) (fp.max (fp.roundToIntegral RNE x1) (fp.div RNE x9 x8))) (fp.max (fp.roundToIntegral RNE (fp.neg x2)) (fp.sub RNE (fp.neg x0) (fp.sqrt RNE (fp.mul RNE x2 x5))))) (fp.mul RNE (fp.roundToIntegral RNE (fp.sqrt RNE (fp.neg x9))) (fp.mul RNE (fp.add RNE (fp.add RNE x7 x8) (fp.mul RNE x9 x4)) (fp.div RNE (fp.min x3 (fp.div RNE x7 x5)) (fp.sub RNE x2 x4))))) (fp.sub RNE (fp.roundToIntegral RNE (fp.div RNE (fp.mul RNE (fp.mul RNE x0 x5) (fp.min x7 x2)) (fp.div RNE (fp.div RNE x9 x7) (fp.div RNE (fp.mul RNE x5 x5) (fp.min x7 x0))))) (fp.add RNE (fp.neg (fp.div RNE (fp.add RNE x0 x6) (fp.max x9 x4))) (fp.roundToIntegral RNE (fp.min (fp.mul RNE x8 x3) (fp.sub RNE x9 x5)))))))(check-sat)