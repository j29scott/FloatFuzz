;  time  = {'z3': 496.564, 'mathsat': 3.09325909614563}
;  terms = 73
;  score = 493.4707409038544
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.div RNE (fp.add RNE (fp.div RNE (fp.max x5 x0) (fp.sub RNE x0 (fp.add RNE x2 x5))) (fp.max (fp.div RNE (fp.div RNE x6 x0) (fp.div RNE x5 x3)) (fp.add RNE (fp.neg x1) (fp.max x5 x5)))) (fp.min (fp.roundToIntegral RNE (fp.mul RNE x8 x3)) (fp.sub RNE (fp.mul RNE x3 x4) (fp.sqrt RNE x1)))) (fp.add RNE (fp.roundToIntegral RNE (fp.abs (fp.sub RNE x1 (fp.add RNE x3 x6)))) (fp.mul RNE (fp.sqrt RNE (fp.sqrt RNE x6)) (fp.min (fp.mul RNE x1 x7) (fp.abs x9))))) (fp.neg (fp.div RNE (fp.sqrt RNE (fp.max (fp.mul RNE x4 x0) (fp.add RNE x6 x1))) (fp.neg (fp.add RNE (fp.sqrt RNE x6) (fp.add RNE x3 x3)))))))(check-sat)