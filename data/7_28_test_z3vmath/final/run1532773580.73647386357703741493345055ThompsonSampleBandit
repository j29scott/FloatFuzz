;  time  = {'mathsat': 4.383085489273071, 'z3': 263.745}
;  terms = 82
;  score = 259.36191451072693
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.abs (fp.mul RNE (fp.max (fp.div RNE (fp.div RNE x9 x0) (fp.min x1 x7)) (fp.sub RNE (fp.div RNE x7 x4) (fp.mul RNE x2 x3))) (fp.div RNE (fp.abs (fp.mul RNE x6 x0)) (fp.mul RNE (fp.abs x4) (fp.abs x0))))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.max (fp.abs x0) (fp.sqrt RNE x0)) (fp.max (fp.abs x5) (fp.max x4 x7))) (fp.min (fp.roundToIntegral RNE (fp.abs x9)) (fp.sub RNE (fp.abs x8) (fp.abs x3)))) (fp.mul RNE (fp.abs (fp.add RNE (fp.sqrt RNE (fp.abs x5)) (fp.add RNE (fp.abs x3) (fp.add RNE x6 x5)))) (fp.sub RNE (fp.abs (fp.min (fp.sub RNE x7 x7) (fp.add RNE x2 x9))) (fp.div RNE (fp.div RNE (fp.abs x5) (fp.roundToIntegral RNE x2)) (fp.sqrt RNE (fp.min x0 x4))))))))(check-sat)