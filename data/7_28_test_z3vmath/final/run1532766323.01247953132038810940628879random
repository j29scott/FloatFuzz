;  time  = {'z3': 219.656, 'mathsat': 3.301758289337158}
;  terms = 69
;  score = 216.35424171066285
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.min (fp.add RNE (fp.roundToIntegral RNE (fp.abs (fp.div RNE x6 x5))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.mul RNE x5 x7)))) (fp.div RNE (fp.sub RNE (fp.neg (fp.min x3 x5)) (fp.sub RNE (fp.mul RNE x2 x3) (fp.sqrt RNE x9))) (fp.max (fp.mul RNE (fp.div RNE x1 x0) (fp.abs x1)) (fp.min (fp.abs (fp.roundToIntegral RNE x8)) (fp.min (fp.add RNE x6 x3) (fp.add RNE x3 x9)))))) (fp.max (fp.sub RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.sub RNE x6 x1))) (fp.mul RNE (fp.sqrt RNE (fp.div RNE x8 x0)) (fp.neg (fp.abs x2)))) (fp.neg (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.abs x5)) (fp.roundToIntegral RNE (fp.div RNE x4 x8)))))))(check-sat)