;  time  = {'mathsat': 2.3187320232391357, 'z3': 338.916}
;  terms = 78
;  score = 336.59726797676086
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.div RNE (fp.sub RNE (fp.add RNE (fp.max x5 x0) (fp.neg x0)) (fp.div RNE (fp.sqrt RNE x6) (fp.min x7 x6))) (fp.add RNE (fp.sqrt RNE (fp.roundToIntegral RNE x7)) (fp.mul RNE (fp.max x6 x6) (fp.max x5 x0)))) (fp.div RNE (fp.max (fp.neg (fp.neg x7)) (fp.roundToIntegral RNE (fp.add RNE x1 x6))) (fp.abs (fp.add RNE (fp.sub RNE x8 x6) (fp.sub RNE x7 x5))))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.add RNE (fp.roundToIntegral RNE x8) (fp.abs x0)) (fp.abs (fp.roundToIntegral RNE x9))) (fp.add RNE (fp.mul RNE (fp.neg x8) (fp.max x3 x4)) (fp.add RNE (fp.sub RNE x6 x3) (fp.add RNE x4 x3)))) (fp.sqrt RNE (fp.abs (fp.add RNE (fp.min x0 x7) (fp.max x4 x6)))))))(check-sat)