;  time  = {'mathsat': 2.6580348014831543, 'z3': 193.943}
;  terms = 75
;  score = 191.28496519851686
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.add RNE (fp.div RNE (fp.abs (fp.min x3 x9)) (fp.sqrt RNE (fp.max x1 x3))) (fp.neg (fp.roundToIntegral RNE (fp.sqrt RNE x3)))) (fp.abs (fp.min (fp.div RNE (fp.add RNE x8 x0) (fp.neg x9)) (fp.neg (fp.sqrt RNE x5))))) (fp.max (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.neg x8) (fp.add RNE x5 x2)) (fp.min (fp.roundToIntegral RNE x0) (fp.div RNE x6 x5))) (fp.add RNE (fp.div RNE (fp.min x1 x7) (fp.max x7 x7)) (fp.min (fp.sqrt RNE x5) (fp.div RNE x9 x8)))) (fp.sub RNE (fp.min (fp.neg (fp.abs x5)) (fp.min (fp.sub RNE x4 x1) (fp.max x8 x5))) (fp.abs (fp.sub RNE (fp.sqrt RNE x1) (fp.mul RNE x2 x7)))))))(check-sat)