;  time  = {'mathsat': 7.981767654418945, 'z3': 343.721}
;  terms = 84
;  score = 335.73923234558106
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.sqrt RNE (fp.add RNE (fp.neg (fp.sub RNE x3 x6)) (fp.div RNE (fp.neg x1) (fp.neg x8)))) (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.max x7 x7) (fp.roundToIntegral RNE x1)) (fp.roundToIntegral RNE (fp.max x5 x1))) (fp.mul RNE (fp.neg (fp.roundToIntegral RNE x9)) (fp.max (fp.abs x3) (fp.min x9 x8))))) (fp.max (fp.abs (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x0 x1)) (fp.roundToIntegral RNE (fp.div RNE x4 x2)))) (fp.div RNE (fp.min (fp.add RNE (fp.mul RNE (fp.min x7 x7) (fp.sqrt RNE x5)) (fp.max (fp.min x6 x0) (fp.div RNE x4 x1))) (fp.roundToIntegral RNE (fp.add RNE (fp.roundToIntegral RNE x1) (fp.abs x4)))) (fp.div RNE (fp.abs (fp.add RNE (fp.abs x8) (fp.div RNE x2 x5))) (fp.mul RNE (fp.abs (fp.sqrt RNE x2)) (fp.roundToIntegral RNE (fp.min x2 x1))))))))(check-sat)