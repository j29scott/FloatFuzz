;  time  = {'mathsat': 3.5904510021209717, 'z3': 233.359}
;  terms = 69
;  score = 229.76854899787904
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.min (fp.abs (fp.min (fp.abs (fp.sub RNE x0 x6)) (fp.mul RNE (fp.neg x1) (fp.roundToIntegral RNE x3)))) (fp.mul RNE (fp.sub RNE (fp.add RNE (fp.max x0 x7) (fp.div RNE x7 x7)) (fp.div RNE (fp.neg x6) (fp.min x9 x3))) (fp.div RNE (fp.div RNE (fp.sqrt RNE x4) (fp.add RNE x8 x2)) (fp.abs (fp.add RNE x6 x6))))) (fp.div RNE (fp.neg (fp.div RNE (fp.sub RNE (fp.div RNE x9 x7) (fp.sub RNE x2 x6)) (fp.abs (fp.abs x2)))) (fp.min (fp.min (fp.roundToIntegral RNE (fp.min x0 x7)) (fp.div RNE (fp.mul RNE x5 x6) (fp.sqrt RNE x9))) (fp.sqrt RNE (fp.abs (fp.div RNE x3 x5)))))))(check-sat)