;  time  = {'mathsat': 34.62958836555481, 'z3': 298.114}
;  terms = 77
;  score = 263.48441163444517
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.roundToIntegral RNE (fp.abs (fp.sub RNE (fp.roundToIntegral RNE x3) (fp.min x6 x0)))) (fp.mul RNE (fp.div RNE (fp.roundToIntegral RNE (fp.abs x2)) (fp.abs (fp.add RNE x3 x1))) (fp.sqrt RNE (fp.div RNE (fp.max x8 x9) (fp.sub RNE x3 x7))))) (fp.div RNE (fp.mul RNE (fp.add RNE (fp.add RNE (fp.min x6 x1) (fp.max x1 x9)) (fp.mul RNE (fp.roundToIntegral RNE x3) (fp.roundToIntegral RNE x0))) (fp.min (fp.add RNE (fp.abs x9) (fp.mul RNE x2 x6)) (fp.sqrt RNE (fp.roundToIntegral RNE x5)))) (fp.mul RNE (fp.max (fp.add RNE (fp.roundToIntegral RNE x9) (fp.sqrt RNE x6)) (fp.min (fp.mul RNE x8 x8) (fp.div RNE x9 x9))) (fp.max (fp.div RNE (fp.div RNE x1 x6) (fp.max x0 x6)) (fp.abs (fp.roundToIntegral RNE x8)))))))(check-sat)