;  time  = {'mathsat': 27.42510414123535, 'z3': 570.239}
;  terms = 75
;  score = 542.8138958587647
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.neg (fp.max (fp.sqrt RNE (fp.add RNE x8 x9)) (fp.add RNE (fp.neg x5) (fp.mul RNE x4 x2)))) (fp.min (fp.abs (fp.max (fp.neg x0) (fp.sub RNE x7 x2))) (fp.div RNE (fp.min (fp.div RNE x4 x5) (fp.abs x3)) (fp.add RNE (fp.max x4 x6) (fp.sqrt RNE x3))))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.min x0 x8)) (fp.div RNE (fp.neg (fp.abs x4)) (fp.neg (fp.abs x0)))) (fp.max (fp.min (fp.mul RNE x6 x7) (fp.neg x1)) (fp.min (fp.div RNE x3 x0) (fp.add RNE x4 x7)))) (fp.sqrt RNE (fp.sub RNE (fp.add RNE (fp.div RNE x8 x3) (fp.sqrt RNE x6)) (fp.neg (fp.max x0 x3)))))))(check-sat)