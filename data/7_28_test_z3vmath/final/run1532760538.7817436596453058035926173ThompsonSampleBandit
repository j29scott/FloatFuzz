;  time  = {'z3': 228.46, 'mathsat': 8.264487981796265}
;  terms = 68
;  score = 220.19551201820374
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.add RNE (fp.min (fp.div RNE (fp.abs (fp.sub RNE x7 x6)) (fp.abs (fp.abs x4))) (fp.sub RNE (fp.sqrt RNE (fp.abs x8)) (fp.div RNE (fp.sqrt RNE x4) (fp.max x3 x3)))) (fp.mul RNE (fp.add RNE (fp.min (fp.sqrt RNE x5) (fp.add RNE x7 x9)) (fp.max (fp.sqrt RNE x0) (fp.div RNE x1 x8))) (fp.div RNE (fp.add RNE (fp.neg x5) (fp.mul RNE x0 x2)) (fp.roundToIntegral RNE (fp.abs x6))))) (fp.mul RNE (fp.min (fp.sqrt RNE (fp.add RNE (fp.min x8 x0) (fp.neg x8))) (fp.abs (fp.mul RNE (fp.max x5 x1) (fp.div RNE x5 x7)))) (fp.neg (fp.roundToIntegral RNE (fp.sqrt RNE (fp.div RNE x7 x8)))))))(check-sat)