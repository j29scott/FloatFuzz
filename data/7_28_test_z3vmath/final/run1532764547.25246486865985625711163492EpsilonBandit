;  time  = {'mathsat': 2.9485840797424316, 'z3': 228.271}
;  terms = 68
;  score = 225.32241592025755
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.abs (fp.sub RNE x1 x3)) (fp.neg (fp.div RNE x6 x3))) (fp.sub RNE (fp.add RNE (fp.add RNE x5 x6) (fp.mul RNE x0 x4)) (fp.min (fp.mul RNE x0 x3) (fp.div RNE x8 x2)))) (fp.mul RNE (fp.div RNE (fp.abs (fp.max (fp.mul RNE x5 x2) (fp.mul RNE x2 x1))) (fp.add RNE (fp.sqrt RNE (fp.abs x3)) (fp.min (fp.roundToIntegral RNE x8) (fp.roundToIntegral RNE x0)))) (fp.mul RNE (fp.abs (fp.add RNE (fp.add RNE x8 x7) (fp.min x9 x7))) (fp.min (fp.min (fp.abs x9) (fp.max x2 x5)) (fp.min (fp.abs x4) (fp.div RNE x8 x1))))))))(check-sat)