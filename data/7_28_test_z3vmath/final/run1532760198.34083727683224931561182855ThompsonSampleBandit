;  time  = {'mathsat': 2.9982895851135254, 'z3': 220.221}
;  terms = 62
;  score = 217.22271041488648
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.add RNE (fp.max (fp.roundToIntegral RNE (fp.abs x9)) (fp.abs (fp.abs x4))) (fp.div RNE (fp.add RNE (fp.min x0 x3) (fp.abs x8)) (fp.mul RNE (fp.mul RNE x6 x5) (fp.abs x6)))) (fp.mul RNE (fp.div RNE (fp.abs (fp.mul RNE x2 x1)) (fp.mul RNE (fp.min x1 x8) (fp.add RNE x4 x7))) (fp.abs (fp.sub RNE (fp.min x8 x2) (fp.max x0 x9))))) (fp.div RNE (fp.neg (fp.neg (fp.sqrt RNE (fp.mul RNE x9 x2)))) (fp.div RNE (fp.abs (fp.sqrt RNE (fp.sub RNE x2 x6))) (fp.sqrt RNE (fp.abs (fp.div RNE x3 x3)))))))(check-sat)