;  time  = {'mathsat': 3.061245918273926, 'z3': 488.625}
;  terms = 91
;  score = 485.5637540817261
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.sub RNE (fp.add RNE (fp.mul RNE (fp.max x2 x4) (fp.max x9 x1)) (fp.neg (fp.min x5 x9))) (fp.min (fp.mul RNE (fp.min x5 x9) (fp.roundToIntegral RNE x3)) (fp.abs (fp.sub RNE x3 x3)))) (fp.div RNE (fp.add RNE (fp.max (fp.sub RNE x9 x7) (fp.mul RNE x8 x1)) (fp.add RNE (fp.max x5 x2) (fp.mul RNE x5 x3))) (fp.max (fp.roundToIntegral RNE (fp.sqrt RNE (fp.roundToIntegral RNE x3))) (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE x9)) (fp.div RNE (fp.abs x7) (fp.max x7 x2)))))) (fp.max (fp.mul RNE (fp.add RNE (fp.mul RNE (fp.sub RNE x5 x0) (fp.sqrt RNE x5)) (fp.div RNE (fp.sub RNE x8 x4) (fp.sqrt RNE x9))) (fp.neg (fp.sub RNE (fp.sqrt RNE x9) (fp.abs x2)))) (fp.min (fp.sqrt RNE (fp.sqrt RNE (fp.max x3 x5))) (fp.neg (fp.max (fp.mul RNE x1 x9) (fp.abs x5)))))))(check-sat)