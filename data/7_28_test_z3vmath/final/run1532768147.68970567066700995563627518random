;  time  = {'z3': 151.652, 'mathsat': 2.1022956371307373}
;  terms = 106
;  score = 149.54970436286925
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.abs (fp.neg (fp.sub RNE (fp.neg x4) (fp.sqrt RNE x7)))) (fp.neg (fp.min (fp.add RNE (fp.sub RNE x9 x5) (fp.sub RNE x3 x7)) (fp.add RNE (fp.add RNE x6 x8) (fp.mul RNE x9 x4))))) (fp.add RNE (fp.max (fp.min (fp.max (fp.roundToIntegral RNE x8) (fp.min x5 (fp.div RNE x5 x7))) (fp.div RNE (fp.abs x5) (fp.sub RNE (fp.min x9 x3) (fp.min x3 x7)))) (fp.max (fp.sub RNE (fp.roundToIntegral RNE (fp.max x8 x5)) (fp.max (fp.min x9 x2) (fp.sqrt RNE x5))) (fp.mul RNE (fp.abs (fp.min x6 x2)) (fp.min (fp.mul RNE x2 x1) (fp.roundToIntegral RNE x4))))) (fp.max (fp.add RNE (fp.mul RNE (fp.add RNE x2 x6) (fp.max (fp.neg x7) (fp.max x9 x4))) (fp.add RNE (fp.mul RNE (fp.abs x3) (fp.max x7 x7)) (fp.mul RNE (fp.sub RNE x1 x6) (fp.sqrt RNE x7)))) (fp.roundToIntegral RNE (fp.sub RNE (fp.max x0 x9) (fp.div RNE (fp.sub RNE x3 x4) (fp.add RNE x6 x1))))))))(check-sat)