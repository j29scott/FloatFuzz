;  time  = {'z3': 600}
;  terms = 82
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.div RNE (fp.abs (fp.abs (fp.mul RNE x2 x1))) (fp.div RNE (fp.sqrt RNE (fp.abs x2)) (fp.mul RNE (fp.min (fp.mul RNE x3 x2) (fp.sqrt RNE x2)) (fp.sub RNE (fp.abs x3) (fp.min x2 x7))))) (fp.div RNE (fp.sqrt RNE (fp.mul RNE (fp.add RNE x7 x3) (fp.mul RNE x2 x0))) (fp.max (fp.abs (fp.mul RNE x6 x6)) (fp.div RNE (fp.sub RNE x9 x1) (fp.div RNE x5 x4))))) (fp.div RNE (fp.neg (fp.min (fp.roundToIntegral RNE (fp.max x2 x2)) (fp.min (fp.add RNE x3 x2) (fp.max x5 x7)))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.sqrt RNE x4) (fp.min (fp.div RNE x6 x9) (fp.add RNE x9 x0))) (fp.mul RNE (fp.abs x1) (fp.mul RNE x1 x1))) (fp.abs (fp.neg (fp.roundToIntegral RNE x0)))))))(check-sat)