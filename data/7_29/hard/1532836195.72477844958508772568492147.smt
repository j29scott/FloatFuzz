;  time  = {'z3': 600}
;  terms = 60
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.neg (fp.add RNE (fp.roundToIntegral RNE (fp.abs (fp.neg x7))) (fp.sqrt RNE (fp.abs (fp.neg x9))))) (fp.add RNE (fp.roundToIntegral RNE (fp.sqrt RNE (fp.neg (fp.min x7 x2)))) (fp.div RNE (fp.sub RNE (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE x3 x4)) (fp.roundToIntegral RNE (fp.min x2 x3))) (fp.mul RNE (fp.sqrt RNE (fp.mul RNE x5 x7)) (fp.sqrt RNE (fp.div RNE x5 x4)))) (fp.div RNE (fp.sqrt RNE (fp.min (fp.div RNE x6 x9) (fp.mul RNE x1 x4))) (fp.div RNE (fp.div RNE (fp.add RNE x5 x0) (fp.abs x8)) (fp.mul RNE (fp.min x0 x2) (fp.roundToIntegral RNE x9))))))))(check-sat)