;  time  = {'z3': 549.391}
;  terms = 82
;  score = 549.391
;  stdout= {'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.add RNE (fp.max (fp.sub RNE x5 x2) (fp.max x3 x8)) (fp.min (fp.div RNE x4 x0) (fp.min x0 x7))) (fp.sub RNE (fp.mul RNE (fp.min x6 x0) (fp.max x6 x0)) (fp.add RNE (fp.min x5 x1) (fp.max x9 x7)))) (fp.add RNE (fp.mul RNE (fp.abs (fp.div RNE x9 x5)) (fp.add RNE (fp.neg x9) (fp.sqrt RNE x5))) (fp.div RNE (fp.abs (fp.mul RNE x2 x0)) (fp.sub RNE (fp.mul RNE x1 x1) (fp.div RNE x2 x9))))) (fp.div RNE (fp.neg (fp.sub RNE (fp.mul RNE (fp.roundToIntegral RNE x2) (fp.div RNE x4 x0)) (fp.roundToIntegral RNE (fp.add RNE x8 x6)))) (fp.abs (fp.max (fp.min (fp.sqrt RNE x3) (fp.div RNE x6 x2)) (fp.mul RNE (fp.roundToIntegral RNE x1) (fp.roundToIntegral RNE x6)))))))(check-sat)