;  time  = {'z3': 600}
;  terms = 81
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.sub RNE (fp.mul RNE (fp.sqrt RNE (fp.div RNE x9 x9)) (fp.min (fp.div RNE x2 x8) (fp.div RNE x2 x6))) (fp.max (fp.div RNE (fp.mul RNE x2 x1) (fp.sub RNE x6 x4)) (fp.div RNE (fp.div RNE x5 x7) (fp.sub RNE x7 x9)))) (fp.div RNE (fp.min (fp.div RNE (fp.div RNE x6 x9) (fp.mul RNE x4 x7)) (fp.div RNE (fp.neg x5) (fp.abs x4))) (fp.min (fp.mul RNE (fp.roundToIntegral RNE x3) (fp.add RNE x5 x4)) (fp.neg (fp.sub RNE x8 x0))))) (fp.sqrt RNE (fp.div RNE (fp.sub RNE (fp.max (fp.roundToIntegral RNE x3) (fp.div RNE x7 x0)) (fp.div RNE (fp.roundToIntegral RNE x5) (fp.min x2 x0))) (fp.mul RNE (fp.add RNE (fp.sqrt RNE x6) (fp.div RNE x6 x7)) (fp.sqrt RNE (fp.add RNE x8 x1)))))))(check-sat)