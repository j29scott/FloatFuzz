;  time  = {'z3': 600}
;  terms = 81
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.min (fp.sub RNE (fp.div RNE (fp.div RNE x3 x7) (fp.div RNE x2 x3)) (fp.sqrt RNE (fp.add RNE x8 x7))) (fp.mul RNE (fp.add RNE (fp.neg x9) (fp.sqrt RNE x7)) (fp.max (fp.div RNE x6 x9) (fp.add RNE x0 x2)))) (fp.neg (fp.sub RNE (fp.add RNE (fp.min x9 x6) (fp.sub RNE x5 x7)) (fp.roundToIntegral RNE (fp.abs x1))))) (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE (fp.neg x1) (fp.max x1 x4))) (fp.sub RNE (fp.sqrt RNE (fp.abs x8)) (fp.min (fp.mul RNE x7 x3) (fp.mul RNE x2 x6)))) (fp.add RNE (fp.max (fp.add RNE (fp.sub RNE x3 x8) (fp.roundToIntegral RNE x7)) (fp.max (fp.neg x4) (fp.roundToIntegral RNE x0))) (fp.div RNE (fp.sqrt RNE (fp.sub RNE x9 x6)) (fp.abs (fp.abs x3)))))))(check-sat)