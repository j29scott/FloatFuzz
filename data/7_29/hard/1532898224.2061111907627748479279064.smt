;  time  = {'z3': 597.892}
;  terms = 81
;  score = 597.892
;  stdout= {'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sqrt RNE (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.sqrt RNE x7) (fp.add RNE x3 x2)) (fp.min (fp.neg x3) (fp.div RNE x8 x0))) (fp.max (fp.mul RNE (fp.add RNE x8 x6) (fp.abs x7)) (fp.add RNE (fp.abs x2) (fp.mul RNE x5 x1))))) (fp.min (fp.div RNE (fp.max (fp.min (fp.sqrt RNE x7) (fp.neg x6)) (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.add RNE x1 x1))) (fp.mul RNE (fp.add RNE (fp.min x1 x7) (fp.abs x2)) (fp.sqrt RNE (fp.mul RNE x2 x4)))) (fp.mul RNE (fp.div RNE (fp.max (fp.neg x2) (fp.neg x7)) (fp.sub RNE (fp.max x6 x6) (fp.div RNE x9 x6))) (fp.min (fp.max (fp.div RNE x1 x4) (fp.abs x2)) (fp.div RNE (fp.roundToIntegral RNE x2) (fp.max x0 x9)))))))(check-sat)