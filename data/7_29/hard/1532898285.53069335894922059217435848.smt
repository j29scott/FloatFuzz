;  time  = {'z3': 600}
;  terms = 83
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.min (fp.min (fp.max (fp.div RNE x1 x7) (fp.sqrt RNE x3)) (fp.div RNE (fp.sub RNE x9 x3) (fp.sqrt RNE x6))) (fp.roundToIntegral RNE (fp.neg (fp.mul RNE x1 x7)))) (fp.max (fp.abs (fp.min (fp.sub RNE x5 x3) (fp.div RNE x7 x3))) (fp.add RNE (fp.min (fp.roundToIntegral RNE x4) (fp.neg x6)) (fp.div RNE (fp.div RNE x6 x2) (fp.sub RNE x6 x1))))) (fp.add RNE (fp.min (fp.sub RNE (fp.add RNE (fp.abs x0) (fp.sqrt RNE x8)) (fp.min (fp.div RNE x0 x1) (fp.div RNE x1 x6))) (fp.neg (fp.neg (fp.abs x6)))) (fp.mul RNE (fp.mul RNE (fp.neg (fp.div RNE x0 x1)) (fp.neg (fp.sqrt RNE x9))) (fp.min (fp.max (fp.sub RNE x9 x6) (fp.add RNE x3 x1)) (fp.roundToIntegral RNE (fp.div RNE x0 x2)))))))(check-sat)