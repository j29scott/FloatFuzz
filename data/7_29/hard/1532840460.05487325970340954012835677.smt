;  time  = {'z3': 600}
;  terms = 90
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.mul RNE (fp.abs (fp.div RNE (fp.add RNE x5 x2) (fp.sqrt RNE x7))) (fp.div RNE (fp.sqrt RNE (fp.mul RNE x9 x4)) (fp.div RNE (fp.sqrt RNE x6) (fp.div RNE x5 x6)))) (fp.max (fp.mul RNE (fp.min (fp.div RNE (fp.div RNE x7 x5) (fp.sqrt RNE x5)) (fp.neg (fp.abs x0))) (fp.div RNE (fp.mul RNE (fp.sub RNE x8 x9) (fp.mul RNE x4 x1)) (fp.div RNE (fp.abs x7) (fp.div RNE x0 x0)))) (fp.mul RNE (fp.add RNE (fp.roundToIntegral RNE (fp.sub RNE x1 x2)) (fp.neg (fp.roundToIntegral RNE x0))) (fp.div RNE (fp.div RNE (fp.add RNE x1 x3) (fp.mul RNE x4 x3)) (fp.mul RNE (fp.sub RNE x1 x2) (fp.add RNE x3 x3)))))) (fp.neg (fp.div RNE (fp.add RNE (fp.max (fp.roundToIntegral RNE x8) (fp.sqrt RNE x9)) (fp.neg (fp.div RNE x5 x3))) (fp.roundToIntegral RNE (fp.add RNE (fp.max x6 x9) (fp.abs x2)))))))(check-sat)