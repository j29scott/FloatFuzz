;  time  = {'z3': 553.473}
;  terms = 89
;  score = 553.473
;  stdout= {'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.min (fp.roundToIntegral RNE (fp.add RNE (fp.abs x6) (fp.sub RNE x0 x8))) (fp.add RNE (fp.div RNE (fp.mul RNE x7 x7) (fp.sqrt RNE x4)) (fp.div RNE (fp.mul RNE x7 x1) (fp.div RNE x3 x4)))) (fp.div RNE (fp.neg (fp.sub RNE (fp.add RNE x5 x9) (fp.roundToIntegral RNE x9))) (fp.div RNE (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.mul RNE x6 x6)) (fp.div RNE (fp.sqrt RNE x3) (fp.div RNE x2 x7))))) (fp.add RNE (fp.add RNE (fp.add RNE (fp.min (fp.add RNE x0 x0) (fp.mul RNE x0 x9)) (fp.sub RNE (fp.roundToIntegral RNE x1) (fp.max x4 x2))) (fp.add RNE (fp.sqrt RNE (fp.sqrt RNE x3)) (fp.roundToIntegral RNE (fp.mul RNE x9 x9)))) (fp.mul RNE (fp.neg (fp.sub RNE (fp.add RNE x5 x4) (fp.min x7 x4))) (fp.mul RNE (fp.max (fp.sqrt RNE x9) (fp.max x4 x8)) (fp.roundToIntegral RNE (fp.add RNE x5 x9)))))))(check-sat)