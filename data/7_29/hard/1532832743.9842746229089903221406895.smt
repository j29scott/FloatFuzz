;  time  = {'z3': 590.867}
;  terms = 56
;  score = 590.867
;  stdout= {'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.min (fp.neg (fp.roundToIntegral RNE (fp.abs x1))) (fp.abs (fp.mul RNE (fp.roundToIntegral RNE x2) (fp.abs x9)))) (fp.sub RNE (fp.sub RNE (fp.mul RNE (fp.mul RNE x7 x0) (fp.sub RNE x5 x4)) (fp.max (fp.sqrt RNE x2) (fp.div RNE x7 x3))) (fp.sub RNE (fp.add RNE (fp.abs x7) (fp.roundToIntegral RNE x5)) (fp.div RNE (fp.div RNE x1 x8) (fp.mul RNE x9 x6))))) (fp.sqrt RNE (fp.sqrt RNE (fp.add RNE (fp.div RNE (fp.mul RNE x4 x4) (fp.abs x4)) (fp.mul RNE (fp.sqrt RNE x7) (fp.mul RNE x3 x6)))))))(check-sat)