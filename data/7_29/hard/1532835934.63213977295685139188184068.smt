;  time  = {'z3': 600}
;  terms = 130
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.div RNE (fp.div RNE (fp.add RNE (fp.div RNE x3 x9) (fp.abs x3)) (fp.mul RNE (fp.roundToIntegral RNE x6) (fp.neg x5))) (fp.add RNE (fp.neg (fp.min (fp.add RNE x8 x4) (fp.abs x3))) (fp.add RNE (fp.roundToIntegral RNE (fp.sqrt RNE x5)) (fp.max (fp.add RNE x3 x1) (fp.sub RNE x8 x3))))) (fp.sub RNE (fp.max (fp.mul RNE (fp.mul RNE x3 (fp.add RNE x9 x5)) (fp.sub RNE (fp.roundToIntegral RNE x0) (fp.max x2 x9))) (fp.abs (fp.add RNE x8 (fp.min x8 x3)))) (fp.div RNE (fp.mul RNE (fp.mul RNE x6 x0) (fp.mul RNE (fp.div RNE x2 x9) (fp.max x4 x8))) (fp.div RNE (fp.max x2 x6) (fp.sub RNE (fp.mul RNE x6 x8) (fp.add RNE x7 x1)))))) (fp.div RNE (fp.mul RNE (fp.abs (fp.div RNE (fp.mul RNE x5 (fp.add RNE x8 x4)) (fp.div RNE (fp.div RNE x7 x9) (fp.mul RNE x3 x6)))) (fp.sqrt RNE (fp.abs (fp.abs x1)))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.add RNE (fp.sub RNE x6 x8) (fp.sub RNE x2 x9)) (fp.div RNE (fp.abs x9) (fp.max x6 x9))) (fp.abs (fp.add RNE (fp.div RNE x7 x8) (fp.add RNE x0 x7)))) (fp.neg (fp.sub RNE (fp.sqrt RNE (fp.sqrt RNE x1)) (fp.roundToIntegral RNE (fp.div RNE x8 x3))))))))(check-sat)