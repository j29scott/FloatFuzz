;  time  = {'mathsat': 36.121233224868774, 'z3': 17.833}
;  terms = 67
;  score = 18.288233224868776
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.min (fp.max (fp.mul RNE (fp.div RNE (fp.add RNE x9 x8) (fp.max x5 (fp.min x5 x7))) (fp.sub RNE (fp.min x0 x7) (fp.abs x2))) (fp.add RNE (fp.neg (fp.mul RNE x4 x3)) (fp.abs (fp.abs x6)))) (fp.sub RNE (fp.min (fp.neg (fp.sqrt RNE x4)) (fp.min (fp.mul RNE x5 x5) (fp.sub RNE x0 x4))) (fp.neg (fp.abs (fp.min x7 x3))))) (fp.max (fp.div RNE (fp.neg (fp.neg (fp.min x8 x8))) (fp.sqrt RNE (fp.div RNE (fp.add RNE x4 x8) (fp.min x9 x5)))) (fp.neg (fp.neg (fp.mul RNE (fp.sub RNE x3 x0) (fp.sqrt RNE x2)))))))(check-sat)