;  time  = {'z3': 9.527, 'mathsat': 98.18452835083008}
;  terms = 77
;  score = 88.65752835083008
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.roundToIntegral RNE (fp.abs (fp.max (fp.min x2 x1) (fp.max x1 x1)))) (fp.sub RNE (fp.min (fp.add RNE (fp.sqrt RNE x9) (fp.mul RNE x8 x5)) (fp.sub RNE (fp.mul RNE x2 x0) (fp.min x7 x3))) (fp.mul RNE (fp.add RNE (fp.min x1 x0) (fp.sub RNE x0 x6)) (fp.abs (fp.abs x5))))) (fp.min (fp.add RNE (fp.add RNE (fp.sub RNE (fp.max x2 x9) (fp.max x9 x4)) (fp.max (fp.add RNE x4 x4) (fp.abs x4))) (fp.div RNE (fp.max (fp.min x5 x0) (fp.mul RNE x8 x3)) (fp.add RNE (fp.abs x8) (fp.roundToIntegral RNE x0)))) (fp.abs (fp.max (fp.sqrt RNE (fp.add RNE x8 x5)) (fp.div RNE (fp.abs x8) (fp.abs x4)))))))(check-sat)