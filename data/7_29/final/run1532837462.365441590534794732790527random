;  time  = {'z3': 19.195, 'mathsat': 71.34483599662781}
;  terms = 76
;  score = 52.14983599662781
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.min (fp.roundToIntegral RNE (fp.min (fp.mul RNE (fp.neg x3) (fp.add RNE x4 x6)) (fp.roundToIntegral RNE (fp.mul RNE x5 x6)))) (fp.add RNE (fp.min (fp.min (fp.add RNE x5 x4) (fp.div RNE x8 x9)) (fp.sqrt RNE (fp.roundToIntegral RNE x1))) (fp.min (fp.add RNE (fp.sub RNE x1 x7) (fp.neg x3)) (fp.sqrt RNE (fp.sub RNE x4 x5))))) (fp.mul RNE (fp.sqrt RNE (fp.sub RNE (fp.max (fp.mul RNE x3 x8) (fp.max x9 x8)) (fp.min (fp.abs x1) (fp.roundToIntegral RNE x6)))) (fp.add RNE (fp.min (fp.sub RNE (fp.min x9 x1) (fp.sub RNE x6 x7)) (fp.div RNE (fp.max x6 x7) (fp.add RNE x7 x0))) (fp.sqrt RNE (fp.div RNE (fp.add RNE x3 x4) (fp.mul RNE x9 x5)))))))(check-sat)