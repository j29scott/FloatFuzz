;  time  = {'mathsat': 401.1524167060852, 'z3': 250.867}
;  terms = 61
;  score = 150.28541670608521
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isSubnormal (fp.div RNE (fp.max (fp.roundToIntegral RNE (fp.sqrt RNE (fp.roundToIntegral RNE x3))) (fp.roundToIntegral RNE (fp.max (fp.neg (fp.neg x5)) (fp.div RNE (fp.div RNE x5 x7) (fp.abs x2))))) (fp.div RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.neg x7) (fp.neg x5)) (fp.mul RNE (fp.roundToIntegral RNE x8) (fp.sub RNE x8 x7))) (fp.add RNE (fp.add RNE (fp.neg x6) (fp.roundToIntegral RNE x3)) (fp.neg (fp.abs x0)))) (fp.add RNE (fp.add RNE (fp.max (fp.add RNE x2 x4) (fp.sub RNE x8 x5)) (fp.sqrt RNE (fp.mul RNE x0 x4))) (fp.neg (fp.div RNE (fp.sub RNE x3 x1) (fp.neg x7))))))))(check-sat)