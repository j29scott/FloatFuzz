;  time  = {'mathsat': 97.27007508277893, 'z3': 72.325}
;  terms = 53
;  score = 24.945075082778928
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE (fp.abs x0)) (fp.sqrt RNE (fp.roundToIntegral RNE x0))) (fp.neg (fp.abs (fp.neg x6)))) (fp.roundToIntegral RNE (fp.abs (fp.abs (fp.div RNE x7 x4))))) (fp.sub RNE (fp.div RNE (fp.max (fp.max (fp.div RNE x8 x4) (fp.roundToIntegral RNE x0)) (fp.neg (fp.max x5 x4))) (fp.roundToIntegral RNE (fp.min (fp.sub RNE x7 x0) (fp.sub RNE x6 x4)))) (fp.abs (fp.add RNE (fp.sqrt RNE (fp.div RNE x7 x2)) (fp.add RNE (fp.mul RNE x2 x2) (fp.sqrt RNE x0)))))))(check-sat)