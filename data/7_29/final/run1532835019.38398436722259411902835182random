;  time  = {'mathsat': 18.06660485267639, 'z3': 8.163}
;  terms = 78
;  score = 9.903604852676391
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.max (fp.roundToIntegral RNE x8) (fp.neg x8))) (fp.sub RNE (fp.abs (fp.min x5 x2)) (fp.sqrt RNE (fp.abs x6)))) (fp.neg (fp.max (fp.mul RNE (fp.neg x0) (fp.roundToIntegral RNE x5)) (fp.roundToIntegral RNE (fp.max x2 x1))))) (fp.add RNE (fp.mul RNE (fp.min (fp.roundToIntegral RNE (fp.min x4 x1)) (fp.add RNE (fp.add RNE x9 x8) (fp.sqrt RNE x3))) (fp.min (fp.mul RNE (fp.roundToIntegral RNE x0) (fp.div RNE x8 x6)) (fp.abs (fp.min x4 (fp.neg x4))))) (fp.div RNE (fp.neg (fp.max (fp.min x3 x5) (fp.sub RNE x3 x0))) (fp.div RNE (fp.sub RNE (fp.mul RNE x0 x5) (fp.mul RNE x2 x4)) (fp.mul RNE (fp.sub RNE x1 (fp.mul RNE x4 x2)) (fp.abs x1)))))))(check-sat)