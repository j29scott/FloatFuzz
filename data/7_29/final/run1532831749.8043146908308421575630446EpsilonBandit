;  time  = {'z3': 17.833, 'mathsat': 20.755767822265625}
;  terms = 67
;  score = 2.9227678222656266
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.add RNE (fp.min (fp.div RNE (fp.neg x4) (fp.div RNE x1 x9)) (fp.min (fp.sqrt RNE x3) (fp.roundToIntegral RNE x6))) (fp.roundToIntegral RNE (fp.max (fp.abs x8) (fp.sqrt RNE x1)))) (fp.sqrt RNE (fp.add RNE (fp.add RNE (fp.abs x2) (fp.sqrt RNE x7)) (fp.add RNE (fp.add RNE x7 x2) (fp.mul RNE x9 x9))))) (fp.sub RNE (fp.max (fp.sub RNE (fp.add RNE (fp.sqrt RNE x1) (fp.min x4 x6)) (fp.min (fp.max x1 x5) (fp.add RNE x5 x7))) (fp.neg (fp.sub RNE (fp.add RNE x3 x5) (fp.sqrt RNE x3)))) (fp.neg (fp.sqrt RNE (fp.max (fp.max x0 x4) (fp.min x8 x8)))))))(check-sat)