;  time  = {'z3': 0.194, 'mathsat': 2.6789302825927734}
;  terms = 76
;  score = 2.4849302825927735
;  stdout= {'z3': 'unsat\n', 'mathsat': 'unsat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.sqrt RNE (fp.max (fp.div RNE (fp.sqrt RNE x9) (fp.sqrt RNE x1)) (fp.neg (fp.neg x1)))) (fp.sqrt RNE (fp.neg (fp.neg (fp.neg (fp.abs x0)))))) (fp.add RNE (fp.min (fp.min (fp.sqrt RNE (fp.sub RNE x1 x6)) (fp.sqrt RNE (fp.add RNE x1 x2))) (fp.sub RNE (fp.add RNE (fp.add RNE (fp.max x2 x7) (fp.div RNE x7 x0)) (fp.sub RNE (fp.div RNE x7 x7) (fp.div RNE x8 x3))) (fp.roundToIntegral RNE (fp.min (fp.add RNE x0 x7) (fp.div RNE x7 x5))))) (fp.sub RNE (fp.min (fp.max (fp.min x3 x5) (fp.sub RNE x5 x3)) (fp.abs (fp.max x3 x9))) (fp.add RNE (fp.mul RNE (fp.neg x0) (fp.sub RNE x6 x0)) (fp.abs (fp.roundToIntegral RNE x3)))))))(check-sat)