;  time  = {'z3': 35.006, 'mathsat': 104.22637248039246}
;  terms = 89
;  score = 69.22037248039246
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.add RNE (fp.max (fp.max (fp.abs x2) (fp.add RNE x7 x3)) (fp.abs (fp.mul RNE x0 x7))) (fp.add RNE (fp.sub RNE (fp.add RNE x5 x8) (fp.div RNE x3 x0)) (fp.abs (fp.sqrt RNE x0)))) (fp.add RNE (fp.min (fp.add RNE (fp.abs x3) (fp.neg x3)) (fp.abs (fp.neg x3))) (fp.abs (fp.mul RNE (fp.roundToIntegral RNE x2) (fp.roundToIntegral RNE x5))))) (fp.max (fp.max (fp.min (fp.min (fp.mul RNE x9 x6) (fp.min x8 x5)) (fp.sqrt RNE (fp.sub RNE x7 x4))) (fp.abs (fp.div RNE (fp.neg x3) (fp.mul RNE x0 x0)))) (fp.min (fp.add RNE (fp.max (fp.abs x5) (fp.add RNE x7 x9)) (fp.mul RNE (fp.sub RNE x9 x8) (fp.sqrt RNE x1))) (fp.min (fp.mul RNE (fp.min x9 x6) (fp.abs x4)) (fp.mul RNE (fp.abs x1) (fp.sub RNE x3 x6)))))))(check-sat)