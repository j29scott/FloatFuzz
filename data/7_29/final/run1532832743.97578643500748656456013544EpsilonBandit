;  time  = {'z3': 8.219, 'mathsat': 22.030289888381958}
;  terms = 116
;  score = 13.811289888381959
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.min (fp.min (fp.roundToIntegral RNE (fp.max x8 x8)) (fp.sqrt RNE (fp.min x1 x5))) (fp.min (fp.mul RNE (fp.min x3 x0) (fp.min x8 x9)) (fp.mul RNE (fp.min x9 x6) (fp.sub RNE x4 x3)))) (fp.min (fp.sub RNE (fp.sqrt RNE (fp.mul RNE x5 x5)) (fp.roundToIntegral RNE (fp.min x3 x6))) (fp.roundToIntegral RNE (fp.min (fp.div RNE x5 x2) (fp.min x7 x5))))) (fp.min (fp.min (fp.min (fp.min (fp.sub RNE x3 x8) (fp.neg x5)) (fp.min (fp.min x7 x6) (fp.min x8 (fp.min x7 x9)))) (fp.div RNE (fp.min (fp.min (fp.sub RNE x2 x2) (fp.min x2 x0)) (fp.sub RNE (fp.neg x9) (fp.roundToIntegral RNE x6))) (fp.min (fp.add RNE (fp.sqrt RNE x1) (fp.sub RNE x0 x3)) (fp.max (fp.min x0 x7) (fp.max x4 x7))))) (fp.min (fp.min (fp.sqrt RNE (fp.min (fp.sub RNE x6 x2) (fp.min x9 x8))) (fp.abs (fp.roundToIntegral RNE (fp.mul RNE x7 x7)))) (fp.roundToIntegral RNE (fp.add RNE (fp.sqrt RNE (fp.sub RNE x2 x2)) (fp.roundToIntegral RNE (fp.min x1 x5))))))))(check-sat)