;  time  = {'mathsat': 134.40153813362122, 'z3': 77.48}
;  terms = 68
;  score = 56.92153813362121
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.mul RNE (fp.max (fp.neg (fp.sqrt RNE x2)) (fp.abs (fp.add RNE x8 x6))) (fp.add RNE (fp.max (fp.min x9 x9) (fp.div RNE x3 x2)) (fp.neg (fp.neg x9)))) (fp.sub RNE (fp.max (fp.sqrt RNE (fp.mul RNE x6 x9)) (fp.add RNE (fp.add RNE x4 x0) (fp.min x1 x7))) (fp.max (fp.max (fp.roundToIntegral RNE x8) (fp.div RNE x0 x4)) (fp.div RNE (fp.add RNE x2 x7) (fp.add RNE x8 x6))))) (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE x7) (fp.min x2 x6)) (fp.neg (fp.div RNE x1 x1)))) (fp.roundToIntegral RNE (fp.abs (fp.sqrt RNE (fp.max x3 x4)))))))(check-sat)