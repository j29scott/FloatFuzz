;  time  = {'mathsat': 59.6225962638855, 'z3': 32.334}
;  terms = 69
;  score = 27.288596263885495
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.min x8 x4) (fp.max x7 x4))) (fp.roundToIntegral RNE (fp.div RNE (fp.sqrt RNE x2) (fp.mul RNE x4 x8)))) (fp.sub RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.sqrt RNE x5))) (fp.add RNE (fp.mul RNE (fp.roundToIntegral RNE x4) (fp.div RNE x6 x2)) (fp.min (fp.neg x9) (fp.roundToIntegral RNE x1))))) (fp.max (fp.max (fp.mul RNE (fp.abs (fp.sub RNE x8 x1)) (fp.abs (fp.sub RNE x7 x4))) (fp.abs (fp.roundToIntegral RNE (fp.min x2 x9)))) (fp.max (fp.mul RNE (fp.abs (fp.add RNE x5 x5)) (fp.sqrt RNE (fp.add RNE x3 x5))) (fp.roundToIntegral RNE (fp.min (fp.add RNE x0 x4) (fp.add RNE x0 x9)))))))(check-sat)