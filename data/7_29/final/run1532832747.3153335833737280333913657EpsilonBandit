;  time  = {'z3': 13.485, 'mathsat': 209.0778956413269}
;  terms = 46
;  score = 195.5928956413269
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.sqrt RNE (fp.min (fp.roundToIntegral RNE (fp.mul RNE x4 x3)) (fp.roundToIntegral RNE (fp.sqrt RNE x6)))) (fp.sub RNE (fp.neg (fp.roundToIntegral RNE (fp.abs x1))) (fp.roundToIntegral RNE (fp.neg (fp.abs x0))))) (fp.max (fp.add RNE (fp.roundToIntegral RNE (fp.sqrt RNE (fp.roundToIntegral RNE x3))) (fp.abs (fp.mul RNE (fp.max x8 x2) (fp.sub RNE x1 x3)))) (fp.div RNE (fp.abs (fp.sub RNE (fp.neg x7) (fp.div RNE x3 x7))) (fp.neg (fp.neg (fp.roundToIntegral RNE x2)))))))(check-sat)