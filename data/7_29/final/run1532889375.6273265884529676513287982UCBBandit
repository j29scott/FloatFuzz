;  time  = {'mathsat': 95.81483483314514, 'z3': 53.671}
;  terms = 72
;  score = 42.14383483314514
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.neg (fp.div RNE (fp.abs (fp.abs x5)) (fp.div RNE (fp.sqrt RNE x9) (fp.roundToIntegral RNE x1)))) (fp.min (fp.sub RNE (fp.neg (fp.div RNE x0 x1)) (fp.abs (fp.abs x9))) (fp.abs (fp.roundToIntegral RNE (fp.roundToIntegral RNE x8))))) (fp.min (fp.sub RNE (fp.mul RNE (fp.sqrt RNE (fp.min x6 x9)) (fp.div RNE (fp.min x9 x3) (fp.abs x8))) (fp.mul RNE (fp.min (fp.min x5 x3) (fp.max x1 x0)) (fp.abs (fp.min x5 x2)))) (fp.sub RNE (fp.sub RNE (fp.neg (fp.roundToIntegral RNE x6)) (fp.sqrt RNE (fp.roundToIntegral RNE x5))) (fp.max (fp.min (fp.div RNE x2 x8) (fp.mul RNE x3 x5)) (fp.max (fp.min x7 x9) (fp.abs x2)))))))(check-sat)