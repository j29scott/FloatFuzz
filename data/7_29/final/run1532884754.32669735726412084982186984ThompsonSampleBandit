;  time  = {'mathsat': 22.36959934234619, 'z3': 9.529}
;  terms = 72
;  score = 12.840599342346191
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.max (fp.add RNE (fp.sqrt RNE (fp.add RNE x0 x6)) (fp.neg (fp.abs x9))) (fp.max (fp.roundToIntegral RNE (fp.add RNE x6 x4)) (fp.abs (fp.mul RNE x2 x2)))) (fp.add RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.min x5 x0))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.mul RNE x3 x3))))) (fp.min (fp.neg (fp.div RNE (fp.add RNE (fp.min x0 x0) (fp.min x5 x5)) (fp.max (fp.max x6 x3) (fp.roundToIntegral RNE x5)))) (fp.min (fp.min (fp.sqrt RNE (fp.min x9 x3)) (fp.mul RNE (fp.roundToIntegral RNE x7) (fp.sub RNE x0 x0))) (fp.max (fp.mul RNE (fp.roundToIntegral RNE x5) (fp.div RNE x0 x1)) (fp.min (fp.roundToIntegral RNE x6) (fp.mul RNE x0 x9)))))))(check-sat)