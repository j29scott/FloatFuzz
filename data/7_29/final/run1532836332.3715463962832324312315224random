;  time  = {'z3': 0.102, 'mathsat': 6.38283896446228}
;  terms = 97
;  score = 6.28083896446228
;  stdout= {'z3': 'unsat\n', 'mathsat': 'unsat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.mul RNE (fp.neg (fp.roundToIntegral RNE x8)) (fp.max (fp.div RNE x2 (fp.sub RNE x0 x1)) (fp.div RNE (fp.add RNE x9 x3) (fp.neg x9)))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x1 (fp.sqrt RNE x6))) (fp.div RNE (fp.neg x8) (fp.sub RNE x2 x1)))) (fp.sqrt RNE (fp.neg (fp.abs (fp.neg x7))))) (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.mul RNE (fp.div RNE x9 x7) (fp.div RNE (fp.min x6 x6) (fp.neg x7))) (fp.max (fp.abs x9) (fp.div RNE x8 x6))) (fp.mul RNE (fp.div RNE (fp.div RNE x1 x1) (fp.div RNE x3 x1)) (fp.add RNE (fp.sub RNE (fp.abs x6) (fp.max x3 x6)) (fp.add RNE (fp.min x7 x1) (fp.roundToIntegral RNE x6))))) (fp.max (fp.roundToIntegral RNE (fp.mul RNE (fp.abs x8) (fp.min x1 x7))) (fp.min (fp.add RNE (fp.abs x7) (fp.sub RNE x4 x1)) (fp.div RNE (fp.div RNE x5 x8) (fp.sqrt RNE x8)))))))(check-sat)