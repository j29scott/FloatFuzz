;  time  = {'mathsat': 37.61781024932861, 'z3': 23.557}
;  terms = 65
;  score = 14.060810249328615
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE (fp.sqrt RNE x0)) (fp.sub RNE (fp.neg x8) (fp.max x5 x0))) (fp.add RNE (fp.div RNE (fp.div RNE x4 x7) (fp.sqrt RNE x1)) (fp.mul RNE (fp.div RNE x3 x4) (fp.min x8 x9)))) (fp.add RNE (fp.max (fp.max (fp.abs x6) (fp.div RNE x3 x3)) (fp.min (fp.max x3 x3) (fp.roundToIntegral RNE x2))) (fp.sub RNE (fp.abs (fp.sub RNE x9 x9)) (fp.sqrt RNE (fp.abs x8))))) (fp.abs (fp.add RNE (fp.neg (fp.sub RNE (fp.roundToIntegral RNE x0) (fp.min x4 x5))) (fp.roundToIntegral RNE (fp.add RNE (fp.abs x4) (fp.add RNE x0 x4)))))))(check-sat)