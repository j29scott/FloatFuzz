;  time  = {'z3': 60.598, 'mathsat': 161.96893882751465}
;  terms = 78
;  score = 101.37093882751465
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.max (fp.div RNE (fp.sqrt RNE (fp.abs x6)) (fp.sub RNE (fp.mul RNE x3 x6) (fp.mul RNE x2 x4))) (fp.max (fp.min (fp.max x6 x1) (fp.neg x3)) (fp.add RNE (fp.roundToIntegral RNE x2) (fp.min x5 x3)))) (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE (fp.abs x9) (fp.abs x3))) (fp.mul RNE (fp.max (fp.sub RNE x9 x4) (fp.neg x2)) (fp.sqrt RNE (fp.div RNE x4 x7))))) (fp.min (fp.neg (fp.max (fp.max (fp.neg x1) (fp.div RNE x6 x7)) (fp.sub RNE (fp.roundToIntegral RNE x6) (fp.div RNE x3 x9)))) (fp.min (fp.neg (fp.neg (fp.div RNE x7 x0))) (fp.div RNE (fp.neg (fp.max x5 x7)) (fp.div RNE (fp.min x2 x1) (fp.min x5 x2)))))))(check-sat)