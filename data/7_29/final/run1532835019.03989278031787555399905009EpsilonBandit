;  time  = {'mathsat': 98.39411306381226, 'z3': 23.712}
;  terms = 93
;  score = 74.68211306381225
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.add RNE (fp.min (fp.sub RNE (fp.sub RNE x2 x2) (fp.roundToIntegral RNE x3)) (fp.add RNE (fp.min x2 x0) (fp.sub RNE x1 x7))) (fp.mul RNE (fp.div RNE (fp.neg x0) (fp.roundToIntegral RNE x8)) (fp.max (fp.abs x8) (fp.sqrt RNE x2)))) (fp.max (fp.div RNE (fp.sub RNE (fp.add RNE x3 x9) (fp.abs x9)) (fp.mul RNE (fp.roundToIntegral RNE x2) (fp.add RNE x4 x9))) (fp.sub RNE (fp.min (fp.abs x5) (fp.sqrt RNE x3)) (fp.mul RNE (fp.min x8 x2) (fp.min x1 x2))))) (fp.sub RNE (fp.abs (fp.add RNE (fp.abs (fp.neg x4)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x7)))) (fp.add RNE (fp.mul RNE (fp.min (fp.mul RNE x5 x7) (fp.roundToIntegral RNE x2)) (fp.div RNE (fp.div RNE x9 x3) (fp.max x2 x3))) (fp.min (fp.mul RNE (fp.div RNE x0 x4) (fp.div RNE x7 x4)) (fp.min (fp.mul RNE x3 x2) (fp.abs x3)))))))(check-sat)