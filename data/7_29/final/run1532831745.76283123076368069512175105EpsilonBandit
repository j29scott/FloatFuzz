;  time  = {'z3': 22.001, 'mathsat': 46.099220752716064}
;  terms = 74
;  score = 24.098220752716063
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.min (fp.max (fp.max (fp.roundToIntegral RNE (fp.sub RNE x8 x1)) (fp.roundToIntegral RNE (fp.mul RNE x3 x1))) (fp.mul RNE (fp.sqrt RNE (fp.sqrt RNE x0)) (fp.mul RNE (fp.roundToIntegral RNE x2) (fp.max x3 x4)))) (fp.roundToIntegral RNE (fp.mul RNE (fp.neg (fp.sub RNE x1 x5)) (fp.div RNE (fp.add RNE x4 x0) (fp.neg x1))))) (fp.add RNE (fp.mul RNE (fp.abs (fp.max (fp.max x4 x0) (fp.mul RNE x1 x3))) (fp.div RNE (fp.max (fp.abs x3) (fp.roundToIntegral RNE x6)) (fp.abs (fp.sub RNE x2 x3)))) (fp.min (fp.add RNE (fp.sub RNE (fp.sub RNE x8 x3) (fp.roundToIntegral RNE x2)) (fp.min (fp.mul RNE x6 x3) (fp.add RNE x5 x3))) (fp.abs (fp.neg (fp.sub RNE x0 x6)))))))(check-sat)