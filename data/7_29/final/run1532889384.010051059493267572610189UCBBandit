;  time  = {'z3': 0.164, 'mathsat': 1.6541812419891357}
;  terms = 69
;  score = 1.4901812419891358
;  stdout= {'z3': 'unsat\n', 'mathsat': 'unsat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.min (fp.max (fp.min x3 x6) (fp.mul RNE x7 x5)) (fp.mul RNE (fp.min x6 x9) (fp.min x8 x0))) (fp.min (fp.min (fp.add RNE x3 x2) (fp.add RNE x8 x0)) (fp.sqrt RNE (fp.sqrt RNE x1)))) (fp.mul RNE (fp.sqrt RNE (fp.min (fp.abs x4) (fp.add RNE x6 x1))) (fp.min (fp.abs (fp.add RNE x0 x3)) (fp.roundToIntegral RNE (fp.mul RNE x6 x9))))) (fp.sub RNE (fp.roundToIntegral RNE (fp.max (fp.min (fp.min x0 x6) (fp.roundToIntegral RNE x5)) (fp.sqrt RNE (fp.sub RNE x4 x3)))) (fp.div RNE (fp.sqrt RNE (fp.neg (fp.abs x0))) (fp.abs (fp.sqrt RNE (fp.div RNE x5 x3)))))))(check-sat)