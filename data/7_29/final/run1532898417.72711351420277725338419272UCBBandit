;  time  = {'mathsat': 283.7943983078003, 'z3': 231.71}
;  terms = 74
;  score = 52.084398307800285
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.mul RNE (fp.sqrt RNE (fp.add RNE (fp.min x4 x3) (fp.roundToIntegral RNE x8))) (fp.mul RNE (fp.max (fp.neg x1) (fp.sqrt RNE x9)) (fp.mul RNE (fp.div RNE x2 x7) (fp.sqrt RNE x1)))) (fp.min (fp.sqrt RNE (fp.sub RNE (fp.div RNE x9 x3) (fp.add RNE x1 x2))) (fp.abs (fp.min (fp.min x2 x9) (fp.min x2 x9))))) (fp.div RNE (fp.mul RNE (fp.abs (fp.sub RNE (fp.sub RNE x5 x4) (fp.div RNE x3 x6))) (fp.add RNE (fp.div RNE (fp.abs x9) (fp.sqrt RNE x3)) (fp.min (fp.sqrt RNE x5) (fp.add RNE x0 x7)))) (fp.roundToIntegral RNE (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE x6) (fp.neg x4)) (fp.min (fp.div RNE x1 x0) (fp.neg x8)))))))(check-sat)