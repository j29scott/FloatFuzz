;  time  = {'z3': 17.854, 'mathsat': 2.8644306659698486}
;  terms = 87
;  score = -14.98956933403015
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.min (fp.min (fp.neg (fp.add RNE (fp.mul RNE x3 x7) (fp.abs x7))) (fp.max (fp.abs (fp.abs x0)) (fp.sqrt RNE (fp.max x3 x7)))) (fp.min (fp.roundToIntegral RNE (fp.div RNE (fp.max x6 x7) (fp.max x4 x4))) (fp.mul RNE (fp.div RNE (fp.add RNE x6 x1) (fp.min x0 x9)) (fp.roundToIntegral RNE (fp.div RNE x9 x3))))) (fp.add RNE (fp.max (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE x3) (fp.add RNE x6 x2)) (fp.neg (fp.mul RNE x9 x7))) (fp.mul RNE (fp.sqrt RNE (fp.sub RNE x4 x6)) (fp.sub RNE (fp.max x7 x1) (fp.mul RNE x1 x5)))) (fp.add RNE (fp.sqrt RNE (fp.min (fp.roundToIntegral RNE x4) (fp.mul RNE (fp.max x2 x2) (fp.mul RNE x4 x2)))) (fp.div RNE (fp.abs (fp.roundToIntegral RNE x2)) (fp.add RNE (fp.sub RNE x1 x4) (fp.sub RNE x5 x6)))))))(check-sat)