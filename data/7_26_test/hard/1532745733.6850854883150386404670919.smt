;  time  = {'mathsat': 13.645780563354492, 'z3': 552.173}
;  terms = 85
;  score = 538.5272194366455
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x0 x0) (fp.max x3 x6)))) (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.div RNE x3 x2) (fp.div RNE x6 (fp.roundToIntegral RNE x2))) (fp.div RNE (fp.sub RNE x8 x8) (fp.div RNE x9 x8))) (fp.div RNE (fp.roundToIntegral RNE (fp.sqrt RNE x3)) (fp.div RNE (fp.div RNE x1 x7) (fp.div RNE (fp.div RNE x5 x0) (fp.div RNE x2 x2)))))) (fp.min (fp.add RNE (fp.div RNE (fp.max (fp.add RNE x9 x1) (fp.roundToIntegral RNE x8)) (fp.div RNE (fp.neg (fp.roundToIntegral RNE x2)) (fp.div RNE (fp.min x0 x0) (fp.max x3 x2)))) (fp.sqrt RNE (fp.sqrt RNE (fp.max x0 x2)))) (fp.abs (fp.div RNE (fp.max (fp.roundToIntegral RNE x5) (fp.div RNE x3 x6)) (fp.mul RNE (fp.div RNE x5 x7) (fp.div RNE x3 (fp.div RNE x4 x3))))))))(check-sat)