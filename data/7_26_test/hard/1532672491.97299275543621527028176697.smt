;  time  = {'z3': 600, 'mathsat': 23.526418209075928}
;  terms = 78
;  score = 576.4735817909241
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.neg (fp.div RNE (fp.sub RNE (fp.div RNE (fp.sqrt RNE x1) (fp.sqrt RNE x3)) (fp.div RNE (fp.add RNE (fp.sub RNE x2 x5) (fp.mul RNE x6 x2)) (fp.div RNE (fp.abs x7) (fp.mul RNE x3 x2)))) (fp.sub RNE (fp.sqrt RNE (fp.sub RNE x9 x8)) (fp.sub RNE (fp.sqrt RNE x4) (fp.sqrt RNE x5))))) (fp.mul RNE (fp.div RNE (fp.abs (fp.neg (fp.mul RNE x9 (fp.sqrt RNE x4)))) (fp.sub RNE (fp.sub RNE (fp.neg x6) (fp.sqrt RNE (fp.neg x0))) (fp.mul RNE (fp.abs x6) (fp.sub RNE x4 x2)))) (fp.abs (fp.div RNE (fp.mul RNE (fp.div RNE (fp.mul RNE x0 x4) (fp.mul RNE x4 x5)) (fp.min (fp.roundToIntegral RNE x3) (fp.max x5 x5))) (fp.neg (fp.div RNE (fp.add RNE x0 x5) (fp.div RNE x0 x3))))))))(check-sat)