;  time  = {'z3': 600, 'mathsat': 47.53974986076355}
;  terms = 126
;  score = 552.4602501392365
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.min x8 x7) (fp.sub RNE x3 (fp.max x7 x8))) (fp.sub RNE (fp.sqrt RNE x6) (fp.max (fp.sqrt RNE x6) (fp.neg x2)))) (fp.add RNE (fp.sub RNE (fp.div RNE (fp.mul RNE x8 x9) (fp.div RNE x7 x6)) (fp.sqrt RNE (fp.min x2 x9))) (fp.mul RNE (fp.min (fp.sub RNE x4 x8) (fp.abs x2)) (fp.sqrt RNE (fp.min x4 x9))))) (fp.sqrt RNE (fp.abs (fp.div RNE (fp.sqrt RNE x3) (fp.div RNE x4 (fp.abs x1)))))) (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.div RNE (fp.min x4 (fp.min x3 x1)) (fp.mul RNE x6 x5)) (fp.min (fp.div RNE x5 x0) (fp.min x6 (fp.sqrt RNE x0)))) (fp.div RNE (fp.max (fp.add RNE (fp.sqrt RNE x6) (fp.add RNE x4 x8)) (fp.max (fp.min x4 x9) (fp.neg x3))) (fp.sqrt RNE (fp.abs (fp.abs x9))))) (fp.sub RNE (fp.neg (fp.div RNE (fp.sub RNE (fp.roundToIntegral RNE x8) (fp.add RNE x2 x1)) (fp.sqrt RNE (fp.mul RNE x6 x0)))) (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.neg x0) (fp.abs x2)) (fp.abs (fp.sqrt RNE x3))) (fp.max (fp.abs (fp.roundToIntegral RNE x2)) (fp.min (fp.max x1 x4) (fp.min x1 x9))))))))(check-sat)