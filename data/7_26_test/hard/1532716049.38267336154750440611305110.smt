;  time  = {'mathsat': 38.797443866729736, 'z3': 562.897}
;  terms = 76
;  score = 524.0995561332703
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE (fp.neg x0)) (fp.max (fp.neg x3) (fp.add RNE x0 x7))) (fp.div RNE (fp.div RNE (fp.mul RNE x5 x8) (fp.sub RNE x9 x1)) (fp.add RNE (fp.min x5 x1) (fp.min x9 x7)))) (fp.neg (fp.max (fp.abs (fp.add RNE x5 x7)) (fp.add RNE (fp.max x2 x4) (fp.roundToIntegral RNE (fp.sub RNE x8 x3)))))) (fp.mul RNE (fp.add RNE (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE x7) (fp.add RNE x9 x0)) (fp.add RNE (fp.abs x7) (fp.add RNE x9 x5))) (fp.add RNE (fp.add RNE (fp.div RNE x5 x4) (fp.sub RNE x1 x0)) (fp.max (fp.mul RNE x8 x4) (fp.roundToIntegral RNE x5)))) (fp.abs (fp.abs (fp.sqrt RNE (fp.abs x1)))))))(check-sat)