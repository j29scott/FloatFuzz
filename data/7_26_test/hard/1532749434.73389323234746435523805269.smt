;  time  = {'z3': 600, 'mathsat': 93.11317205429077}
;  terms = 96
;  score = 506.88682794570923
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.neg (fp.div RNE x1 x7)) (fp.min (fp.sqrt RNE x4) (fp.min x3 x6))) (fp.roundToIntegral RNE (fp.neg (fp.neg x8)))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE x7 x7) (fp.add RNE x7 x5)) (fp.add RNE (fp.div RNE (fp.div RNE x8 x1) (fp.sub RNE x6 x8)) (fp.div RNE (fp.neg x8) (fp.sqrt RNE x3)))) (fp.roundToIntegral RNE (fp.div RNE (fp.max x4 x9) (fp.div RNE x3 x7))))) (fp.div RNE (fp.neg (fp.div RNE (fp.div RNE (fp.sqrt RNE x4) (fp.div RNE x5 x6)) (fp.max (fp.div RNE x7 x7) (fp.neg x0)))) (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.sub RNE x5 x9) (fp.add RNE x0 x1)) (fp.div RNE (fp.max x5 x0) (fp.add RNE (fp.neg x8) (fp.max x6 x9)))) (fp.mul RNE (fp.div RNE (fp.neg x0) (fp.div RNE x0 x1)) (fp.add RNE (fp.sub RNE x2 x2) (fp.div RNE x2 x3)))))))(check-sat)