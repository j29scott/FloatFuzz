;  time  = {'z3': 600, 'mathsat': 6.8148040771484375}
;  terms = 86
;  score = 593.1851959228516
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.mul RNE (fp.div RNE (fp.div RNE (fp.mul RNE (fp.mul RNE x4 x4) (fp.neg (fp.div RNE x2 x6))) (fp.div RNE (fp.abs (fp.neg x6)) (fp.div RNE (fp.min x3 x0) (fp.add RNE x7 x7)))) (fp.max (fp.roundToIntegral RNE (fp.mul RNE (fp.max x4 x8) (fp.sqrt RNE x9))) (fp.min (fp.roundToIntegral RNE (fp.min x8 x7)) (fp.neg (fp.add RNE x0 x0))))) (fp.div RNE (fp.min (fp.div RNE (fp.neg (fp.div RNE x2 x9)) (fp.mul RNE (fp.div RNE x4 x0) (fp.roundToIntegral RNE x5))) (fp.div RNE (fp.sqrt RNE (fp.neg x7)) (fp.div RNE (fp.roundToIntegral RNE x5) (fp.sub RNE x9 x6)))) (fp.sub RNE (fp.sqrt RNE (fp.mul RNE (fp.mul RNE x7 x5) (fp.mul RNE x1 x5))) (fp.add RNE (fp.mul RNE (fp.max x8 x7) (fp.mul RNE x5 x3)) (fp.mul RNE (fp.neg x0) (fp.sub RNE x2 x7))))))))(check-sat)