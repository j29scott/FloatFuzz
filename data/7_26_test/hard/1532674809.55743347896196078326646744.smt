;  time  = {'mathsat': 31.98755192756653, 'z3': 600}
;  terms = 68
;  score = 568.0124480724335
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.min (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE x4) (fp.div RNE x8 x9)) (fp.sub RNE (fp.sqrt RNE x1) (fp.sqrt RNE x6))) (fp.roundToIntegral RNE (fp.max (fp.sqrt RNE x9) (fp.roundToIntegral RNE x3)))) (fp.roundToIntegral RNE (fp.neg (fp.abs (fp.mul RNE x3 x3))))) (fp.div RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.div RNE (fp.neg x4) (fp.sqrt RNE x6)) (fp.max (fp.neg x4) (fp.div RNE x6 x7)))) (fp.div RNE (fp.div RNE (fp.min (fp.add RNE x6 x2) (fp.sub RNE x0 x5)) (fp.abs (fp.add RNE x6 x1))) (fp.div RNE (fp.div RNE (fp.div RNE x6 (fp.max x1 x3)) (fp.div RNE x1 x2)) (fp.neg (fp.min x0 x2)))))))(check-sat)