;  time  = {'mathsat': 31.193853855133057, 'z3': 600}
;  terms = 70
;  score = 568.806146144867
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.roundToIntegral RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.div RNE (fp.sqrt RNE x2) (fp.max x4 x3))) (fp.div RNE (fp.roundToIntegral RNE (fp.mul RNE x7 x9)) (fp.abs (fp.mul RNE x2 x4))))) (fp.div RNE (fp.mul RNE (fp.min (fp.neg (fp.abs x7)) (fp.div RNE (fp.div RNE x9 x1) (fp.abs x0))) (fp.sub RNE (fp.div RNE (fp.div RNE x0 x3) (fp.add RNE x1 x0)) (fp.div RNE (fp.sqrt RNE x2) (fp.abs x1)))) (fp.max (fp.mul RNE (fp.sqrt RNE (fp.div RNE x4 x4)) (fp.div RNE (fp.min x9 x8) (fp.neg x5))) (fp.add RNE (fp.min (fp.min x8 x1) (fp.mul RNE x7 x7)) (fp.sub RNE (fp.abs x7) (fp.mul RNE x6 x1)))))))(check-sat)