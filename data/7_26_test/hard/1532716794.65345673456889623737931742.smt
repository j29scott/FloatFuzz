;  time  = {'z3': 600, 'mathsat': 20.626959562301636}
;  terms = 140
;  score = 579.3730404376984
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.add RNE (fp.sub RNE (fp.sqrt RNE (fp.abs (fp.max x5 x2))) (fp.add RNE (fp.add RNE (fp.max x4 x1) (fp.sub RNE x7 x2)) (fp.add RNE (fp.add RNE x6 (fp.add RNE x2 x8)) (fp.add RNE x2 x8)))) (fp.add RNE (fp.add RNE (fp.sub RNE (fp.sub RNE x3 x3) (fp.add RNE x8 (fp.sub RNE x0 x9))) (fp.add RNE (fp.min (fp.roundToIntegral RNE x8) (fp.add RNE x7 x7)) (fp.abs (fp.roundToIntegral RNE x2)))) (fp.add RNE (fp.add RNE (fp.add RNE x4 x7) (fp.add RNE x8 x2)) (fp.mul RNE (fp.div RNE (fp.sqrt RNE x0) (fp.div RNE x8 x6)) (fp.mul RNE (fp.min x9 x9) (fp.mul RNE x7 x4)))))) (fp.add RNE (fp.add RNE (fp.abs (fp.max (fp.max x7 x4) (fp.roundToIntegral RNE x6))) (fp.add RNE (fp.div RNE (fp.neg (fp.neg x0)) (fp.max (fp.roundToIntegral RNE x2) (fp.div RNE x3 x9))) (fp.add RNE (fp.abs (fp.add RNE x4 x5)) (fp.add RNE (fp.min x8 x0) (fp.mul RNE x7 x3))))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.sqrt RNE (fp.div RNE x1 x9)) (fp.add RNE (fp.neg x7) (fp.div RNE x3 x5))) (fp.sub RNE (fp.sub RNE (fp.sqrt RNE x1) (fp.add RNE x3 x9)) (fp.div RNE (fp.sub RNE x2 x6) (fp.add RNE x5 x1)))) (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE (fp.neg x6) (fp.abs x1)) (fp.add RNE (fp.sub RNE x1 x3) (fp.roundToIntegral RNE x3))))))))(check-sat)