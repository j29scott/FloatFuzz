;  time  = {'z3': 541.469, 'mathsat': 4.144641160964966}
;  terms = 91
;  score = 537.3243588390351
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.div RNE x8 x6) (fp.mul RNE (fp.add RNE x1 x4) (fp.mul RNE x2 x6))) (fp.sub RNE (fp.div RNE x2 (fp.roundToIntegral RNE x6)) (fp.add RNE x9 x5))) (fp.mul RNE (fp.add RNE (fp.sub RNE x9 (fp.add RNE x8 x0)) (fp.add RNE x1 x3)) (fp.sub RNE (fp.div RNE x9 x5) (fp.sub RNE (fp.add RNE x3 x4) (fp.div RNE x5 x6))))) (fp.sub RNE (fp.min (fp.sub RNE (fp.div RNE x9 (fp.add RNE x1 x2)) (fp.add RNE (fp.sub RNE x8 x8) (fp.sub RNE x8 x1))) (fp.div RNE (fp.sqrt RNE x0) (fp.sub RNE x4 x1))) (fp.max (fp.min (fp.sub RNE (fp.div RNE x9 x2) (fp.add RNE x3 x5)) (fp.abs (fp.neg x5))) (fp.add RNE (fp.sub RNE (fp.div RNE x7 x8) (fp.add RNE x1 x6)) (fp.add RNE (fp.neg x1) (fp.add RNE x5 x5))))))))(check-sat)