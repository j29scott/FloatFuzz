;  time  = {'z3': 600, 'mathsat': 6.299554824829102}
;  terms = 117
;  score = 593.7004451751709
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.mul RNE (fp.div RNE (fp.div RNE (fp.sqrt RNE x8) (fp.div RNE (fp.roundToIntegral RNE x8) (fp.add RNE x9 x1))) (fp.div RNE (fp.max x4 x7) (fp.sub RNE x9 x2))) (fp.neg (fp.min (fp.add RNE x9 x9) (fp.add RNE x7 x2)))) (fp.add RNE (fp.add RNE (fp.add RNE (fp.neg x9) (fp.add RNE x3 x1)) (fp.abs (fp.max (fp.div RNE x6 x0) (fp.sqrt RNE x1)))) (fp.mul RNE (fp.neg (fp.neg x5)) (fp.sub RNE (fp.sqrt RNE x8) (fp.div RNE x3 x2))))) (fp.add RNE (fp.add RNE (fp.div RNE (fp.mul RNE (fp.div RNE x8 x7) (fp.roundToIntegral RNE x3)) (fp.add RNE (fp.div RNE x6 x3) (fp.div RNE (fp.max x7 x4) (fp.max x0 x3)))) (fp.add RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.div RNE x2 x5) (fp.neg x1))) (fp.div RNE (fp.neg (fp.add RNE x8 x5)) (fp.max (fp.mul RNE x9 x3) (fp.add RNE x8 x9))))) (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE (fp.abs x1)) (fp.add RNE (fp.add RNE x5 x4) (fp.roundToIntegral RNE x7))) (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE x9) (fp.add RNE x5 x5)) (fp.add RNE (fp.abs x4) (fp.add RNE x2 x2)))))))(check-sat)