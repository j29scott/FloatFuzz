;  time  = {'z3': 600, 'mathsat': 15.350633382797241}
;  terms = 110
;  score = 584.6493666172028
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.max (fp.div RNE (fp.div RNE (fp.add RNE x6 x4) (fp.roundToIntegral RNE x6)) (fp.sub RNE (fp.div RNE x5 x7) (fp.roundToIntegral RNE x9))) (fp.div RNE (fp.abs (fp.sub RNE x8 x9)) (fp.div RNE (fp.max (fp.sqrt RNE x7) (fp.sqrt RNE x1)) (fp.div RNE (fp.min x0 x9) (fp.min x4 x2))))) (fp.div RNE (fp.max (fp.div RNE (fp.div RNE x5 x2) (fp.div RNE x1 x1)) (fp.div RNE (fp.roundToIntegral RNE x5) (fp.add RNE (fp.sub RNE x9 x3) (fp.roundToIntegral RNE x4)))) (fp.neg (fp.abs (fp.neg x8))))) (fp.div RNE (fp.min (fp.div RNE (fp.div RNE (fp.div RNE x8 (fp.min x4 x3)) (fp.div RNE (fp.add RNE x2 x9) (fp.add RNE x3 x6))) (fp.mul RNE (fp.neg (fp.mul RNE x3 x0)) (fp.sub RNE (fp.div RNE x9 x6) (fp.add RNE x8 x0)))) (fp.sqrt RNE (fp.div RNE (fp.min x4 x6) (fp.max x6 x5)))) (fp.abs (fp.min (fp.neg (fp.roundToIntegral RNE (fp.abs x0))) (fp.add RNE (fp.div RNE (fp.sub RNE x2 x0) (fp.add RNE x3 x2)) (fp.roundToIntegral RNE (fp.mul RNE x3 x0))))))))(check-sat)