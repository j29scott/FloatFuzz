;  time  = {'mathsat': 4.650049448013306, 'z3': 600}
;  terms = 140
;  score = 595.3499505519867
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.add RNE (fp.add RNE (fp.min (fp.sub RNE x6 x7) (fp.add RNE x6 (fp.div RNE x3 x6))) (fp.max (fp.mul RNE (fp.sub RNE x8 x7) (fp.sqrt RNE x6)) (fp.sqrt RNE (fp.add RNE x9 x6)))) (fp.add RNE (fp.abs (fp.sub RNE x4 x5)) (fp.sub RNE (fp.div RNE (fp.sub RNE x1 x3) (fp.div RNE x2 x5)) (fp.add RNE (fp.neg x3) (fp.div RNE x6 x4))))) (fp.sub RNE (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE x1 (fp.add RNE x3 x3))) (fp.sub RNE (fp.sub RNE x7 x0) (fp.add RNE (fp.add RNE x9 x9) (fp.max x2 x1)))) (fp.abs (fp.abs (fp.add RNE (fp.sqrt RNE x7) (fp.sub RNE x1 x4)))))) (fp.add RNE (fp.sub RNE (fp.add RNE (fp.add RNE (fp.sub RNE x5 (fp.div RNE x3 x4)) (fp.add RNE x6 (fp.sub RNE x7 x1))) (fp.sub RNE (fp.mul RNE (fp.add RNE x6 x0) (fp.neg x2)) (fp.abs (fp.max x9 x7)))) (fp.add RNE (fp.add RNE (fp.div RNE x8 x8) (fp.sub RNE (fp.roundToIntegral RNE x0) (fp.abs x2))) (fp.sub RNE (fp.sub RNE x3 x3) (fp.sub RNE x4 x8)))) (fp.neg (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.add RNE x8 x4) (fp.max x5 x7)) (fp.add RNE (fp.mul RNE x4 x5) (fp.add RNE x0 x7))) (fp.div RNE (fp.sub RNE (fp.neg x6) (fp.mul RNE x5 x3)) (fp.neg (fp.max x5 x8))))))))(check-sat)