;  time  = {'z3': 600, 'mathsat': 36.47500991821289}
;  terms = 90
;  score = 563.5249900817871
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE x2 (fp.div RNE x2 x5)) (fp.div RNE x8 (fp.sub RNE x3 x8))) (fp.roundToIntegral RNE (fp.div RNE x7 x9))) (fp.div RNE (fp.div RNE (fp.div RNE x3 (fp.div RNE x2 x1)) (fp.div RNE x9 x9)) (fp.div RNE (fp.max (fp.sqrt RNE x4) (fp.min x1 x3)) (fp.min (fp.div RNE x0 x9) (fp.sub RNE x9 x6))))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.min x5 x5) (fp.div RNE (fp.sub RNE x5 x6) (fp.mul RNE x5 x3))) (fp.add RNE (fp.sub RNE (fp.div RNE x7 x5) (fp.div RNE x0 x0)) (fp.roundToIntegral RNE (fp.mul RNE x0 x7)))) (fp.add RNE (fp.div RNE (fp.max (fp.sub RNE x5 x3) (fp.sqrt RNE x0)) (fp.sub RNE (fp.add RNE x9 x5) (fp.neg x7))) (fp.abs (fp.div RNE (fp.div RNE x8 x6) (fp.mul RNE x2 x1))))))))(check-sat)