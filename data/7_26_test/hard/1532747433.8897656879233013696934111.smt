;  time  = {'z3': 600, 'mathsat': 30.468993186950684}
;  terms = 114
;  score = 569.5310068130493
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE x0) (fp.abs (fp.mul RNE x9 x6))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.div RNE x9 x0)))) (fp.div RNE (fp.abs (fp.roundToIntegral RNE x8)) (fp.div RNE (fp.div RNE x9 (fp.div RNE x3 x7)) (fp.neg (fp.neg x3))))) (fp.max (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE x2 x3) (fp.neg (fp.div RNE x8 x7)))) (fp.sub RNE (fp.min (fp.sqrt RNE x5) (fp.neg x5)) (fp.div RNE (fp.div RNE x6 x9) (fp.max (fp.sub RNE x5 x7) (fp.sub RNE x8 x7)))))) (fp.mul RNE (fp.div RNE (fp.neg (fp.roundToIntegral RNE (fp.add RNE x0 x2))) (fp.abs (fp.div RNE (fp.div RNE (fp.add RNE x0 x5) (fp.min x4 x3)) (fp.min (fp.sub RNE x8 x7) (fp.max x5 x9))))) (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE x1 x2) (fp.abs x9)) (fp.sub RNE (fp.sub RNE (fp.min x3 x6) (fp.abs x3)) (fp.sub RNE (fp.min x4 x3) (fp.roundToIntegral RNE x2)))) (fp.max (fp.abs (fp.div RNE x3 (fp.mul RNE x7 x9))) (fp.sub RNE (fp.roundToIntegral RNE x8) (fp.div RNE x3 (fp.neg x5))))))))(check-sat)