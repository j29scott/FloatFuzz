;  time  = {'z3': 600, 'mathsat': 21.252188444137573}
;  terms = 87
;  score = 578.7478115558624
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.sqrt RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE x0 (fp.mul RNE x8 x5)) (fp.div RNE x6 (fp.div RNE x3 x8))) (fp.sqrt RNE (fp.div RNE x3 (fp.sub RNE x0 x3))))) (fp.mul RNE (fp.mul RNE (fp.sqrt RNE (fp.div RNE x1 x8)) (fp.sub RNE (fp.div RNE (fp.sub RNE x6 x2) (fp.add RNE x1 x7)) (fp.max (fp.neg x9) (fp.mul RNE x7 x2)))) (fp.sqrt RNE (fp.sqrt RNE (fp.div RNE x8 x4))))) (fp.sub RNE (fp.sqrt RNE (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE x7 x6)) (fp.mul RNE (fp.div RNE x4 x4) (fp.mul RNE x9 x9)))) (fp.sub RNE (fp.neg (fp.div RNE (fp.neg x1) (fp.sub RNE (fp.min x4 x6) (fp.sqrt RNE x6)))) (fp.div RNE (fp.div RNE (fp.sqrt RNE x2) (fp.mul RNE (fp.min x5 x4) (fp.neg x0))) (fp.min (fp.add RNE x7 x1) (fp.sqrt RNE x0)))))))(check-sat)