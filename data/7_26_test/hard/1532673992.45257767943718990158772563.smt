;  time  = {'z3': 600, 'mathsat': 333.26785588264465}
;  terms = 75
;  score = 266.73214411735535
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.neg (fp.roundToIntegral RNE (fp.div RNE x3 (fp.min x4 x3)))) (fp.sqrt RNE (fp.min (fp.min (fp.mul RNE x1 x5) (fp.roundToIntegral RNE x9)) (fp.max (fp.div RNE x8 x7) (fp.add RNE x5 x4))))) (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE x0 (fp.div RNE x7 x7))) (fp.mul RNE (fp.div RNE x0 x5) (fp.div RNE (fp.add RNE x8 x0) (fp.div RNE x7 x9)))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.add RNE x4 x3) (fp.abs x3)) (fp.div RNE (fp.sqrt RNE x5) (fp.abs x2))) (fp.sub RNE (fp.div RNE (fp.min x3 x0) (fp.div RNE x7 x5)) (fp.neg (fp.div RNE x9 x2)))))) (fp.neg (fp.sqrt RNE (fp.sqrt RNE (fp.sqrt RNE (fp.sqrt RNE x9)))))))(check-sat)