;  time  = {'mathsat': 6.91837739944458, 'z3': 600}
;  terms = 110
;  score = 593.0816226005554
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.neg (fp.neg (fp.div RNE (fp.div RNE (fp.sqrt RNE x0) (fp.add RNE x2 x7)) (fp.add RNE (fp.sub RNE x8 x9) (fp.div RNE x4 x7))))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.div RNE (fp.sub RNE x4 x1) (fp.div RNE x2 (fp.div RNE x0 x3))) (fp.add RNE (fp.add RNE x2 x3) (fp.roundToIntegral RNE x4))) (fp.add RNE (fp.min (fp.add RNE (fp.abs x3) (fp.add RNE x7 x6)) (fp.div RNE (fp.roundToIntegral RNE x0) (fp.roundToIntegral RNE x7))) (fp.max (fp.add RNE (fp.sub RNE x9 x1) (fp.roundToIntegral RNE x3)) (fp.add RNE (fp.abs x5) (fp.div RNE x0 x8))))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.add RNE x6 (fp.max x2 x2)) (fp.div RNE x0 x4)) (fp.div RNE (fp.div RNE (fp.sqrt RNE x9) (fp.div RNE x8 x7)) (fp.add RNE (fp.add RNE x2 x8) (fp.neg x9)))) (fp.min (fp.add RNE (fp.min (fp.neg x2) (fp.abs x9)) (fp.add RNE (fp.div RNE x8 x3) (fp.sqrt RNE x3))) (fp.min (fp.min (fp.sqrt RNE x6) (fp.sub RNE x4 x0)) (fp.add RNE (fp.sqrt RNE x4) (fp.abs x9))))))))(check-sat)