;  time  = {'mathsat': 32.22108268737793, 'z3': 600}
;  terms = 83
;  score = 567.7789173126221
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.add RNE (fp.div RNE (fp.div RNE x9 x2) (fp.min x7 x4)) (fp.sqrt RNE (fp.neg x3))) (fp.add RNE (fp.add RNE (fp.sub RNE (fp.neg x8) (fp.sub RNE x7 x9)) (fp.add RNE (fp.div RNE x5 x0) (fp.mul RNE x2 x8))) (fp.mul RNE (fp.abs (fp.div RNE x1 x2)) (fp.roundToIntegral RNE (fp.neg x7))))) (fp.mul RNE (fp.roundToIntegral RNE (fp.neg (fp.mul RNE x5 x0))) (fp.sub RNE (fp.roundToIntegral RNE (fp.sub RNE x2 x4)) (fp.sub RNE (fp.add RNE x6 x1) (fp.min x5 x5))))) (fp.add RNE (fp.sqrt RNE (fp.min (fp.abs (fp.abs x5)) (fp.neg (fp.sub RNE x2 x0)))) (fp.mul RNE (fp.max (fp.div RNE (fp.abs x2) (fp.div RNE x9 x5)) (fp.roundToIntegral RNE (fp.sqrt RNE x4))) (fp.roundToIntegral RNE (fp.mul RNE (fp.abs x8) (fp.add RNE x8 x8)))))))(check-sat)