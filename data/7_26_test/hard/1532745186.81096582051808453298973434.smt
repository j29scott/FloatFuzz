;  time  = {'z3': 600, 'mathsat': 44.610841512680054}
;  terms = 134
;  score = 555.38915848732
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.min (fp.div RNE (fp.neg (fp.neg x0)) (fp.add RNE (fp.max x5 x5) (fp.mul RNE (fp.sqrt RNE x9) (fp.mul RNE x1 x5)))) (fp.div RNE (fp.div RNE (fp.sub RNE x1 x5) (fp.sqrt RNE x3)) (fp.mul RNE (fp.add RNE x7 x8) (fp.div RNE (fp.max x6 x0) (fp.add RNE x8 x1))))) (fp.div RNE (fp.add RNE (fp.min (fp.mul RNE x8 (fp.mul RNE x5 x7)) (fp.mul RNE x6 x4)) (fp.mul RNE (fp.add RNE x1 x3) (fp.add RNE x9 x5))) (fp.add RNE (fp.add RNE (fp.mul RNE x5 x9) (fp.sub RNE x5 x5)) (fp.mul RNE (fp.add RNE (fp.mul RNE x9 x0) (fp.sqrt RNE x5)) (fp.mul RNE (fp.mul RNE x4 x6) (fp.max x3 x8)))))) (fp.mul RNE (fp.max (fp.mul RNE (fp.mul RNE (fp.add RNE x1 (fp.sub RNE x1 x1)) (fp.roundToIntegral RNE x0)) (fp.sqrt RNE (fp.abs x5))) (fp.mul RNE (fp.neg (fp.roundToIntegral RNE x2)) (fp.neg (fp.mul RNE x7 x4)))) (fp.min (fp.add RNE (fp.mul RNE (fp.add RNE x4 (fp.mul RNE x7 x7)) (fp.add RNE (fp.sub RNE x1 x2) (fp.add RNE x6 x5))) (fp.add RNE (fp.sub RNE x1 x5) (fp.roundToIntegral RNE x2))) (fp.add RNE (fp.add RNE (fp.add RNE x2 (fp.abs x7)) (fp.add RNE (fp.min x1 x9) (fp.mul RNE x9 x7))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x3)))))))(check-sat)