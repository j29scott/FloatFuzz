;  time  = {'mathsat': 36.50660681724548, 'z3': 600}
;  terms = 108
;  score = 563.4933931827545
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.min (fp.max (fp.div RNE (fp.abs x3) (fp.neg x0)) (fp.sub RNE (fp.div RNE x1 x4) (fp.div RNE x9 (fp.mul RNE x8 x8)))) (fp.div RNE (fp.div RNE (fp.neg x1) (fp.neg x5)) (fp.sub RNE (fp.sqrt RNE x3) (fp.add RNE x6 x9)))) (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.min x1 x8) (fp.div RNE x0 x1)) (fp.div RNE (fp.sub RNE x0 x1) (fp.roundToIntegral RNE x9))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sqrt RNE x6)))) (fp.mul RNE (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x6 x0) (fp.abs x8))) (fp.div RNE (fp.div RNE (fp.add RNE x0 x2) (fp.sqrt RNE x6)) (fp.div RNE (fp.div RNE x6 x9) (fp.sub RNE x0 x7)))))) (fp.sqrt RNE (fp.div RNE (fp.sub RNE (fp.div RNE (fp.div RNE x0 x5) (fp.div RNE (fp.neg x9) (fp.max x3 x0))) (fp.div RNE (fp.div RNE x1 (fp.abs x0)) (fp.div RNE x5 x7))) (fp.add RNE (fp.sub RNE (fp.roundToIntegral RNE x6) (fp.div RNE x8 (fp.mul RNE x2 x3))) (fp.max (fp.abs x9) (fp.min x3 x9)))))))(check-sat)