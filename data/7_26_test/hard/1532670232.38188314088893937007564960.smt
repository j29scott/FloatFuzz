;  time  = {'z3': 600, 'mathsat': 67.11269998550415}
;  terms = 76
;  score = 532.8873000144958
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isSubnormal (fp.max (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.div RNE x0 x1) (fp.abs x2)) (fp.mul RNE (fp.sub RNE x9 x7) (fp.div RNE x8 x4))) (fp.mul RNE (fp.abs (fp.sub RNE x9 x1)) (fp.add RNE (fp.neg (fp.mul RNE x7 x7)) (fp.sqrt RNE (fp.mul RNE x5 x4))))) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE x8 (fp.roundToIntegral RNE x5)) (fp.sub RNE x1 (fp.sub RNE x7 x9))) (fp.mul RNE (fp.mul RNE x6 x7) (fp.div RNE (fp.mul RNE x4 x3) (fp.sub RNE x2 x5)))) (fp.sub RNE (fp.mul RNE (fp.sqrt RNE (fp.sqrt RNE x3)) (fp.div RNE (fp.sqrt RNE x2) (fp.max x6 x1))) (fp.mul RNE (fp.mul RNE (fp.sub RNE x0 x3) (fp.roundToIntegral RNE x6)) (fp.abs (fp.mul RNE x1 x7))))))))(check-sat)