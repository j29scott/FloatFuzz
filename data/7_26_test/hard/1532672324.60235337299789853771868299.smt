;  time  = {'z3': 564.396, 'mathsat': 10.583724975585938}
;  terms = 93
;  score = 553.812275024414
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.neg (fp.mul RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.add RNE x5 x6) (fp.div RNE x0 x9))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE x1)) (fp.sub RNE (fp.add RNE x7 x4) (fp.min x6 x5))) (fp.neg (fp.abs (fp.min x7 x7)))))) (fp.mul RNE (fp.max (fp.add RNE (fp.add RNE (fp.min x6 x4) (fp.mul RNE x5 x8)) (fp.sqrt RNE (fp.div RNE x6 x8))) (fp.mul RNE (fp.div RNE (fp.mul RNE x3 (fp.mul RNE x9 x5)) (fp.div RNE x4 x0)) (fp.div RNE (fp.mul RNE x6 (fp.div RNE x4 x8)) (fp.add RNE x3 x1)))) (fp.mul RNE (fp.abs (fp.add RNE (fp.max (fp.add RNE x4 x7) (fp.mul RNE x4 x1)) (fp.mul RNE (fp.roundToIntegral RNE x2) (fp.mul RNE x2 x4)))) (fp.div RNE (fp.abs (fp.max (fp.max x2 x7) (fp.sqrt RNE x1))) (fp.min (fp.roundToIntegral RNE (fp.sqrt RNE x1)) (fp.neg (fp.mul RNE x0 x1))))))))(check-sat)