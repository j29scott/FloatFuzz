;  time  = {'z3': 600, 'mathsat': 109.49543690681458}
;  terms = 75
;  score = 490.5045630931854
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isSubnormal (fp.mul RNE (fp.min (fp.min (fp.min (fp.min x9 x6) (fp.mul RNE x2 x3)) (fp.mul RNE (fp.div RNE x8 x6) (fp.sqrt RNE (fp.max x1 x6)))) (fp.div RNE (fp.add RNE (fp.mul RNE x4 x0) (fp.mul RNE x9 (fp.sub RNE x7 x9))) (fp.sqrt RNE (fp.mul RNE x1 x3)))) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.sub RNE (fp.sqrt RNE x6) (fp.mul RNE x7 x6)) (fp.roundToIntegral RNE (fp.add RNE x0 x6))) (fp.div RNE (fp.abs (fp.add RNE x4 x0)) (fp.sqrt RNE (fp.sub RNE x1 x9)))) (fp.add RNE (fp.mul RNE (fp.abs (fp.max x8 x8)) (fp.min (fp.abs x0) (fp.div RNE x2 x2))) (fp.abs (fp.sub RNE (fp.min x7 x4) (fp.mul RNE x2 x4))))))))(check-sat)