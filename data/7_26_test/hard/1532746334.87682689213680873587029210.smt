;  time  = {'mathsat': 30.6126651763916, 'z3': 600}
;  terms = 103
;  score = 569.3873348236084
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.abs (fp.div RNE (fp.roundToIntegral RNE (fp.abs (fp.mul RNE x8 x7))) (fp.min (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x8 x2) (fp.add RNE x8 x9))) (fp.add RNE (fp.sub RNE (fp.sub RNE x4 x4) (fp.div RNE x6 x1)) (fp.div RNE (fp.sub RNE x6 x7) (fp.div RNE x0 x0)))))) (fp.div RNE (fp.div RNE (fp.max (fp.roundToIntegral RNE (fp.div RNE x3 x9)) (fp.sub RNE (fp.abs x0) (fp.div RNE x3 x9))) (fp.div RNE (fp.max (fp.min x7 x8) (fp.add RNE x8 x4)) (fp.mul RNE (fp.sqrt RNE x8) (fp.neg x7)))) (fp.sub RNE (fp.add RNE (fp.div RNE (fp.sqrt RNE (fp.div RNE x1 x7)) (fp.roundToIntegral RNE (fp.sqrt RNE x9))) (fp.div RNE (fp.neg (fp.max x6 x3)) (fp.add RNE (fp.max x9 x6) (fp.min x6 x0)))) (fp.max (fp.sub RNE (fp.div RNE (fp.sqrt RNE x1) (fp.sqrt RNE x7)) (fp.neg (fp.div RNE x3 x6))) (fp.div RNE (fp.div RNE (fp.div RNE x8 x9) (fp.mul RNE x2 x5)) (fp.abs (fp.div RNE x9 x8))))))))(check-sat)