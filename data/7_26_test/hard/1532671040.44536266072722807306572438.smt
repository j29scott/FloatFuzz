;  time  = {'mathsat': 526.2283861637115, 'z3': 600}
;  terms = 71
;  score = 73.77161383628845
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.sub RNE (fp.div RNE (fp.sub RNE (fp.div RNE (fp.sqrt RNE x1) (fp.min (fp.abs x4) (fp.roundToIntegral RNE x0))) (fp.sub RNE (fp.sub RNE (fp.min x2 x3) (fp.mul RNE x8 x0)) (fp.mul RNE (fp.add RNE x1 x5) (fp.div RNE x5 x1)))) (fp.neg (fp.sub RNE (fp.sqrt RNE x9) (fp.add RNE (fp.mul RNE x7 x1) (fp.sub RNE x0 x7))))) (fp.mul RNE (fp.add RNE (fp.div RNE (fp.min x9 x0) (fp.sub RNE x5 x2)) (fp.max (fp.min x5 x8) (fp.div RNE x0 x5))) (fp.sub RNE (fp.sub RNE (fp.div RNE x3 (fp.mul RNE x3 x9)) (fp.neg (fp.sqrt RNE x1))) (fp.sub RNE (fp.sub RNE x0 x3) (fp.div RNE x5 x1)))))))(check-sat)