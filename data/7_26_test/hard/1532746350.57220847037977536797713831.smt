;  time  = {'mathsat': 37.80894613265991, 'z3': 600}
;  terms = 67
;  score = 562.1910538673401
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.sub RNE (fp.div RNE (fp.div RNE (fp.mul RNE (fp.mul RNE x1 x8) (fp.div RNE x2 (fp.sub RNE x0 x7))) (fp.max (fp.min (fp.mul RNE x8 x4) (fp.add RNE x3 x6)) (fp.min (fp.sub RNE x8 x9) (fp.min x6 x3)))) (fp.abs (fp.add RNE (fp.div RNE (fp.div RNE x8 x8) (fp.sub RNE x9 x3)) (fp.div RNE (fp.sub RNE x6 x6) (fp.mul RNE x2 x6))))) (fp.div RNE (fp.neg (fp.div RNE (fp.sub RNE x1 x4) (fp.roundToIntegral RNE x0))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE (fp.div RNE x4 x5) (fp.mul RNE x7 x0)) (fp.sub RNE (fp.div RNE x3 x1) (fp.roundToIntegral RNE x3))))))))(check-sat)