;  time  = {'mathsat': 600, 'z3': 551.945}
;  terms = 83
;  score = -48.05499999999995
;  stdout= {'mathsat': '', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.div RNE (fp.abs (fp.min (fp.div RNE x9 x3) (fp.roundToIntegral RNE x8))) (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.max x6 x7) (fp.add RNE x6 x3)) (fp.min (fp.sub RNE x3 x1) (fp.abs x7))) (fp.min (fp.div RNE (fp.abs x5) (fp.min x4 x1)) (fp.roundToIntegral RNE (fp.neg x9))))) (fp.sqrt RNE (fp.sqrt RNE (fp.sqrt RNE (fp.div RNE x1 x5))))) (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE (fp.neg (fp.max x2 x5))) (fp.max (fp.div RNE (fp.div RNE x6 x9) (fp.add RNE x2 x0)) (fp.sub RNE (fp.div RNE x3 (fp.max x0 x2)) (fp.neg x9)))) (fp.div RNE (fp.roundToIntegral RNE (fp.neg (fp.sub RNE x3 x7))) (fp.add RNE (fp.sub RNE (fp.sqrt RNE x8) (fp.add RNE x4 x8)) (fp.min (fp.div RNE x0 x3) (fp.roundToIntegral RNE x9)))))))(check-sat)