;  time  = {'z3': 600, 'mathsat': 43.16860628128052}
;  terms = 64
;  score = 556.8313937187195
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.mul RNE (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x2 (fp.abs x2)) (fp.div RNE x8 (fp.sub RNE x3 x8))) (fp.roundToIntegral RNE (fp.div RNE x7 x9))) (fp.sqrt RNE (fp.div RNE (fp.div RNE x3 (fp.div RNE x2 x1)) (fp.add RNE x9 x9)))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE (fp.min x5 x5) (fp.div RNE (fp.sub RNE x5 x6) (fp.mul RNE x5 x3)))) (fp.mul RNE (fp.min (fp.mul RNE (fp.max x2 x7) (fp.neg x1)) (fp.sqrt RNE (fp.roundToIntegral RNE x9))) (fp.mul RNE (fp.sub RNE (fp.neg x4) (fp.roundToIntegral RNE x0)) (fp.min (fp.sqrt RNE x2) (fp.min x2 x3))))))))(check-sat)