;  time  = {'z3': 600, 'mathsat': 34.360443115234375}
;  terms = 99
;  score = 565.6395568847656
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.div RNE (fp.min (fp.div RNE (fp.sqrt RNE x7) (fp.sub RNE (fp.neg x7) (fp.div RNE x0 x3))) (fp.sqrt RNE (fp.div RNE x2 x6))) (fp.div RNE (fp.max (fp.sqrt RNE (fp.min x6 x2)) (fp.roundToIntegral RNE (fp.div RNE x5 x5))) (fp.div RNE (fp.div RNE (fp.mul RNE x5 x6) (fp.sub RNE x6 x5)) (fp.mul RNE (fp.div RNE x2 x1) (fp.div RNE x6 x3))))) (fp.sqrt RNE (fp.mul RNE (fp.neg (fp.add RNE x2 x9)) (fp.mul RNE (fp.abs (fp.add RNE x5 x1)) (fp.mul RNE (fp.sub RNE x3 x3) (fp.mul RNE x7 x7)))))) (fp.sqrt RNE (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.abs x5) (fp.neg (fp.add RNE x4 x5))) (fp.min (fp.sqrt RNE x5) (fp.div RNE x9 x8))) (fp.mul RNE (fp.mul RNE (fp.min (fp.mul RNE x8 x7) (fp.max x4 x8)) (fp.abs (fp.div RNE x6 x5))) (fp.max (fp.max (fp.mul RNE x2 x8) (fp.roundToIntegral RNE x2)) (fp.neg (fp.roundToIntegral RNE x8))))))))(check-sat)