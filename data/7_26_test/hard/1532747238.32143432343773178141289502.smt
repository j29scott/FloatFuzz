;  time  = {'mathsat': 48.12165427207947, 'z3': 600}
;  terms = 168
;  score = 551.8783457279205
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.sub RNE (fp.add RNE (fp.div RNE x5 x5) (fp.add RNE (fp.abs x0) (fp.div RNE x0 x5))) (fp.sub RNE (fp.roundToIntegral RNE x4) (fp.add RNE (fp.neg x7) (fp.neg x2)))) (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.max x4 x0) (fp.roundToIntegral RNE x1)) (fp.sqrt RNE (fp.sqrt RNE x9))) (fp.min (fp.sub RNE (fp.sqrt RNE x3) (fp.div RNE x6 x8)) (fp.min (fp.max x9 x7) (fp.div RNE x7 x5))))) (fp.add RNE (fp.add RNE (fp.div RNE (fp.max (fp.neg x3) (fp.add RNE x5 x6)) (fp.sqrt RNE (fp.abs x9))) (fp.add RNE (fp.add RNE (fp.add RNE x6 x4) (fp.add RNE x0 x7)) (fp.sub RNE (fp.neg x2) (fp.sqrt RNE x5)))) (fp.sub RNE (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE x1)) (fp.max (fp.abs x2) (fp.abs x3))) (fp.div RNE (fp.add RNE (fp.max x6 x3) (fp.add RNE x0 x0)) (fp.max (fp.min x9 x2) (fp.mul RNE x8 x1)))))) (fp.add RNE (fp.add RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.add RNE x3 x0)) (fp.div RNE (fp.sqrt RNE x2) (fp.add RNE x3 x4))) (fp.div RNE (fp.sqrt RNE (fp.abs (fp.sqrt RNE x3))) (fp.min (fp.abs (fp.add RNE x3 x0)) (fp.mul RNE (fp.add RNE x0 x3) (fp.min x3 x2))))) (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.sub RNE x6 x7) (fp.min x3 x5)) (fp.add RNE (fp.mul RNE x7 x2) (fp.div RNE x4 x6))) (fp.add RNE (fp.abs (fp.roundToIntegral RNE x4)) (fp.abs (fp.max x0 x9)))) (fp.sub RNE (fp.neg (fp.sub RNE (fp.add RNE x5 x6) (fp.add RNE x1 x9))) (fp.div RNE (fp.sqrt RNE (fp.sqrt RNE x1)) (fp.sqrt RNE (fp.neg x6))))))))(check-sat)