;  time  = {'z3': 553.433, 'mathsat': 15.296974658966064}
;  terms = 109
;  score = 538.1360253410339
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.min (fp.sqrt RNE (fp.div RNE (fp.sqrt RNE (fp.div RNE x1 (fp.min x7 x2))) (fp.div RNE (fp.max (fp.sqrt RNE x3) (fp.div RNE x2 x9)) (fp.div RNE (fp.abs x6) (fp.min x9 x2))))) (fp.sub RNE (fp.add RNE (fp.min (fp.mul RNE x9 x4) (fp.abs x9)) (fp.sqrt RNE (fp.sub RNE x9 x0))) (fp.sub RNE (fp.div RNE (fp.min x2 x4) (fp.neg x5)) (fp.roundToIntegral RNE (fp.mul RNE (fp.min x1 x0) (fp.neg x8)))))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.neg (fp.div RNE x6 x1))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.div RNE x4 x5) (fp.abs x7)) (fp.div RNE (fp.div RNE x2 x0) (fp.neg x3))) (fp.sqrt RNE (fp.neg (fp.roundToIntegral RNE x7))))) (fp.sub RNE (fp.sub RNE (fp.mul RNE (fp.div RNE x9 x5) (fp.add RNE x7 x3)) (fp.div RNE (fp.add RNE x6 x9) (fp.roundToIntegral RNE x7))) (fp.sub RNE (fp.div RNE (fp.div RNE x0 (fp.max x2 x4)) (fp.sqrt RNE x8)) (fp.max (fp.roundToIntegral RNE (fp.div RNE x2 x3)) (fp.add RNE (fp.sqrt RNE x2) (fp.mul RNE x4 x4))))))))(check-sat)