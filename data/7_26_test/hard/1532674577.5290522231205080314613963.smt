;  time  = {'z3': 600, 'mathsat': 54.617411613464355}
;  terms = 97
;  score = 545.3825883865356
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.sqrt RNE (fp.max x0 x0)) (fp.neg (fp.min x9 x0))) (fp.sqrt RNE (fp.div RNE (fp.div RNE x5 x7) (fp.div RNE x0 x2)))) (fp.add RNE (fp.sub RNE (fp.abs (fp.add RNE x7 x8)) (fp.add RNE (fp.div RNE x5 (fp.abs x6)) (fp.add RNE x3 x9))) (fp.div RNE (fp.div RNE (fp.div RNE x9 (fp.min x2 x2)) (fp.roundToIntegral RNE (fp.sqrt RNE x7))) (fp.sub RNE (fp.sqrt RNE x3) (fp.div RNE x4 x7))))) (fp.add RNE (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE x4 x3)) (fp.div RNE (fp.div RNE x3 x8) (fp.sub RNE (fp.sqrt RNE x9) (fp.add RNE x6 x7)))) (fp.abs (fp.neg (fp.sqrt RNE (fp.abs x6))))) (fp.sub RNE (fp.add RNE (fp.max (fp.div RNE x3 x6) (fp.roundToIntegral RNE x4)) (fp.add RNE (fp.add RNE x2 x1) (fp.sub RNE (fp.div RNE x5 x5) (fp.roundToIntegral RNE x2)))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.div RNE x7 (fp.mul RNE x5 x8))))))))(check-sat)