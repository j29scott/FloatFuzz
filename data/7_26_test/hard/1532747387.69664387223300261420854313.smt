;  time  = {'mathsat': 10.606054544448853, 'z3': 600}
;  terms = 74
;  score = 589.3939454555511
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.mul RNE (fp.neg (fp.min (fp.neg x7) (fp.div RNE x8 (fp.mul RNE x4 x5)))) (fp.mul RNE (fp.div RNE (fp.sub RNE x8 x6) (fp.sqrt RNE x4)) (fp.abs (fp.neg x2)))) (fp.sub RNE (fp.div RNE (fp.add RNE (fp.max (fp.mul RNE x0 x6) (fp.add RNE x6 x4)) (fp.neg (fp.min x8 x8))) (fp.sqrt RNE (fp.div RNE (fp.roundToIntegral RNE x5) (fp.min x9 x2)))) (fp.roundToIntegral RNE (fp.sub RNE (fp.add RNE (fp.sqrt RNE x3) (fp.abs x2)) (fp.div RNE (fp.max x0 x4) (fp.neg x1)))))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE (fp.max (fp.abs x4) (fp.abs x5)) (fp.abs (fp.sub RNE x5 x3))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.div RNE x3 (fp.neg x9))))))))(check-sat)