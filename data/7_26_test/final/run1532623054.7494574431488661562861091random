;  time  = {'z3': 249.764, 'mathsat': 7.7502171993255615}
;  terms = 69
;  score = 242.01378280067445
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.roundToIntegral RNE (fp.div RNE (fp.max (fp.div RNE (fp.add RNE x5 x4) (fp.sub RNE x7 x6)) (fp.sqrt RNE (fp.neg x4))) (fp.div RNE (fp.sqrt RNE (fp.mul RNE (fp.roundToIntegral RNE x3) (fp.div RNE x2 x0))) (fp.max (fp.sub RNE (fp.abs x7) (fp.div RNE x3 x6)) (fp.abs (fp.mul RNE x9 x7)))))) (fp.div RNE (fp.roundToIntegral RNE (fp.max (fp.min (fp.sub RNE x6 x1) (fp.neg x9)) (fp.min (fp.sub RNE x0 x6) (fp.sub RNE x6 x2)))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE (fp.add RNE x8 x2) (fp.sub RNE x5 x6)) (fp.div RNE (fp.neg (fp.min x6 x1)) (fp.min (fp.max x2 x2) (fp.abs x2))))))))(check-sat)