;  time  = {'z3': 286.275, 'mathsat': 21.64636492729187}
;  terms = 75
;  score = 264.6286350727081
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNormal (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.sub RNE x0 x6) (fp.div RNE x9 x3)) (fp.sub RNE (fp.sub RNE x9 x0) (fp.sub RNE x3 x0))) (fp.sub RNE (fp.add RNE (fp.mul RNE x3 x3) (fp.div RNE x6 x8)) (fp.sub RNE (fp.roundToIntegral RNE x2) (fp.div RNE x2 (fp.mul RNE x5 x3))))) (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.abs x3) (fp.sub RNE x1 x7)) (fp.sub RNE (fp.div RNE x6 x4) (fp.neg x7))) (fp.div RNE (fp.min (fp.roundToIntegral RNE x7) (fp.neg x8)) (fp.min (fp.roundToIntegral RNE x3) (fp.abs x3)))) (fp.roundToIntegral RNE (fp.div RNE (fp.sub RNE (fp.add RNE x8 x9) (fp.roundToIntegral RNE x8)) (fp.mul RNE (fp.add RNE x4 x3) (fp.max x7 x5))))))))(check-sat)