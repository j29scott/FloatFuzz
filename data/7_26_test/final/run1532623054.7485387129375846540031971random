;  time  = {'mathsat': 3.6294684410095215, 'z3': 241.936}
;  terms = 81
;  score = 238.30653155899049
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.max (fp.sqrt RNE (fp.roundToIntegral RNE (fp.max (fp.mul RNE x8 x8) (fp.sub RNE x6 x9)))) (fp.sub RNE (fp.div RNE (fp.mul RNE (fp.mul RNE x9 x8) (fp.abs x2)) (fp.sub RNE (fp.sqrt RNE x0) (fp.abs x1))) (fp.roundToIntegral RNE (fp.max (fp.neg (fp.roundToIntegral RNE x7)) (fp.add RNE (fp.min x7 x5) (fp.add RNE x6 x5)))))) (fp.min (fp.div RNE (fp.min (fp.mul RNE (fp.abs x4) (fp.div RNE x6 x9)) (fp.roundToIntegral RNE (fp.abs x5))) (fp.div RNE (fp.sqrt RNE (fp.neg x2)) (fp.sub RNE (fp.min x0 x2) (fp.div RNE x5 (fp.div RNE x8 x5))))) (fp.mul RNE (fp.max (fp.min (fp.sqrt RNE x3) (fp.neg x0)) (fp.abs (fp.div RNE x2 x6))) (fp.max (fp.neg (fp.div RNE x3 x6)) (fp.roundToIntegral RNE (fp.max x0 x8)))))))(check-sat)