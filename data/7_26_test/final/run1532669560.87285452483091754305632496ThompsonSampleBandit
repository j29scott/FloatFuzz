;  time  = {'z3': 276.547, 'mathsat': 204.26464772224426}
;  terms = 86
;  score = 72.28235227775576
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isSubnormal (fp.add RNE (fp.add RNE (fp.add RNE (fp.min (fp.add RNE x7 (fp.sub RNE x2 x5)) (fp.add RNE x1 x9)) (fp.roundToIntegral RNE (fp.abs (fp.sqrt RNE x5)))) (fp.add RNE (fp.mul RNE (fp.neg x2) (fp.add RNE (fp.sqrt RNE x7) (fp.max x3 x7))) (fp.min (fp.add RNE (fp.add RNE x0 x5) (fp.roundToIntegral RNE x7)) (fp.div RNE (fp.div RNE x3 x5) (fp.add RNE x3 x6))))) (fp.sub RNE (fp.add RNE (fp.max (fp.add RNE (fp.abs x2) (fp.abs x3)) (fp.roundToIntegral RNE (fp.add RNE x4 x0))) (fp.roundToIntegral RNE (fp.div RNE (fp.sub RNE x0 x7) (fp.add RNE x1 x3)))) (fp.add RNE (fp.sub RNE (fp.sub RNE (fp.neg x3) (fp.sub RNE x6 x6)) (fp.div RNE (fp.sub RNE x8 x7) (fp.roundToIntegral RNE x1))) (fp.add RNE (fp.mul RNE (fp.mul RNE x5 x2) (fp.min x7 x9)) (fp.roundToIntegral RNE (fp.sqrt RNE x5))))))))(check-sat)