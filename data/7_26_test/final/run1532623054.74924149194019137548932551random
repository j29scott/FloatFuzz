;  time  = {'z3': 292.218, 'mathsat': 8.145694971084595}
;  terms = 78
;  score = 284.0723050289154
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.div RNE (fp.sqrt RNE (fp.mul RNE (fp.neg x6) (fp.min x8 x0))) (fp.neg (fp.add RNE (fp.add RNE x1 x8) (fp.abs x9)))) (fp.sqrt RNE (fp.div RNE (fp.div RNE (fp.sub RNE (fp.neg x2) (fp.add RNE x2 x6)) (fp.div RNE (fp.sub RNE x4 x8) (fp.min x9 x9))) (fp.sqrt RNE (fp.add RNE (fp.add RNE x3 x0) (fp.sqrt RNE x7)))))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.min (fp.min x5 x1) (fp.sqrt RNE x8)) (fp.neg (fp.roundToIntegral RNE x8))) (fp.abs (fp.min (fp.roundToIntegral RNE x3) (fp.max x0 x6)))) (fp.div RNE (fp.mul RNE (fp.add RNE (fp.abs x0) (fp.div RNE x4 x0)) (fp.mul RNE (fp.abs x2) (fp.max x2 x7))) (fp.neg (fp.neg (fp.min x1 x3)))))))(check-sat)