;  time  = {'mathsat': 1.6457295417785645, 'z3': 91.259}
;  terms = 62
;  score = 89.61327045822144
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.max (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.add RNE x4 x4)) (fp.max (fp.mul RNE (fp.abs x9) (fp.mul RNE x4 x5)) (fp.min (fp.div RNE x7 x6) (fp.sub RNE x2 x3)))) (fp.mul RNE (fp.add RNE (fp.sub RNE x6 x1) (fp.add RNE x0 x1)) (fp.div RNE (fp.neg (fp.max x2 x0)) (fp.min (fp.max x2 x7) (fp.add RNE x6 x2))))) (fp.max (fp.max (fp.neg (fp.add RNE x8 x4)) (fp.add RNE (fp.roundToIntegral RNE x8) (fp.mul RNE x6 x8))) (fp.sqrt RNE (fp.min (fp.min x6 x4) (fp.add RNE x9 x6)))))))(check-sat)