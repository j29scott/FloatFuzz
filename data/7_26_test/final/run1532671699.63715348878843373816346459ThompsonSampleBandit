;  time  = {'mathsat': 16.683738708496094, 'z3': 221.808}
;  terms = 93
;  score = 205.1242612915039
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.min (fp.add RNE (fp.sqrt RNE (fp.div RNE x0 x1)) (fp.add RNE (fp.sub RNE x9 x6) (fp.sqrt RNE x9))) (fp.div RNE (fp.min (fp.max x2 x6) (fp.add RNE x1 x3)) (fp.sqrt RNE (fp.roundToIntegral RNE x5)))) (fp.min (fp.abs (fp.sqrt RNE (fp.sqrt RNE x1))) (fp.min (fp.max (fp.mul RNE x4 x9) (fp.max x5 x9)) (fp.add RNE (fp.add RNE x8 x5) (fp.abs x3))))) (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.max (fp.roundToIntegral RNE x2) (fp.roundToIntegral RNE x4)) (fp.mul RNE (fp.div RNE x7 x9) (fp.div RNE x6 x3))) (fp.mul RNE (fp.sqrt RNE (fp.sqrt RNE x4)) (fp.roundToIntegral RNE (fp.max x7 x1)))) (fp.sub RNE (fp.add RNE (fp.add RNE (fp.min x8 x7) (fp.mul RNE x2 x8)) (fp.neg (fp.add RNE x2 x6))) (fp.div RNE (fp.min (fp.sqrt RNE x5) (fp.add RNE x4 x7)) (fp.add RNE (fp.max x0 x9) (fp.sqrt RNE x3)))))))(check-sat)