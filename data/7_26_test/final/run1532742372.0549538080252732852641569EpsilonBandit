;  time  = {'z3': 339.547, 'mathsat': 2.460827350616455}
;  terms = 78
;  score = 337.08617264938357
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.max (fp.mul RNE (fp.sub RNE (fp.neg x3) (fp.min x7 x8)) (fp.neg (fp.mul RNE x1 x2))) (fp.add RNE (fp.div RNE (fp.mul RNE x4 x2) (fp.max x8 x2)) (fp.div RNE (fp.div RNE x8 x1) (fp.max x1 x4)))) (fp.mul RNE (fp.add RNE (fp.add RNE (fp.sub RNE x2 x2) (fp.mul RNE x8 x4)) (fp.roundToIntegral RNE (fp.mul RNE x0 x0))) (fp.mul RNE (fp.sub RNE (fp.mul RNE x3 x1) (fp.min x5 x6)) (fp.add RNE (fp.add RNE x9 x6) (fp.neg x6))))) (fp.neg (fp.add RNE (fp.sqrt RNE (fp.min (fp.max x9 x4) (fp.mul RNE x8 x7))) (fp.max (fp.div RNE (fp.neg x8) (fp.roundToIntegral RNE x0)) (fp.div RNE (fp.sub RNE x3 x9) (fp.sqrt RNE x8)))))))(check-sat)