;  time  = {'mathsat': 13.01954960823059, 'z3': 222.904}
;  terms = 72
;  score = 209.8844503917694
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.mul RNE (fp.neg x8) (fp.neg x9)) (fp.add RNE (fp.min (fp.neg x5) (fp.min x0 x3)) (fp.div RNE (fp.div RNE x2 x8) (fp.sub RNE x3 x6))))) (fp.div RNE (fp.add RNE (fp.abs (fp.min x2 x5)) (fp.div RNE (fp.min (fp.max x9 x3) (fp.div RNE x1 x0)) (fp.add RNE (fp.div RNE x1 x2) (fp.max x0 x1)))) (fp.abs (fp.add RNE (fp.div RNE (fp.mul RNE x7 x0) (fp.mul RNE x0 x5)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x6)))))) (fp.abs (fp.add RNE (fp.abs (fp.add RNE (fp.abs x9) (fp.neg x0))) (fp.sqrt RNE (fp.div RNE (fp.min x2 x6) (fp.max x2 x6)))))))(check-sat)