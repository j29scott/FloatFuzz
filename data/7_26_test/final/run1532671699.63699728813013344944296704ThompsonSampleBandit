;  time  = {'mathsat': 4.703599691390991, 'z3': 323.308}
;  terms = 82
;  score = 318.604400308609
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.add RNE (fp.add RNE (fp.add RNE (fp.add RNE (fp.mul RNE x3 x6) (fp.add RNE (fp.add RNE x4 x1) (fp.mul RNE x5 x2))) (fp.add RNE (fp.sqrt RNE x0) (fp.sqrt RNE x7))) (fp.mul RNE (fp.min (fp.max (fp.div RNE x2 x7) (fp.mul RNE x9 x9)) (fp.mul RNE (fp.div RNE x1 x5) (fp.sqrt RNE x7))) (fp.max (fp.div RNE (fp.div RNE x0 x7) (fp.min x0 x3)) (fp.sqrt RNE (fp.max x2 x5))))) (fp.div RNE (fp.add RNE (fp.max (fp.mul RNE x7 (fp.sqrt RNE x7)) (fp.sub RNE x0 x8)) (fp.sqrt RNE (fp.div RNE (fp.mul RNE x5 x6) (fp.sqrt RNE x9)))) (fp.add RNE (fp.sqrt RNE (fp.add RNE x8 (fp.max x3 x2))) (fp.mul RNE (fp.mul RNE x5 x0) (fp.mul RNE (fp.sub RNE x3 x0) (fp.sub RNE x5 x1))))))))(check-sat)