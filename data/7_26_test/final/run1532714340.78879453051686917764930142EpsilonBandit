;  time  = {'z3': 238.332, 'mathsat': 37.8847336769104}
;  terms = 87
;  score = 200.4472663230896
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.min (fp.roundToIntegral RNE (fp.sqrt RNE (fp.add RNE x0 x1))) (fp.mul RNE (fp.min (fp.sub RNE x5 x3) (fp.mul RNE x9 x4)) (fp.max (fp.max x4 x5) (fp.min x4 x0)))) (fp.mul RNE (fp.div RNE (fp.abs (fp.abs x1)) (fp.abs (fp.min x3 x2))) (fp.min (fp.mul RNE (fp.neg x9) (fp.neg x9)) (fp.sqrt RNE (fp.roundToIntegral RNE x7))))) (fp.max (fp.max (fp.max (fp.sqrt RNE (fp.max x0 x7)) (fp.div RNE (fp.neg x9) (fp.sqrt RNE x1))) (fp.add RNE (fp.max (fp.div RNE x9 x9) (fp.min x8 x5)) (fp.min (fp.roundToIntegral RNE x1) (fp.mul RNE x9 x2)))) (fp.min (fp.div RNE (fp.div RNE (fp.add RNE x5 x6) (fp.min x3 x1)) (fp.sqrt RNE (fp.sub RNE x6 x8))) (fp.roundToIntegral RNE (fp.mul RNE (fp.add RNE x5 x6) (fp.neg x2)))))))(check-sat)