;  time  = {'mathsat': 7.547918081283569, 'z3': 503.124}
;  terms = 54
;  score = 495.57608191871645
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.div RNE (fp.div RNE (fp.abs (fp.div RNE (fp.div RNE x6 x8) (fp.div RNE (fp.sqrt RNE x7) (fp.sub RNE x5 x1)))) (fp.sub RNE (fp.sub RNE (fp.mul RNE (fp.mul RNE x2 x7) (fp.div RNE x8 x3)) (fp.abs (fp.div RNE x2 x3))) (fp.div RNE (fp.div RNE (fp.div RNE x6 x4) (fp.abs x2)) (fp.div RNE (fp.div RNE x7 x5) (fp.min x0 x6))))) (fp.neg (fp.div RNE (fp.neg (fp.min (fp.roundToIntegral RNE x0) (fp.div RNE x6 x9))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x2))))))))(check-sat)