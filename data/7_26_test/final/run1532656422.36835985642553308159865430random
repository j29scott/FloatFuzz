;  time  = {'z3': 443.861, 'mathsat': 6.987698554992676}
;  terms = 60
;  score = 436.8733014450073
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.neg (fp.div RNE (fp.max (fp.sqrt RNE x8) (fp.mul RNE x3 x9)) (fp.min (fp.sub RNE (fp.add RNE x7 x6) (fp.min x0 x8)) (fp.roundToIntegral RNE (fp.min x5 x9))))) (fp.sub RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.div RNE x2 x9))) (fp.abs (fp.neg (fp.sqrt RNE x3))))) (fp.abs (fp.max (fp.div RNE (fp.max (fp.div RNE x9 x5) (fp.div RNE x1 x6)) (fp.sqrt RNE (fp.mul RNE (fp.div RNE x1 x8) (fp.neg x4)))) (fp.sub RNE (fp.add RNE (fp.add RNE x5 x3) (fp.min x9 x8)) (fp.neg (fp.neg x5)))))))(check-sat)