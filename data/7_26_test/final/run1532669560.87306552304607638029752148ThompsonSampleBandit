;  time  = {'z3': 366.435, 'mathsat': 41.632049798965454}
;  terms = 78
;  score = 324.80295020103455
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.add RNE (fp.div RNE (fp.sub RNE (fp.sub RNE (fp.abs x3) (fp.sub RNE x4 x9)) (fp.mul RNE (fp.sub RNE (fp.abs x0) (fp.mul RNE x4 x3)) (fp.add RNE (fp.min x5 x9) (fp.add RNE x9 x8)))) (fp.div RNE (fp.sub RNE (fp.mul RNE x3 (fp.max x9 x5)) (fp.roundToIntegral RNE (fp.neg x6))) (fp.abs (fp.add RNE x1 x7)))) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.add RNE x0 x1) (fp.sub RNE x8 x3)) (fp.sub RNE (fp.mul RNE x7 x1) (fp.mul RNE x8 x2))) (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.mul RNE x7 x0) (fp.roundToIntegral RNE x5)) (fp.mul RNE (fp.sub RNE x2 x7) (fp.sub RNE x2 x4))) (fp.mul RNE (fp.neg (fp.mul RNE x4 x0)) (fp.roundToIntegral RNE (fp.sub RNE x7 x0))))))))(check-sat)