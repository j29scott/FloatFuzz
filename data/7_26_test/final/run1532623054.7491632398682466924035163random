;  time  = {'z3': 253.876, 'mathsat': 3.8079519271850586}
;  terms = 97
;  score = 250.06804807281495
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.sub RNE (fp.sub RNE x5 x6) (fp.neg x6)) (fp.add RNE (fp.min x9 x6) (fp.abs x5))) (fp.sub RNE (fp.neg (fp.max x7 x7)) (fp.neg (fp.mul RNE x9 x8)))) (fp.neg (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.sqrt RNE x8) (fp.div RNE x4 x9)) (fp.sub RNE (fp.sub RNE x3 x4) (fp.roundToIntegral RNE x7))) (fp.add RNE (fp.mul RNE (fp.div RNE x1 x8) (fp.min x7 x4)) (fp.roundToIntegral RNE (fp.mul RNE x0 x8)))))) (fp.add RNE (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.div RNE x2 x8)) (fp.add RNE (fp.sub RNE x4 x1) (fp.roundToIntegral RNE x2))) (fp.add RNE (fp.min (fp.sqrt RNE x4) (fp.sqrt RNE x5)) (fp.neg (fp.div RNE x8 x9)))) (fp.mul RNE (fp.min (fp.neg (fp.min x2 x9)) (fp.sqrt RNE (fp.abs x0))) (fp.max (fp.min (fp.mul RNE x7 x5) (fp.sqrt RNE x3)) (fp.div RNE (fp.min x5 x5) (fp.sqrt RNE x0)))))))(check-sat)