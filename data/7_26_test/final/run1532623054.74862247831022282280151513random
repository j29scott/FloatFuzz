;  time  = {'z3': 420.321, 'mathsat': 9.70459771156311}
;  terms = 71
;  score = 410.6164022884369
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.sqrt RNE x0)) (fp.add RNE (fp.neg x0) (fp.min x4 x1))) (fp.div RNE (fp.abs (fp.div RNE x0 x3)) (fp.sqrt RNE (fp.abs x5)))) (fp.sqrt RNE (fp.div RNE (fp.div RNE (fp.abs x2) (fp.roundToIntegral RNE (fp.neg x9))) (fp.max (fp.roundToIntegral RNE x6) (fp.add RNE x4 x4))))) (fp.sub RNE (fp.neg (fp.roundToIntegral RNE (fp.max (fp.mul RNE x5 x6) (fp.mul RNE x7 x9)))) (fp.div RNE (fp.div RNE (fp.add RNE (fp.abs x4) (fp.max x2 x8)) (fp.sqrt RNE (fp.add RNE x6 x2))) (fp.add RNE (fp.max (fp.min x7 x7) (fp.abs x5)) (fp.div RNE (fp.sub RNE x0 x1) (fp.max x8 x2)))))))(check-sat)