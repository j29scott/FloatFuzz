;  time  = {'mathsat': 5.858222246170044, 'z3': 175.378}
;  terms = 88
;  score = 169.51977775382994
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.sqrt RNE (fp.mul RNE (fp.div RNE (fp.mul RNE x9 x9) (fp.mul RNE x4 x2)) (fp.max (fp.max x0 x6) (fp.neg x5)))) (fp.div RNE (fp.add RNE (fp.sqrt RNE (fp.max (fp.max x9 x5) (fp.min x9 x6))) (fp.roundToIntegral RNE (fp.abs (fp.sqrt RNE x4)))) (fp.min (fp.sub RNE (fp.neg (fp.add RNE x0 x7)) (fp.sub RNE (fp.mul RNE x3 x0) (fp.max x2 x0))) (fp.div RNE (fp.roundToIntegral RNE (fp.neg x5)) (fp.sub RNE (fp.sub RNE x7 x7) (fp.min x0 x3)))))) (fp.min (fp.abs (fp.roundToIntegral RNE (fp.sqrt RNE (fp.max x8 x5)))) (fp.add RNE (fp.neg (fp.div RNE (fp.sqrt RNE (fp.neg x4)) (fp.roundToIntegral RNE (fp.mul RNE x9 x8)))) (fp.div RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.roundToIntegral RNE x3) (fp.sub RNE x6 x9))) (fp.min (fp.abs (fp.sub RNE x0 x3)) (fp.sqrt RNE (fp.roundToIntegral RNE x5))))))))(check-sat)