;  time  = {'z3': 310.681, 'mathsat': 3.515320301055908}
;  terms = 115
;  score = 307.1656796989441
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.min (fp.add RNE (fp.neg x7) (fp.max x4 x3)) (fp.neg (fp.roundToIntegral RNE x0))) (fp.add RNE (fp.mul RNE (fp.add RNE x8 x2) (fp.min x9 x5)) (fp.div RNE (fp.sqrt RNE (fp.abs x1)) (fp.sub RNE (fp.add RNE x8 x3) (fp.add RNE x3 x9))))) (fp.add RNE (fp.neg (fp.mul RNE (fp.sub RNE x8 x7) (fp.add RNE x3 x8))) (fp.max (fp.mul RNE (fp.add RNE (fp.add RNE x0 x6) (fp.max x4 x9)) (fp.add RNE (fp.sub RNE x8 x3) (fp.mul RNE x2 x6))) (fp.neg (fp.mul RNE (fp.max x7 x7) (fp.sqrt RNE x4)))))) (fp.min (fp.div RNE (fp.sub RNE (fp.add RNE (fp.mul RNE x0 x9) (fp.add RNE x5 (fp.abs x8))) (fp.add RNE (fp.mul RNE x9 x2) (fp.add RNE x3 (fp.max x6 x5)))) (fp.neg (fp.mul RNE (fp.neg x5) (fp.add RNE x7 x1)))) (fp.sub RNE (fp.add RNE (fp.neg (fp.neg x0)) (fp.add RNE (fp.add RNE x6 x9) (fp.max x2 x1))) (fp.sqrt RNE (fp.add RNE (fp.div RNE x0 x7) (fp.mul RNE (fp.max x0 x5) (fp.max x8 x4))))))))(check-sat)