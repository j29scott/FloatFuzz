;  time  = {'mathsat': 16.716352224349976, 'z3': 409.708}
;  terms = 68
;  score = 392.99164777565005
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE x0 x7) (fp.roundToIntegral RNE x7)) (fp.div RNE (fp.roundToIntegral RNE x8) (fp.roundToIntegral RNE (fp.neg x4)))) (fp.div RNE (fp.neg (fp.div RNE (fp.div RNE x4 x7) (fp.roundToIntegral RNE x2))) (fp.sub RNE (fp.roundToIntegral RNE (fp.mul RNE x8 x4)) (fp.mul RNE (fp.mul RNE x1 x5) (fp.div RNE x4 x0))))) (fp.mul RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.sqrt RNE x2)) (fp.mul RNE (fp.div RNE x1 (fp.sqrt RNE x2)) (fp.max x9 x5))) (fp.mul RNE (fp.mul RNE (fp.abs x3) (fp.div RNE (fp.mul RNE x0 x0) (fp.div RNE x3 x5))) (fp.sub RNE (fp.max x9 x8) (fp.mul RNE x5 (fp.roundToIntegral RNE x6))))))))(check-sat)