;  time  = {'mathsat': 3.638869285583496, 'z3': 414.442}
;  terms = 87
;  score = 410.8031307144165
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.roundToIntegral RNE (fp.min (fp.min (fp.add RNE x1 x1) (fp.div RNE x6 (fp.abs x9))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x1)))) (fp.min (fp.max (fp.sub RNE (fp.sqrt RNE (fp.sub RNE x7 x9)) (fp.div RNE (fp.sub RNE x3 x0) (fp.min x7 x9))) (fp.mul RNE (fp.min (fp.sub RNE x7 x4) (fp.roundToIntegral RNE x7)) (fp.neg (fp.div RNE x2 x4)))) (fp.div RNE (fp.add RNE (fp.add RNE (fp.abs x7) (fp.sqrt RNE x4)) (fp.neg (fp.sqrt RNE x5))) (fp.roundToIntegral RNE (fp.div RNE (fp.sqrt RNE x2) (fp.roundToIntegral RNE x8)))))) (fp.add RNE (fp.abs (fp.sub RNE (fp.add RNE (fp.div RNE x9 x6) (fp.mul RNE x9 (fp.sqrt RNE x4))) (fp.add RNE (fp.div RNE x7 x1) (fp.sub RNE x4 x2)))) (fp.neg (fp.div RNE (fp.sqrt RNE (fp.mul RNE x0 x1)) (fp.sub RNE (fp.sub RNE x4 x4) (fp.min x1 x5)))))))(check-sat)