;  time  = {'mathsat': 8.437499284744263, 'z3': 600}
;  terms = 110
;  score = 591.5625007152557
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.max x5 x0) (fp.abs x3)) (fp.max (fp.max x5 (fp.div RNE x8 x4)) (fp.abs x2))) (fp.add RNE (fp.add RNE (fp.add RNE x9 x3) (fp.add RNE (fp.sqrt RNE x9) (fp.max x8 x3))) (fp.max (fp.roundToIntegral RNE x1) (fp.mul RNE x1 x6)))) (fp.sqrt RNE (fp.sub RNE (fp.max (fp.neg x4) (fp.sqrt RNE (fp.div RNE x7 x1))) (fp.div RNE (fp.add RNE x6 (fp.add RNE x5 x8)) (fp.add RNE x4 x8))))) (fp.max (fp.add RNE (fp.max (fp.mul RNE (fp.div RNE x0 x7) (fp.sqrt RNE x9)) (fp.max (fp.max x4 x6) (fp.min x2 x6))) (fp.abs (fp.neg (fp.max x0 (fp.min x8 x3))))) (fp.div RNE (fp.div RNE (fp.add RNE (fp.add RNE x7 x3) (fp.abs x1)) (fp.max (fp.add RNE x9 x0) (fp.max (fp.sqrt RNE x1) (fp.neg x4)))) (fp.div RNE (fp.add RNE (fp.mul RNE x8 x8) (fp.add RNE x0 (fp.add RNE x2 x5))) (fp.div RNE (fp.sub RNE x3 x6) (fp.add RNE x0 x9)))))))(check-sat)