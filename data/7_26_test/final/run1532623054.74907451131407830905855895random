;  time  = {'z3': 346.543, 'mathsat': 2.645463705062866}
;  terms = 64
;  score = 343.89753629493714
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.abs (fp.abs (fp.div RNE (fp.neg (fp.min x8 x7)) (fp.roundToIntegral RNE (fp.sub RNE x9 x0))))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.sqrt RNE (fp.sub RNE x2 (fp.sub RNE x3 x2))) (fp.add RNE (fp.add RNE x6 x6) (fp.sqrt RNE x2))) (fp.max (fp.add RNE (fp.div RNE x2 x0) (fp.sub RNE x9 x4)) (fp.sqrt RNE (fp.sub RNE x0 x5)))) (fp.div RNE (fp.add RNE (fp.sqrt RNE (fp.sub RNE x0 x5)) (fp.max (fp.sub RNE x4 x8) (fp.sqrt RNE x1))) (fp.div RNE (fp.min (fp.roundToIntegral RNE x7) (fp.mul RNE x6 x9)) (fp.sqrt RNE (fp.sub RNE (fp.roundToIntegral RNE x8) (fp.neg x2))))))))(check-sat)