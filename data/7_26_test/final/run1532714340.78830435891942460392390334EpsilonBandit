;  time  = {'mathsat': 2.9624886512756348, 'z3': 177.991}
;  terms = 99
;  score = 175.02851134872438
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.add RNE (fp.add RNE (fp.max (fp.add RNE x5 x3) (fp.neg x3)) (fp.add RNE (fp.max x0 x9) (fp.sub RNE x0 x1))) (fp.abs (fp.add RNE (fp.add RNE x1 x5) (fp.add RNE (fp.roundToIntegral RNE x5) (fp.add RNE x2 x2))))) (fp.sqrt RNE (fp.sub RNE (fp.add RNE (fp.div RNE x1 x0) (fp.div RNE x2 x0)) (fp.sqrt RNE (fp.abs x6))))) (fp.min (fp.add RNE (fp.abs (fp.add RNE (fp.add RNE x4 (fp.sqrt RNE x2)) (fp.add RNE (fp.add RNE x1 x3) (fp.roundToIntegral RNE x9)))) (fp.max (fp.mul RNE (fp.neg (fp.roundToIntegral RNE x1)) (fp.add RNE (fp.sqrt RNE x2) (fp.sub RNE x5 x6))) (fp.mul RNE (fp.roundToIntegral RNE (fp.neg x3)) (fp.div RNE (fp.abs x6) (fp.add RNE x7 x9))))) (fp.add RNE (fp.abs (fp.max (fp.max x1 x8) (fp.add RNE x1 (fp.add RNE x3 x7)))) (fp.add RNE (fp.add RNE (fp.neg x7) (fp.abs (fp.div RNE x9 x7))) (fp.div RNE (fp.abs x1) (fp.neg x4)))))))(check-sat)