;  time  = {'z3': 581.726, 'mathsat': 32.31971883773804}
;  terms = 99
;  score = 549.406281162262
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.add RNE (fp.div RNE (fp.sub RNE (fp.neg x0) (fp.mul RNE x2 x7)) (fp.min (fp.add RNE x4 x8) (fp.add RNE x0 x0))) (fp.min (fp.sqrt RNE (fp.add RNE x4 (fp.min x3 x3))) (fp.neg (fp.add RNE x2 x7)))) (fp.roundToIntegral RNE (fp.max (fp.roundToIntegral RNE (fp.add RNE x7 x7)) (fp.abs (fp.min x0 x9))))) (fp.min (fp.max (fp.min (fp.add RNE (fp.add RNE x0 x7) (fp.min x4 x3)) (fp.sub RNE (fp.abs x6) (fp.div RNE x3 x1))) (fp.add RNE (fp.add RNE (fp.div RNE x4 x4) (fp.div RNE x2 x5)) (fp.roundToIntegral RNE (fp.div RNE x4 x1)))) (fp.min (fp.add RNE (fp.max (fp.mul RNE x6 x5) (fp.sqrt RNE x9)) (fp.add RNE (fp.add RNE (fp.div RNE x1 x8) (fp.min x1 x3)) (fp.min (fp.neg x1) (fp.mul RNE x4 x9)))) (fp.add RNE (fp.abs (fp.sqrt RNE x0)) (fp.max (fp.sub RNE x8 x9) (fp.mul RNE x1 x6)))))))(check-sat)