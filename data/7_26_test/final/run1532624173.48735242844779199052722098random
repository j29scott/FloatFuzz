;  time  = {'z3': 324.915, 'mathsat': 33.80668830871582}
;  terms = 96
;  score = 291.1083116912842
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sqrt RNE (fp.max (fp.roundToIntegral RNE (fp.add RNE (fp.mul RNE x8 x8) (fp.sqrt RNE x9))) (fp.div RNE (fp.max (fp.div RNE x4 x3) (fp.div RNE (fp.mul RNE x3 x5) (fp.min x7 x8))) (fp.min (fp.mul RNE x6 x3) (fp.max x2 x7))))) (fp.add RNE (fp.sub RNE (fp.div RNE (fp.sqrt RNE (fp.roundToIntegral RNE x0)) (fp.max (fp.neg x1) (fp.sqrt RNE x2))) (fp.max (fp.mul RNE (fp.mul RNE (fp.neg x4) (fp.add RNE x4 x1)) (fp.min (fp.div RNE x9 x4) (fp.abs x7))) (fp.abs (fp.sqrt RNE (fp.max x0 x4))))) (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.sub RNE x5 x4)) (fp.roundToIntegral RNE (fp.mul RNE x2 x5))) (fp.max (fp.max (fp.roundToIntegral RNE x6) (fp.neg x4)) (fp.neg (fp.add RNE x8 x5)))) (fp.mul RNE (fp.abs (fp.sqrt RNE (fp.neg x0))) (fp.max (fp.add RNE (fp.mul RNE x5 x5) (fp.abs x7)) (fp.neg (fp.sub RNE x9 x2))))))))(check-sat)