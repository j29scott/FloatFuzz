;  time  = {'mathsat': 8.68097734451294, 'z3': 178.525}
;  terms = 71
;  score = 169.84402265548707
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.sqrt RNE (fp.div RNE (fp.roundToIntegral RNE (fp.max x2 x3)) (fp.mul RNE (fp.min x0 x1) (fp.sub RNE x3 x5)))) (fp.max (fp.sqrt RNE (fp.sub RNE (fp.min x1 x4) (fp.neg x8))) (fp.min (fp.neg (fp.neg x5)) (fp.mul RNE (fp.sqrt RNE x6) (fp.roundToIntegral RNE x0))))) (fp.min (fp.roundToIntegral RNE (fp.sub RNE (fp.sqrt RNE (fp.max x3 x7)) (fp.add RNE (fp.sqrt RNE x3) (fp.add RNE x3 x3)))) (fp.max (fp.div RNE (fp.min (fp.abs x9) (fp.min x5 x7)) (fp.div RNE (fp.abs x9) (fp.min x5 x9))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE x6) (fp.max x4 x1)) (fp.max (fp.abs x0) (fp.roundToIntegral RNE x0)))))))(check-sat)