;  time  = {'mathsat': 3.456151247024536, 'z3': 286.873}
;  terms = 101
;  score = 283.41684875297545
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.add RNE (fp.neg (fp.neg (fp.abs (fp.roundToIntegral RNE x9)))) (fp.div RNE (fp.mul RNE (fp.neg (fp.sub RNE x6 x9)) (fp.min (fp.mul RNE x5 (fp.neg x0)) (fp.max x4 x1))) (fp.min (fp.add RNE (fp.div RNE (fp.div RNE x8 x5) (fp.neg x8)) (fp.div RNE (fp.min x9 x3) (fp.abs x5))) (fp.sub RNE (fp.sub RNE (fp.sqrt RNE x1) (fp.add RNE x1 x9)) (fp.add RNE (fp.abs x7) (fp.abs x8)))))) (fp.min (fp.sub RNE (fp.neg (fp.min (fp.min x1 x8) (fp.sub RNE x1 x2))) (fp.mul RNE (fp.min (fp.mul RNE x1 x3) (fp.add RNE x3 x5)) (fp.max (fp.div RNE x5 x9) (fp.abs x6)))) (fp.mul RNE (fp.mul RNE (fp.add RNE (fp.neg x1) (fp.sub RNE x8 x6)) (fp.max (fp.min x6 x1) (fp.neg x7))) (fp.div RNE (fp.sub RNE (fp.sub RNE x1 x6) (fp.sub RNE x1 x8)) (fp.max (fp.sqrt RNE (fp.roundToIntegral RNE x1)) (fp.roundToIntegral RNE (fp.div RNE x2 x1))))))))(check-sat)