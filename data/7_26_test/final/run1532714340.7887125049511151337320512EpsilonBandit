;  time  = {'z3': 276.115, 'mathsat': 5.973597764968872}
;  terms = 89
;  score = 270.14140223503114
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sqrt RNE (fp.add RNE (fp.add RNE (fp.mul RNE (fp.mul RNE x5 x8) (fp.add RNE x1 x6)) (fp.roundToIntegral RNE (fp.add RNE x5 x0))) (fp.div RNE (fp.neg (fp.abs x9)) (fp.mul RNE (fp.div RNE x7 x2) (fp.div RNE x7 x1))))) (fp.add RNE (fp.div RNE (fp.sqrt RNE (fp.max (fp.abs x1) (fp.neg x6))) (fp.neg (fp.neg (fp.max x8 x8)))) (fp.add RNE (fp.max (fp.max (fp.add RNE (fp.min x9 x8) (fp.add RNE x4 x6)) (fp.div RNE (fp.sub RNE x0 x7) (fp.roundToIntegral RNE x5))) (fp.roundToIntegral RNE (fp.neg (fp.mul RNE x7 x0)))) (fp.add RNE (fp.mul RNE (fp.add RNE (fp.neg x4) (fp.neg x4)) (fp.max (fp.mul RNE x2 x0) (fp.add RNE x0 x3))) (fp.add RNE (fp.add RNE (fp.sub RNE x1 x2) (fp.add RNE x7 x0)) (fp.add RNE (fp.add RNE x5 x5) (fp.add RNE x5 x4))))))))(check-sat)