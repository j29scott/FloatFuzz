;  time  = {'z3': 204.196, 'mathsat': 4.513187408447266}
;  terms = 74
;  score = 199.68281259155273
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.sqrt RNE (fp.add RNE x9 (fp.add RNE x6 x8))) (fp.add RNE (fp.sqrt RNE x2) (fp.mul RNE (fp.neg x0) (fp.neg x0)))) (fp.add RNE (fp.mul RNE (fp.div RNE x7 x7) (fp.max x3 x4)) (fp.add RNE (fp.add RNE x0 (fp.add RNE x8 x4)) (fp.div RNE x7 x2)))) (fp.add RNE (fp.add RNE (fp.add RNE (fp.add RNE x5 x0) (fp.add RNE (fp.div RNE x1 x1) (fp.abs x4))) (fp.add RNE (fp.div RNE x6 x7) (fp.abs (fp.mul RNE x8 x5)))) (fp.max (fp.add RNE (fp.abs (fp.roundToIntegral RNE x8)) (fp.sqrt RNE (fp.sqrt RNE x1))) (fp.sub RNE (fp.max (fp.sub RNE x7 x2) (fp.min x4 x1)) (fp.neg (fp.abs x0))))))))(check-sat)