;  time  = {'mathsat': 3.2417213916778564, 'z3': 488.876}
;  terms = 107
;  score = 485.6342786083221
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.neg (fp.mul RNE (fp.neg (fp.div RNE x0 x2)) (fp.mul RNE (fp.sqrt RNE x0) (fp.add RNE x0 x6)))) (fp.sub RNE (fp.add RNE (fp.sqrt RNE (fp.add RNE (fp.abs x5) (fp.abs x6))) (fp.min (fp.min (fp.roundToIntegral RNE x9) (fp.add RNE x4 x6)) (fp.add RNE (fp.min x5 x4) (fp.neg x2)))) (fp.max (fp.abs (fp.roundToIntegral RNE (fp.add RNE x3 x0))) (fp.add RNE (fp.mul RNE (fp.add RNE x0 x5) (fp.div RNE x3 x1)) (fp.roundToIntegral RNE (fp.add RNE x9 x7)))))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.sqrt RNE (fp.sub RNE x2 x6)) (fp.add RNE (fp.add RNE x0 (fp.mul RNE x8 x5)) (fp.mul RNE x4 x4))) (fp.add RNE (fp.mul RNE (fp.div RNE x7 x1) (fp.neg x7)) (fp.min (fp.add RNE x1 x5) (fp.add RNE x7 x2)))) (fp.add RNE (fp.max (fp.mul RNE (fp.add RNE x3 (fp.sqrt RNE x8)) (fp.abs x0)) (fp.max (fp.roundToIntegral RNE x4) (fp.sqrt RNE x6))) (fp.abs (fp.add RNE (fp.max x1 x7) (fp.add RNE x8 (fp.max x6 x0))))))))(check-sat)