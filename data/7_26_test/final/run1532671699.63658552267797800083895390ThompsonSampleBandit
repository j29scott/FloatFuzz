;  time  = {'mathsat': 30.484665632247925, 'z3': 468.181}
;  terms = 69
;  score = 437.69633436775206
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.div RNE (fp.max (fp.mul RNE x8 x8) (fp.roundToIntegral RNE x3)) (fp.sqrt RNE (fp.max x5 x6))) (fp.sqrt RNE (fp.abs (fp.sqrt RNE x3)))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE x7) (fp.sqrt RNE x7)) (fp.div RNE (fp.sqrt RNE (fp.min x7 x5)) (fp.sub RNE (fp.roundToIntegral RNE x1) (fp.max x5 x5)))) (fp.min (fp.abs (fp.add RNE x9 x8)) (fp.max (fp.sub RNE x0 x8) (fp.roundToIntegral RNE x0))))) (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE (fp.neg (fp.div RNE x5 (fp.mul RNE x9 x1))) (fp.mul RNE (fp.mul RNE x2 x2) (fp.mul RNE x6 x6)))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.neg (fp.sqrt RNE (fp.sqrt RNE x3))))))))(check-sat)