;  time  = {'z3': 180.482, 'mathsat': 4.033218860626221}
;  terms = 73
;  score = 176.44878113937378
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.min (fp.div RNE x6 x2) (fp.neg x0)) (fp.min (fp.add RNE x1 x4) (fp.mul RNE x7 x0))) (fp.max (fp.div RNE (fp.neg x2) (fp.min x3 x5)) (fp.min (fp.add RNE x1 x1) (fp.roundToIntegral RNE x2)))) (fp.mul RNE (fp.sub RNE (fp.max (fp.min x8 x2) (fp.div RNE x9 x0)) (fp.max (fp.sqrt RNE x3) (fp.sqrt RNE x8))) (fp.add RNE (fp.abs (fp.abs (fp.mul RNE x5 x6))) (fp.mul RNE (fp.abs (fp.div RNE x1 x6)) (fp.max (fp.min x4 x9) (fp.add RNE x8 x4)))))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.sqrt RNE (fp.neg x7)) (fp.max (fp.abs x8) (fp.sqrt RNE x8)))))))(check-sat)