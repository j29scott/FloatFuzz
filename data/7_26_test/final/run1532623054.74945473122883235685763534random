;  time  = {'mathsat': 3.063129186630249, 'z3': 218.491}
;  terms = 68
;  score = 215.42787081336976
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.neg (fp.min (fp.min (fp.min x5 x9) (fp.div RNE x9 x3)) (fp.neg (fp.max (fp.div RNE x7 x5) (fp.roundToIntegral RNE x2))))) (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE (fp.abs x9) (fp.div RNE x1 x6)) (fp.sqrt RNE (fp.max x8 x9))))) (fp.abs (fp.div RNE (fp.min (fp.roundToIntegral RNE (fp.mul RNE x7 x0)) (fp.add RNE (fp.sub RNE (fp.roundToIntegral RNE x9) (fp.sqrt RNE x8)) (fp.add RNE (fp.abs x1) (fp.sub RNE x2 x5)))) (fp.div RNE (fp.min (fp.neg (fp.div RNE x1 x5)) (fp.div RNE (fp.sqrt RNE x0) (fp.add RNE x1 x7))) (fp.mul RNE (fp.neg (fp.neg x2)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x5))))))))(check-sat)