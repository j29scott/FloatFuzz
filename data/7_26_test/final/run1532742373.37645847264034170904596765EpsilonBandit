;  time  = {'z3': 213.484, 'mathsat': 2.2376112937927246}
;  terms = 87
;  score = 211.24638870620728
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE x7 (fp.mul RNE x1 x3))) (fp.neg (fp.max x1 x3))) (fp.roundToIntegral RNE (fp.add RNE (fp.roundToIntegral RNE x3) (fp.max x5 x5)))) (fp.abs (fp.sub RNE (fp.min (fp.sqrt RNE x7) (fp.div RNE x3 x4)) (fp.mul RNE (fp.add RNE x0 x5) (fp.add RNE x1 x9))))) (fp.add RNE (fp.add RNE (fp.min (fp.sqrt RNE (fp.max x4 x7)) (fp.add RNE (fp.min x5 x0) (fp.add RNE x8 x5))) (fp.sub RNE (fp.add RNE (fp.add RNE x7 x2) (fp.abs x4)) (fp.add RNE (fp.max x9 x1) (fp.abs x1)))) (fp.min (fp.div RNE (fp.abs (fp.mul RNE x4 x4)) (fp.max (fp.add RNE x4 x6) (fp.roundToIntegral RNE x6))) (fp.add RNE (fp.sub RNE (fp.min x4 x6) (fp.neg x5)) (fp.div RNE (fp.sqrt RNE x5) (fp.neg x3)))))))(check-sat)