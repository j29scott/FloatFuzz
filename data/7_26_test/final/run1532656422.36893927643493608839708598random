;  time  = {'z3': 282.667, 'mathsat': 3.269568681716919}
;  terms = 77
;  score = 279.39743131828305
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sqrt RNE (fp.sub RNE (fp.min (fp.div RNE (fp.sub RNE x4 x5) (fp.min x0 x8)) (fp.roundToIntegral RNE (fp.max x6 x6))) (fp.div RNE (fp.max (fp.mul RNE x0 x1) (fp.div RNE x2 x8)) (fp.neg (fp.sub RNE x7 x1))))) (fp.min (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.neg x9)) (fp.add RNE (fp.div RNE x8 x6) (fp.max (fp.abs x8) (fp.sub RNE x2 x9)))) (fp.min (fp.add RNE (fp.div RNE x8 x4) (fp.sqrt RNE x2)) (fp.neg (fp.add RNE x6 x8)))) (fp.div RNE (fp.mul RNE (fp.div RNE (fp.add RNE x9 x6) (fp.div RNE x9 x3)) (fp.max (fp.abs x0) (fp.sub RNE x0 x8))) (fp.max (fp.neg (fp.sub RNE x0 x0)) (fp.sqrt RNE (fp.neg x2)))))))(check-sat)