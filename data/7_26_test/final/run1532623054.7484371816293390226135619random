;  time  = {'z3': 217.641, 'mathsat': 19.449281215667725}
;  terms = 71
;  score = 198.19171878433227
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.min (fp.abs (fp.sub RNE (fp.min (fp.add RNE x7 (fp.div RNE x1 x8)) (fp.mul RNE (fp.sub RNE x6 x5) (fp.neg x4))) (fp.max (fp.sqrt RNE x2) (fp.roundToIntegral RNE x5)))) (fp.add RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sqrt RNE x5))) (fp.abs (fp.neg (fp.neg x6))))) (fp.add RNE (fp.add RNE (fp.neg (fp.roundToIntegral RNE (fp.div RNE x3 x2))) (fp.min (fp.max (fp.add RNE x8 x3) (fp.min x2 x7)) (fp.neg (fp.sqrt RNE x2)))) (fp.mul RNE (fp.add RNE (fp.sqrt RNE (fp.abs x3)) (fp.div RNE (fp.abs x0) (fp.sqrt RNE x0))) (fp.add RNE (fp.min (fp.div RNE x4 x9) (fp.neg x0)) (fp.min (fp.div RNE x1 x7) (fp.roundToIntegral RNE x2)))))))(check-sat)