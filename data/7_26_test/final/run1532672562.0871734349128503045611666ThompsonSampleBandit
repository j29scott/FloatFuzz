;  time  = {'mathsat': 9.10039496421814, 'z3': 388.38}
;  terms = 98
;  score = 379.27960503578186
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.mul RNE (fp.max (fp.div RNE (fp.sub RNE x6 x5) (fp.div RNE x1 x6)) (fp.neg (fp.mul RNE x6 x2))) (fp.add RNE (fp.div RNE (fp.abs x7) (fp.roundToIntegral RNE (fp.max x4 x6))) (fp.div RNE (fp.sub RNE x4 (fp.sub RNE x1 x5)) (fp.div RNE x8 (fp.abs x6))))) (fp.sub RNE (fp.roundToIntegral RNE (fp.sqrt RNE (fp.neg x7))) (fp.abs (fp.mul RNE (fp.min x5 x9) (fp.add RNE x0 x0))))) (fp.min (fp.max (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE x4) (fp.mul RNE x2 (fp.min x0 x0))) (fp.div RNE (fp.div RNE x0 x5) (fp.sub RNE (fp.max x8 x6) (fp.div RNE x3 x9)))) (fp.roundToIntegral RNE (fp.min (fp.div RNE x6 x2) (fp.neg x4)))) (fp.mul RNE (fp.abs (fp.div RNE (fp.div RNE x9 x3) (fp.div RNE x8 (fp.add RNE x5 x1)))) (fp.div RNE (fp.mul RNE (fp.sub RNE x2 x9) (fp.div RNE x2 (fp.sqrt RNE x1))) (fp.neg (fp.sqrt RNE x5)))))))(check-sat)