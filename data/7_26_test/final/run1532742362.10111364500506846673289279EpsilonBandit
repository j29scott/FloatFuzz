;  time  = {'mathsat': 3.9750959873199463, 'z3': 316.22}
;  terms = 109
;  score = 312.2449040126801
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.max (fp.max (fp.min (fp.neg x3) (fp.add RNE x8 (fp.neg x1))) (fp.abs (fp.max x6 x3))) (fp.abs (fp.max (fp.abs x5) (fp.div RNE x7 x7)))) (fp.max (fp.min (fp.neg (fp.div RNE x5 x6)) (fp.max (fp.add RNE x9 (fp.min x3 x2)) (fp.sqrt RNE x2))) (fp.div RNE (fp.sqrt RNE (fp.add RNE x8 x5)) (fp.min (fp.roundToIntegral RNE x9) (fp.div RNE x2 x2))))) (fp.add RNE (fp.add RNE (fp.add RNE (fp.div RNE (fp.add RNE x6 x3) (fp.add RNE x8 x6)) (fp.mul RNE (fp.add RNE x1 x3) (fp.mul RNE x2 x7))) (fp.mul RNE (fp.add RNE (fp.add RNE (fp.div RNE x3 x4) (fp.mul RNE x8 x6)) (fp.sub RNE (fp.add RNE x3 x3) (fp.sqrt RNE x6))) (fp.neg (fp.sub RNE (fp.neg x8) (fp.neg x8))))) (fp.min (fp.abs (fp.min (fp.sqrt RNE x8) (fp.add RNE x8 (fp.max x0 x5)))) (fp.min (fp.mul RNE (fp.div RNE x9 x2) (fp.max x4 x2)) (fp.add RNE (fp.sqrt RNE x4) (fp.mul RNE x8 x3)))))))(check-sat)