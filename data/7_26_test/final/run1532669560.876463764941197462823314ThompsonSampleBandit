;  time  = {'z3': 432.955, 'mathsat': 3.0448737144470215}
;  terms = 122
;  score = 429.91012628555296
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.add RNE (fp.neg (fp.sqrt RNE (fp.mul RNE x5 x6))) (fp.sub RNE (fp.add RNE (fp.sub RNE (fp.add RNE x0 x7) (fp.sqrt RNE x5)) (fp.add RNE (fp.sqrt RNE x4) (fp.sqrt RNE x1))) (fp.max (fp.mul RNE (fp.div RNE x1 x0) (fp.div RNE x8 x8)) (fp.add RNE (fp.sqrt RNE x6) (fp.add RNE x7 x4))))) (fp.mul RNE (fp.add RNE (fp.sqrt RNE (fp.roundToIntegral RNE x6)) (fp.sub RNE (fp.sub RNE x9 x1) (fp.div RNE x8 x9))) (fp.add RNE (fp.sqrt RNE (fp.sub RNE x0 x3)) (fp.max (fp.abs (fp.abs x6)) (fp.sqrt RNE (fp.mul RNE x9 x4)))))) (fp.div RNE (fp.min (fp.min (fp.max (fp.add RNE x6 x9) (fp.max x2 x8)) (fp.mul RNE (fp.mul RNE x0 x0) (fp.sub RNE x4 x5))) (fp.sub RNE (fp.neg (fp.add RNE x9 x4)) (fp.sub RNE (fp.add RNE x0 x2) (fp.sub RNE (fp.abs x2) (fp.sqrt RNE x1))))) (fp.add RNE (fp.add RNE (fp.sub RNE (fp.sqrt RNE x4) (fp.roundToIntegral RNE x5)) (fp.add RNE (fp.div RNE x4 x6) (fp.mul RNE x4 x6))) (fp.max (fp.neg (fp.add RNE (fp.sqrt RNE x8) (fp.sqrt RNE x5))) (fp.mul RNE (fp.mul RNE (fp.sqrt RNE x5) (fp.add RNE x2 x8)) (fp.sqrt RNE (fp.abs x7))))))))(check-sat)