;  time  = {'z3': 269.203, 'mathsat': 5.3781633377075195}
;  terms = 81
;  score = 263.82483666229246
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.add RNE (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.add RNE x0 x8) (fp.roundToIntegral RNE (fp.mul RNE x0 x1))) (fp.add RNE (fp.mul RNE x7 x9) (fp.mul RNE (fp.add RNE x7 x1) (fp.div RNE x6 x3)))) (fp.add RNE (fp.add RNE (fp.add RNE x4 (fp.add RNE x8 x9)) (fp.add RNE x5 x1)) (fp.div RNE (fp.add RNE x4 x3) (fp.min x5 x8)))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.add RNE x9 (fp.sqrt RNE x1)) (fp.min x2 x7)) (fp.add RNE (fp.min (fp.mul RNE x0 x8) (fp.min x7 x9)) (fp.abs (fp.sqrt RNE x4)))) (fp.add RNE (fp.add RNE (fp.add RNE x5 (fp.roundToIntegral RNE x6)) (fp.sub RNE x8 x3)) (fp.add RNE (fp.abs (fp.add RNE x5 x7)) (fp.add RNE (fp.abs x2) (fp.div RNE x0 x8))))))))(check-sat)