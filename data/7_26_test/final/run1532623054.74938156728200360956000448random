;  time  = {'mathsat': 5.360184907913208, 'z3': 115.564}
;  terms = 62
;  score = 110.20381509208678
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.roundToIntegral RNE (fp.max (fp.neg (fp.min (fp.add RNE x3 x7) (fp.roundToIntegral RNE (fp.sub RNE x6 x0)))) (fp.add RNE (fp.roundToIntegral RNE (fp.mul RNE x4 x8)) (fp.roundToIntegral RNE (fp.div RNE (fp.max x3 x4) (fp.roundToIntegral RNE x5)))))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.sqrt RNE x7) (fp.neg x8)) (fp.abs (fp.sub RNE x3 (fp.abs x9)))) (fp.abs (fp.sub RNE (fp.sqrt RNE x5) (fp.roundToIntegral RNE x8)))) (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.div RNE x2 x4) (fp.neg x8)) (fp.sub RNE (fp.roundToIntegral RNE x8) (fp.max x9 x0))) (fp.abs (fp.roundToIntegral RNE (fp.min x4 x1)))))))(check-sat)