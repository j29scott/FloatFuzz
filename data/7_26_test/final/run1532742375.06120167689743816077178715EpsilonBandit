;  time  = {'mathsat': 12.795207023620605, 'z3': 237.047}
;  terms = 81
;  score = 224.2517929763794
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.abs (fp.min x4 x4)))) (fp.min (fp.add RNE (fp.mul RNE (fp.sub RNE x5 x1) (fp.mul RNE x1 x2)) (fp.min (fp.add RNE x9 x9) (fp.add RNE x3 (fp.sqrt RNE x9)))) (fp.add RNE (fp.add RNE (fp.add RNE x3 (fp.sub RNE x0 x1)) (fp.min (fp.sub RNE x1 x9) (fp.min x0 x7))) (fp.add RNE (fp.mul RNE x3 x8) (fp.roundToIntegral RNE x1))))) (fp.abs (fp.mul RNE (fp.add RNE (fp.add RNE (fp.min x3 x9) (fp.min (fp.mul RNE x0 x2) (fp.div RNE x8 x6))) (fp.add RNE (fp.add RNE x5 (fp.add RNE x0 x4)) (fp.min (fp.abs x7) (fp.add RNE x1 x8)))) (fp.max (fp.roundToIntegral RNE (fp.add RNE x6 x3)) (fp.neg (fp.add RNE x3 (fp.roundToIntegral RNE x3))))))))(check-sat)