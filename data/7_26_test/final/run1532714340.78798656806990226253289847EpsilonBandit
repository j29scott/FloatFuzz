;  time  = {'z3': 179.365, 'mathsat': 22.099539756774902}
;  terms = 90
;  score = 157.2654602432251
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.add RNE (fp.max (fp.add RNE (fp.add RNE (fp.add RNE x5 (fp.mul RNE x7 x5)) (fp.min (fp.max x5 x3) (fp.add RNE x2 x5))) (fp.add RNE (fp.add RNE x2 x1) (fp.add RNE (fp.mul RNE x8 x4) (fp.roundToIntegral RNE x6)))) (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE x0 x5)) (fp.add RNE (fp.add RNE (fp.mul RNE x3 x1) (fp.add RNE x5 x7)) (fp.sub RNE (fp.add RNE x3 x9) (fp.add RNE x7 x1))))) (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE (fp.add RNE x2 (fp.add RNE x2 x4)) (fp.div RNE (fp.add RNE x5 x3) (fp.div RNE x8 x3)))) (fp.div RNE (fp.div RNE (fp.min (fp.add RNE x6 x6) (fp.sqrt RNE x4)) (fp.max (fp.min x0 x2) (fp.sqrt RNE x4))) (fp.add RNE (fp.add RNE (fp.abs x5) (fp.add RNE x7 x1)) (fp.add RNE (fp.max x0 x4) (fp.max x2 x0))))))))(check-sat)