;  time  = {'z3': 142.656, 'mathsat': 2.596992254257202}
;  terms = 74
;  score = 140.0590077457428
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.abs (fp.neg x0)) (fp.neg (fp.abs x4)))) (fp.max (fp.roundToIntegral RNE (fp.abs (fp.sub RNE x0 (fp.div RNE x5 x4)))) (fp.min (fp.mul RNE (fp.mul RNE x5 x1) (fp.min x3 x8)) (fp.div RNE (fp.add RNE x1 x6) (fp.min x8 x3))))) (fp.max (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.sub RNE x9 x0) (fp.mul RNE x7 x3)) (fp.div RNE (fp.neg x4) (fp.neg x2))) (fp.max (fp.sub RNE (fp.mul RNE x4 x1) (fp.mul RNE x5 x7)) (fp.abs (fp.sub RNE x2 x1)))) (fp.abs (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE x1) (fp.max x2 x3)) (fp.add RNE (fp.roundToIntegral RNE x9) (fp.add RNE x3 x0)))))))(check-sat)