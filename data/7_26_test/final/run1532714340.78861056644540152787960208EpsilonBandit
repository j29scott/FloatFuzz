;  time  = {'mathsat': 22.55043911933899, 'z3': 288.736}
;  terms = 101
;  score = 266.185560880661
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.mul RNE (fp.add RNE (fp.min (fp.add RNE x2 x9) (fp.add RNE x4 x7)) (fp.add RNE (fp.add RNE x2 x3) (fp.add RNE x8 (fp.add RNE x5 x6)))) (fp.sqrt RNE (fp.add RNE (fp.abs x4) (fp.add RNE (fp.sqrt RNE x2) (fp.add RNE x8 x0))))) (fp.div RNE (fp.roundToIntegral RNE (fp.sqrt RNE (fp.add RNE x9 (fp.add RNE x2 x2)))) (fp.sqrt RNE (fp.add RNE (fp.sub RNE x2 x2) (fp.max (fp.div RNE x9 x0) (fp.neg x9)))))) (fp.add RNE (fp.neg (fp.mul RNE (fp.sub RNE (fp.sqrt RNE x7) (fp.neg x7)) (fp.add RNE (fp.add RNE x9 x9) (fp.sqrt RNE x9)))) (fp.add RNE (fp.min (fp.abs (fp.abs (fp.add RNE x6 x6))) (fp.sub RNE (fp.div RNE (fp.min x2 x0) (fp.add RNE x3 x2)) (fp.sub RNE (fp.roundToIntegral RNE x6) (fp.roundToIntegral RNE x9)))) (fp.add RNE (fp.div RNE (fp.abs (fp.roundToIntegral RNE x1)) (fp.add RNE (fp.add RNE x2 x7) (fp.abs x5))) (fp.neg (fp.sub RNE (fp.neg x1) (fp.sub RNE x5 x0))))))))(check-sat)