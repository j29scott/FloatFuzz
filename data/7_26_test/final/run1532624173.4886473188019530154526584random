;  time  = {'mathsat': 7.631051301956177, 'z3': 173.088}
;  terms = 72
;  score = 165.45694869804382
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE (fp.mul RNE (fp.neg x6) (fp.roundToIntegral RNE x2)) (fp.sqrt RNE (fp.min x5 x5)))) (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.max x2 x2) (fp.sqrt RNE x7)) (fp.add RNE (fp.sqrt RNE x7) (fp.div RNE x6 x0))) (fp.sub RNE (fp.abs (fp.abs x6)) (fp.add RNE (fp.max x4 x2) (fp.max x5 x9))))) (fp.max (fp.max (fp.min (fp.neg (fp.mul RNE x1 x2)) (fp.div RNE (fp.sub RNE x9 x8) (fp.sub RNE x6 x8))) (fp.mul RNE (fp.add RNE (fp.sub RNE x2 x8) (fp.mul RNE x7 x3)) (fp.abs (fp.mul RNE x1 x6)))) (fp.abs (fp.neg (fp.add RNE (fp.sub RNE x6 x8) (fp.sqrt RNE x1)))))))(check-sat)