;  time  = {'mathsat': 4.517739772796631, 'z3': 202.41}
;  terms = 75
;  score = 197.89226022720337
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.abs (fp.sub RNE (fp.div RNE (fp.mul RNE x4 x7) (fp.max (fp.neg x1) (fp.roundToIntegral RNE x0))) (fp.min (fp.roundToIntegral RNE x6) (fp.div RNE x2 x3)))) (fp.roundToIntegral RNE (fp.sub RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE x8 x8) (fp.div RNE x0 x7)) (fp.div RNE (fp.neg x6) (fp.max x0 x3))) (fp.roundToIntegral RNE (fp.mul RNE (fp.abs x6) (fp.div RNE x0 x9)))))) (fp.div RNE (fp.div RNE (fp.sqrt RNE (fp.abs (fp.abs x5))) (fp.max (fp.abs (fp.min x4 (fp.min x0 x3))) (fp.sub RNE (fp.max x2 x5) (fp.sub RNE x3 x5)))) (fp.abs (fp.min (fp.add RNE (fp.neg x9) (fp.abs x8)) (fp.div RNE (fp.neg x2) (fp.min x3 x8)))))))(check-sat)