;  time  = {'z3': 284.61, 'mathsat': 12.602980613708496}
;  terms = 87
;  score = 272.0070193862915
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.add RNE (fp.add RNE (fp.mul RNE (fp.min x8 x3) (fp.sub RNE x6 x0)) (fp.div RNE (fp.max x5 x8) (fp.mul RNE x3 x1))) (fp.add RNE (fp.sqrt RNE (fp.add RNE x2 x6)) (fp.mul RNE (fp.sqrt RNE x6) (fp.max x1 x6)))) (fp.max (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE x0) (fp.min (fp.abs x4) (fp.roundToIntegral RNE x9))) (fp.add RNE (fp.add RNE x5 x6) (fp.mul RNE x1 x6))) (fp.div RNE (fp.abs (fp.div RNE x1 x5)) (fp.add RNE (fp.mul RNE x3 x2) (fp.abs x6))))) (fp.add RNE (fp.abs (fp.mul RNE (fp.sqrt RNE (fp.min x8 x4)) (fp.div RNE (fp.add RNE x2 (fp.min x1 x8)) (fp.abs x4)))) (fp.neg (fp.neg (fp.add RNE (fp.add RNE (fp.sqrt RNE x0) (fp.mul RNE x5 x7)) (fp.max (fp.sqrt RNE x9) (fp.min x9 x5))))))))(check-sat)