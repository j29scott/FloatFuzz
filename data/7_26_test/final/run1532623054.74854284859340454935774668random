;  time  = {'mathsat': 6.784757852554321, 'z3': 234.465}
;  terms = 70
;  score = 227.68024214744568
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.max (fp.roundToIntegral RNE (fp.neg (fp.max x1 x6))) (fp.neg (fp.max (fp.min x0 x7) (fp.div RNE x8 x9)))) (fp.mul RNE (fp.sqrt RNE (fp.sub RNE (fp.sqrt RNE x2) (fp.div RNE x4 x0))) (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x2 x3)) (fp.sub RNE (fp.sub RNE x0 x1) (fp.sqrt RNE x8))))) (fp.add RNE (fp.sqrt RNE (fp.abs (fp.neg (fp.sqrt RNE x8)))) (fp.add RNE (fp.add RNE (fp.min (fp.max x9 (fp.mul RNE x6 x2)) (fp.sqrt RNE x5)) (fp.add RNE (fp.div RNE x3 x1) (fp.add RNE x5 x3))) (fp.sub RNE (fp.mul RNE (fp.mul RNE x7 x2) (fp.max x5 x5)) (fp.roundToIntegral RNE (fp.add RNE x2 x4)))))))(check-sat)