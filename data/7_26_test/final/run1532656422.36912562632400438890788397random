;  time  = {'mathsat': 43.5545289516449, 'z3': 448.948}
;  terms = 88
;  score = 405.3934710483551
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.min (fp.sub RNE (fp.sub RNE (fp.sqrt RNE x0) (fp.max x4 x8)) (fp.sqrt RNE (fp.mul RNE x6 x8))) (fp.min (fp.add RNE (fp.div RNE x9 x8) (fp.abs x9)) (fp.sub RNE (fp.mul RNE x0 (fp.neg x9)) (fp.add RNE x2 x1)))) (fp.max (fp.max (fp.neg (fp.add RNE (fp.neg x5) (fp.div RNE x4 x9))) (fp.sub RNE (fp.add RNE (fp.neg x2) (fp.min x9 x9)) (fp.sqrt RNE (fp.roundToIntegral RNE x8)))) (fp.abs (fp.div RNE (fp.mul RNE (fp.div RNE x9 x3) (fp.roundToIntegral RNE x1)) (fp.roundToIntegral RNE (fp.neg x9)))))) (fp.mul RNE (fp.abs (fp.min (fp.sqrt RNE (fp.div RNE x1 x5)) (fp.roundToIntegral RNE (fp.div RNE x3 x0)))) (fp.mul RNE (fp.neg (fp.sub RNE (fp.sub RNE x5 x4) (fp.roundToIntegral RNE x4))) (fp.min (fp.roundToIntegral RNE (fp.neg x3)) (fp.min (fp.min x8 x7) (fp.abs x7)))))))(check-sat)