;  time  = {'mathsat': 10.369137525558472, 'z3': 300.139}
;  terms = 105
;  score = 289.76986247444154
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.abs (fp.abs (fp.add RNE (fp.div RNE x4 x3) (fp.sub RNE (fp.add RNE x0 x9) (fp.add RNE x3 x3))))) (fp.add RNE (fp.add RNE (fp.neg (fp.roundToIntegral RNE x4)) (fp.add RNE (fp.add RNE x6 x6) (fp.add RNE x8 x9))) (fp.div RNE (fp.add RNE (fp.div RNE x1 x1) (fp.add RNE (fp.div RNE x6 x3) (fp.add RNE x8 x7))) (fp.sqrt RNE (fp.sub RNE x2 x1))))) (fp.add RNE (fp.add RNE (fp.neg (fp.roundToIntegral RNE (fp.add RNE x4 x4))) (fp.div RNE (fp.min (fp.roundToIntegral RNE (fp.div RNE x5 x2)) (fp.roundToIntegral RNE (fp.sub RNE x6 x7))) (fp.abs (fp.sub RNE (fp.add RNE x6 x8) (fp.add RNE x6 x1))))) (fp.mul RNE (fp.add RNE (fp.abs (fp.mul RNE (fp.sub RNE x9 x6) (fp.abs x9))) (fp.abs (fp.div RNE (fp.div RNE x8 x5) (fp.neg x2)))) (fp.sub RNE (fp.add RNE (fp.min (fp.add RNE x4 x7) (fp.neg x8)) (fp.max (fp.abs x9) (fp.add RNE x2 x7))) (fp.sqrt RNE (fp.add RNE (fp.roundToIntegral RNE x0) (fp.add RNE x8 x8))))))))(check-sat)