;  time  = {'mathsat': 3.408123016357422, 'z3': 221.152}
;  terms = 144
;  score = 217.74387698364256
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.add RNE (fp.sub RNE (fp.sqrt RNE (fp.add RNE x0 x6)) (fp.sub RNE (fp.neg x5) (fp.sub RNE x9 x9))) (fp.sub RNE (fp.add RNE (fp.mul RNE x0 x4) (fp.sqrt RNE (fp.abs x2))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.add RNE x7 x5))))) (fp.max (fp.add RNE (fp.div RNE (fp.max (fp.sqrt RNE x5) (fp.roundToIntegral RNE x9)) (fp.abs (fp.add RNE x7 x4))) (fp.add RNE (fp.sqrt RNE (fp.roundToIntegral RNE x1)) (fp.sub RNE (fp.sqrt RNE x5) (fp.sqrt RNE x9)))) (fp.add RNE (fp.add RNE (fp.sub RNE (fp.min x0 x0) (fp.mul RNE x8 x5)) (fp.neg (fp.neg x1))) (fp.sqrt RNE (fp.sub RNE (fp.mul RNE x9 x9) (fp.abs x9)))))) (fp.add RNE (fp.max (fp.sub RNE (fp.max (fp.add RNE x9 x9) (fp.neg x8)) (fp.max (fp.div RNE (fp.div RNE x3 x7) (fp.add RNE x3 x3)) (fp.add RNE (fp.max x2 x0) (fp.sub RNE x3 x3)))) (fp.sqrt RNE (fp.neg (fp.mul RNE x7 x9)))) (fp.mul RNE (fp.sub RNE (fp.max (fp.add RNE (fp.neg x4) (fp.sqrt RNE x2)) (fp.sub RNE (fp.roundToIntegral RNE x1) (fp.add RNE x4 x1))) (fp.abs (fp.add RNE (fp.mul RNE x0 x0) (fp.sub RNE x3 x4)))) (fp.sub RNE (fp.sub RNE (fp.max (fp.sub RNE x1 x8) (fp.sub RNE x2 x2)) (fp.add RNE (fp.abs x5) (fp.sub RNE x2 x9))) (fp.add RNE (fp.roundToIntegral RNE (fp.abs x2)) (fp.div RNE (fp.add RNE x6 x3) (fp.add RNE x5 x7))))))))(check-sat)