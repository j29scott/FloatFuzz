;  time  = {'z3': 408.542, 'mathsat': 44.77279758453369}
;  terms = 80
;  score = 363.7692024154663
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.roundToIntegral RNE (fp.min (fp.max (fp.sub RNE x1 x7) (fp.sqrt RNE x7)) (fp.min (fp.abs x3) (fp.mul RNE x2 x3)))) (fp.sub RNE (fp.mul RNE (fp.min (fp.div RNE x3 x8) (fp.div RNE x7 x6)) (fp.sub RNE (fp.sub RNE x5 x4) (fp.add RNE x3 x5))) (fp.mul RNE (fp.mul RNE (fp.add RNE x5 x3) (fp.mul RNE x7 x2)) (fp.min (fp.sqrt RNE x9) (fp.mul RNE x0 x8))))) (fp.abs (fp.add RNE (fp.mul RNE (fp.div RNE (fp.add RNE x9 x6) (fp.mul RNE x4 x6)) (fp.add RNE (fp.max x6 x8) (fp.roundToIntegral RNE x4))) (fp.div RNE (fp.sub RNE (fp.neg (fp.mul RNE x2 x3)) (fp.abs (fp.min x2 x8))) (fp.sqrt RNE (fp.min (fp.mul RNE x8 x2) (fp.min x0 x3))))))))(check-sat)