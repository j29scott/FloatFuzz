;  time  = {'mathsat': 13.952810287475586, 'z3': 398.697}
;  terms = 75
;  score = 384.7441897125244
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isPositive (fp.div RNE (fp.mul RNE (fp.max (fp.div RNE (fp.div RNE x9 x5) (fp.sub RNE x5 x2)) (fp.div RNE (fp.min x5 x3) (fp.add RNE (fp.div RNE x1 x0) (fp.abs x9)))) (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.sqrt RNE x6) (fp.add RNE x9 x3)) (fp.neg (fp.max x8 x0))) (fp.div RNE (fp.mul RNE (fp.mul RNE x3 x3) (fp.sqrt RNE x3)) (fp.div RNE (fp.min x8 x0) (fp.sub RNE x1 x4))))) (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x9 x1) (fp.mul RNE x9 (fp.div RNE x4 x4))) (fp.div RNE (fp.roundToIntegral RNE x4) (fp.min x7 x6))) (fp.abs (fp.max (fp.roundToIntegral RNE (fp.add RNE x3 x1)) (fp.min (fp.sqrt RNE x9) (fp.sqrt RNE x0))))))))(check-sat)