;  time  = {'z3': 194.234, 'mathsat': 7.606890439987183}
;  terms = 87
;  score = 186.62710956001283
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.min (fp.div RNE (fp.max (fp.abs x2) (fp.neg x9)) (fp.roundToIntegral RNE (fp.neg x3))) (fp.roundToIntegral RNE (fp.div RNE (fp.mul RNE x8 x6) (fp.sqrt RNE x7)))) (fp.mul RNE (fp.neg (fp.sub RNE (fp.sqrt RNE x7) (fp.abs x4))) (fp.add RNE (fp.div RNE (fp.sub RNE (fp.sub RNE x0 x2) (fp.sub RNE x7 x6)) (fp.abs (fp.mul RNE x1 x9))) (fp.roundToIntegral RNE (fp.neg (fp.min x3 x0)))))) (fp.sub RNE (fp.min (fp.div RNE (fp.abs (fp.mul RNE x4 x6)) (fp.neg (fp.min (fp.div RNE x8 x0) (fp.roundToIntegral RNE x9)))) (fp.mul RNE (fp.abs (fp.min x0 x6)) (fp.min (fp.abs x8) (fp.sqrt RNE x7)))) (fp.sub RNE (fp.min (fp.add RNE (fp.sub RNE x4 x8) (fp.add RNE x8 x1)) (fp.sqrt RNE (fp.abs x7))) (fp.roundToIntegral RNE (fp.div RNE (fp.mul RNE x0 x7) (fp.abs x6)))))))(check-sat)