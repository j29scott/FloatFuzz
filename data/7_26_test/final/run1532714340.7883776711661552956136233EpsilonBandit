;  time  = {'z3': 364.784, 'mathsat': 5.481699705123901}
;  terms = 148
;  score = 359.3023002948761
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.min (fp.min (fp.add RNE (fp.min x6 x4) (fp.min x2 (fp.neg x4))) (fp.add RNE (fp.add RNE x2 x2) (fp.add RNE x9 x3))) (fp.min (fp.add RNE (fp.max (fp.min x4 x2) (fp.div RNE x8 x1)) (fp.div RNE (fp.max x8 x1) (fp.min x5 x5))) (fp.div RNE (fp.abs (fp.add RNE x7 x4)) (fp.min (fp.neg x3) (fp.sqrt RNE x6))))) (fp.add RNE (fp.add RNE (fp.abs (fp.add RNE x8 (fp.sqrt RNE x7))) (fp.add RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x2)) (fp.div RNE (fp.neg x4) (fp.sub RNE x8 x2)))) (fp.abs (fp.roundToIntegral RNE (fp.min x8 (fp.max x2 x9)))))) (fp.add RNE (fp.add RNE (fp.neg (fp.add RNE (fp.abs x2) (fp.min x5 x9))) (fp.min (fp.add RNE (fp.sqrt RNE (fp.div RNE x1 x0)) (fp.div RNE (fp.add RNE x6 x6) (fp.min x2 x2))) (fp.sub RNE (fp.mul RNE (fp.div RNE x6 x9) (fp.max x6 x9)) (fp.roundToIntegral RNE (fp.mul RNE x4 x3))))) (fp.sub RNE (fp.min (fp.add RNE (fp.add RNE (fp.add RNE x5 x9) (fp.roundToIntegral RNE x5)) (fp.add RNE (fp.add RNE x5 x9) (fp.div RNE x9 x5))) (fp.sqrt RNE (fp.mul RNE (fp.add RNE x8 x8) (fp.abs x6)))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.add RNE x0 x1) (fp.div RNE x6 x3)) (fp.max (fp.div RNE x7 x3) (fp.abs x3))) (fp.roundToIntegral RNE (fp.add RNE (fp.neg x3) (fp.div RNE x7 x6))))))))(check-sat)