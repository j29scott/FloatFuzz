;  time  = {'mathsat': 3.777611255645752, 'z3': 247.764}
;  terms = 80
;  score = 243.98638874435426
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.add RNE (fp.min (fp.max (fp.sqrt RNE x5) (fp.div RNE x1 x0)) (fp.sub RNE (fp.min x6 x4) (fp.sqrt RNE x5))) (fp.add RNE (fp.sqrt RNE (fp.abs x8)) (fp.div RNE (fp.max x8 x6) (fp.div RNE x4 x2)))) (fp.div RNE (fp.abs (fp.roundToIntegral RNE (fp.max (fp.min x3 x0) (fp.max x1 x7)))) (fp.min (fp.add RNE (fp.abs (fp.max x2 x9)) (fp.mul RNE (fp.div RNE x9 x7) (fp.mul RNE x2 x1))) (fp.max (fp.sqrt RNE (fp.sqrt RNE x4)) (fp.min (fp.min x3 x6) (fp.sqrt RNE x3)))))) (fp.neg (fp.max (fp.neg (fp.mul RNE (fp.neg x8) (fp.div RNE x1 x7))) (fp.add RNE (fp.sqrt RNE (fp.min x7 x7)) (fp.sub RNE (fp.neg x4) (fp.sub RNE x4 x0)))))))(check-sat)