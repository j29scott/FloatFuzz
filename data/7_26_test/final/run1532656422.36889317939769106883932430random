;  time  = {'z3': 197.062, 'mathsat': 2.2972779273986816}
;  terms = 69
;  score = 194.76472207260133
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.div RNE (fp.neg (fp.neg (fp.neg x7))) (fp.abs (fp.add RNE (fp.roundToIntegral RNE x2) (fp.sub RNE x9 x5)))) (fp.add RNE (fp.neg (fp.min (fp.roundToIntegral RNE x3) (fp.sub RNE x6 x7))) (fp.min (fp.mul RNE (fp.add RNE x1 x5) (fp.roundToIntegral RNE x5)) (fp.sqrt RNE (fp.add RNE x4 x0))))) (fp.sub RNE (fp.min (fp.sub RNE (fp.div RNE (fp.add RNE x0 x8) (fp.min x6 x8)) (fp.min (fp.roundToIntegral RNE x3) (fp.roundToIntegral RNE x6))) (fp.div RNE (fp.abs (fp.sqrt RNE x4)) (fp.mul RNE (fp.roundToIntegral RNE x6) (fp.sqrt RNE x1)))) (fp.abs (fp.div RNE (fp.add RNE (fp.neg x9) (fp.mul RNE x3 x3)) (fp.roundToIntegral RNE (fp.min x9 x3)))))))(check-sat)