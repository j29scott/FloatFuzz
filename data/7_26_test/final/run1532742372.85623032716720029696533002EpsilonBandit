;  time  = {'mathsat': 10.82641077041626, 'z3': 172.157}
;  terms = 105
;  score = 161.33058922958375
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.add RNE (fp.add RNE (fp.mul RNE (fp.sub RNE x0 x8) (fp.add RNE x1 x4)) (fp.mul RNE (fp.max (fp.abs x4) (fp.neg x4)) (fp.min (fp.max x4 x2) (fp.max x3 x6)))) (fp.max (fp.sqrt RNE (fp.add RNE x0 x0)) (fp.min (fp.sub RNE x6 x0) (fp.sub RNE x9 x8)))) (fp.add RNE (fp.roundToIntegral RNE (fp.max (fp.sqrt RNE (fp.max x4 x0)) (fp.add RNE (fp.min x3 x4) (fp.min x9 x4)))) (fp.max (fp.max (fp.sqrt RNE (fp.mul RNE x3 x1)) (fp.mul RNE (fp.abs x4) (fp.neg x6))) (fp.mul RNE (fp.mul RNE (fp.abs x1) (fp.div RNE x7 x5)) (fp.min (fp.sqrt RNE x2) (fp.max x4 x4)))))) (fp.roundToIntegral RNE (fp.add RNE (fp.add RNE (fp.div RNE (fp.sub RNE x5 x9) (fp.sub RNE x7 x2)) (fp.max (fp.neg x1) (fp.div RNE x3 x6))) (fp.min (fp.min (fp.min x4 x4) (fp.sub RNE x9 x3)) (fp.div RNE (fp.div RNE x4 x3) (fp.sub RNE x7 x5)))))))(check-sat)