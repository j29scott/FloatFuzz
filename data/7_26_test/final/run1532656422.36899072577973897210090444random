;  time  = {'z3': 229.487, 'mathsat': 10.75788426399231}
;  terms = 69
;  score = 218.72911573600769
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.min (fp.abs (fp.roundToIntegral RNE (fp.add RNE x4 x9))) (fp.add RNE (fp.div RNE (fp.add RNE x4 x0) (fp.roundToIntegral RNE x3)) (fp.sqrt RNE (fp.div RNE x7 x8)))) (fp.max (fp.sub RNE (fp.mul RNE (fp.max x3 x8) (fp.sqrt RNE x6)) (fp.neg (fp.mul RNE x6 x4))) (fp.abs (fp.abs (fp.abs (fp.roundToIntegral RNE x1)))))) (fp.sqrt RNE (fp.div RNE (fp.div RNE (fp.neg (fp.mul RNE x7 x7)) (fp.sqrt RNE (fp.neg x4))) (fp.div RNE (fp.div RNE (fp.max (fp.min x8 x6) (fp.sqrt RNE x0)) (fp.sqrt RNE (fp.add RNE x3 x8))) (fp.div RNE (fp.min (fp.max x4 x4) (fp.roundToIntegral RNE x3)) (fp.abs (fp.add RNE x2 x3))))))))(check-sat)