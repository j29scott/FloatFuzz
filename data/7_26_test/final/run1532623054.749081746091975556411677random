;  time  = {'mathsat': 2.0254170894622803, 'z3': 143.744}
;  terms = 57
;  score = 141.71858291053772
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isPositive (fp.div RNE (fp.mul RNE (fp.max (fp.add RNE (fp.div RNE x2 x3) (fp.max x7 x1)) (fp.add RNE (fp.mul RNE x5 (fp.roundToIntegral RNE x1)) (fp.mul RNE x3 x9))) (fp.max (fp.sub RNE (fp.sqrt RNE x8) (fp.sub RNE x3 x6)) (fp.neg (fp.add RNE (fp.mul RNE x5 x2) (fp.add RNE x8 x3))))) (fp.min (fp.roundToIntegral RNE (fp.sub RNE (fp.neg x0) (fp.mul RNE x5 (fp.max x4 x6)))) (fp.sub RNE (fp.add RNE (fp.mul RNE x2 x8) (fp.add RNE x7 x3)) (fp.sqrt RNE (fp.neg (fp.sub RNE x2 x7))))))))(check-sat)