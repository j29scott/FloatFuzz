;  time  = {'mathsat': 2.54428768157959, 'z3': 225.207}
;  terms = 83
;  score = 222.6627123184204
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.max x0 x0) (fp.div RNE x2 x2))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.neg x6)))) (fp.min (fp.add RNE (fp.add RNE (fp.neg x8) (fp.sqrt RNE (fp.mul RNE x4 x5))) (fp.add RNE (fp.sqrt RNE x4) (fp.mul RNE x9 x5))) (fp.max (fp.mul RNE (fp.neg x6) (fp.min x2 x0)) (fp.add RNE (fp.mul RNE x8 x8) (fp.div RNE x2 x3))))) (fp.add RNE (fp.sub RNE (fp.min (fp.min (fp.max x0 x6) (fp.neg x9)) (fp.add RNE (fp.add RNE x6 x1) (fp.abs x6))) (fp.min (fp.add RNE (fp.roundToIntegral RNE x2) (fp.min x0 x2)) (fp.min (fp.div RNE x2 x0) (fp.sub RNE (fp.div RNE x2 x0) (fp.div RNE x8 x5))))) (fp.neg (fp.roundToIntegral RNE (fp.neg (fp.max x5 x2)))))))(check-sat)