;  time  = {'z3': 209.905, 'mathsat': 2.576921224594116}
;  terms = 57
;  score = 207.32807877540588
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNormal (fp.min (fp.div RNE (fp.add RNE (fp.abs (fp.div RNE x6 x6)) (fp.neg (fp.max x2 x6))) (fp.add RNE (fp.add RNE (fp.sqrt RNE x1) (fp.sqrt RNE (fp.neg x0))) (fp.mul RNE (fp.neg x8) (fp.sqrt RNE x5)))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.add RNE x0 x9) (fp.div RNE x7 x2)) (fp.sqrt RNE (fp.add RNE x1 x1))) (fp.sub RNE (fp.add RNE (fp.add RNE x2 (fp.add RNE x1 x7)) (fp.max (fp.mul RNE x1 x4) (fp.mul RNE x8 x3))) (fp.add RNE (fp.add RNE x1 x4) (fp.roundToIntegral RNE x4)))))))(check-sat)