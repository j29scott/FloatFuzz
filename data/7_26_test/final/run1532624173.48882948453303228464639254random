;  time  = {'mathsat': 34.10276389122009, 'z3': 254.437}
;  terms = 80
;  score = 220.33423610877992
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sqrt RNE (fp.max (fp.div RNE (fp.min (fp.sub RNE x8 x7) (fp.abs x0)) (fp.div RNE (fp.sqrt RNE x6) (fp.add RNE x6 x4))) (fp.add RNE (fp.mul RNE (fp.mul RNE x4 x5) (fp.mul RNE x8 x6)) (fp.abs (fp.sqrt RNE x7))))) (fp.mul RNE (fp.roundToIntegral RNE (fp.min (fp.div RNE (fp.neg x8) (fp.roundToIntegral RNE x0)) (fp.min (fp.add RNE x4 x4) (fp.roundToIntegral RNE x8)))) (fp.max (fp.max (fp.abs (fp.div RNE (fp.sqrt RNE x1) (fp.min x9 x6))) (fp.mul RNE (fp.sub RNE (fp.sub RNE x5 x1) (fp.sqrt RNE x6)) (fp.add RNE (fp.max x3 x6) (fp.roundToIntegral RNE x2)))) (fp.sub RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.abs x7)) (fp.div RNE (fp.mul RNE x8 x6) (fp.add RNE x8 x5))) (fp.abs (fp.abs (fp.add RNE x5 x4))))))))(check-sat)