;  time  = {'z3': 527.228, 'mathsat': 6.49870753288269}
;  terms = 128
;  score = 520.7292924671173
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.sub RNE (fp.sqrt RNE (fp.add RNE (fp.sqrt RNE x1) (fp.sqrt RNE x6))) (fp.div RNE (fp.mul RNE (fp.sub RNE x5 (fp.sub RNE x7 x6)) (fp.add RNE x2 x3)) (fp.add RNE (fp.sqrt RNE x1) (fp.sqrt RNE x4)))) (fp.sub RNE (fp.sqrt RNE (fp.div RNE (fp.sub RNE (fp.add RNE x6 x1) (fp.div RNE x4 x3)) (fp.mul RNE (fp.sqrt RNE x7) (fp.sub RNE x9 x3)))) (fp.abs (fp.neg (fp.min (fp.max x5 x6) (fp.neg x0)))))) (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.sub RNE x3 (fp.min x3 x6)) (fp.sub RNE (fp.add RNE x7 x9) (fp.sub RNE x1 x9))) (fp.mul RNE (fp.abs x9) (fp.mul RNE x0 x3))) (fp.min (fp.sub RNE (fp.add RNE x2 x7) (fp.abs (fp.roundToIntegral RNE x4))) (fp.max (fp.sub RNE x1 (fp.sqrt RNE x2)) (fp.sub RNE x1 x6)))) (fp.sub RNE (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE x5) (fp.sub RNE x0 x3)) (fp.sub RNE (fp.max x4 x0) (fp.roundToIntegral RNE x4))) (fp.sqrt RNE (fp.sub RNE (fp.min x5 x1) (fp.mul RNE x8 x9)))) (fp.min (fp.neg (fp.max (fp.sub RNE x3 x3) (fp.min x5 x5))) (fp.add RNE (fp.abs (fp.abs x8)) (fp.sub RNE (fp.max x8 x6) (fp.roundToIntegral RNE x1))))))))(check-sat)