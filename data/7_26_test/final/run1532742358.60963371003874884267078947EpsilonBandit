;  time  = {'z3': 478.632, 'mathsat': 9.977936029434204}
;  terms = 124
;  score = 468.6540639705658
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.add RNE (fp.add RNE (fp.abs (fp.max x6 x2)) (fp.mul RNE (fp.abs x0) (fp.mul RNE x4 x3))) (fp.sub RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x6)) (fp.sqrt RNE (fp.min x2 x3))) (fp.roundToIntegral RNE (fp.sub RNE (fp.min x8 x1) (fp.sub RNE x2 x6))))) (fp.add RNE (fp.add RNE (fp.min (fp.max x2 x6) (fp.mul RNE x4 x5)) (fp.add RNE (fp.div RNE x0 x2) (fp.div RNE (fp.roundToIntegral RNE x5) (fp.add RNE x3 x0)))) (fp.add RNE (fp.sqrt RNE (fp.mul RNE (fp.div RNE x5 x9) (fp.roundToIntegral RNE x0))) (fp.add RNE (fp.roundToIntegral RNE (fp.sqrt RNE x4)) (fp.div RNE (fp.neg x2) (fp.mul RNE x9 x9)))))) (fp.mul RNE (fp.add RNE (fp.min (fp.max (fp.add RNE x6 x8) (fp.mul RNE x2 x0)) (fp.div RNE (fp.sub RNE x1 x8) (fp.mul RNE x6 x8))) (fp.sqrt RNE (fp.sub RNE (fp.abs x1) (fp.add RNE x1 x4)))) (fp.mul RNE (fp.add RNE (fp.add RNE (fp.mul RNE x5 x6) (fp.max x4 x7)) (fp.max (fp.abs (fp.max x7 x0)) (fp.div RNE (fp.div RNE x4 x7) (fp.max x5 x1)))) (fp.min (fp.max (fp.min x7 x1) (fp.div RNE x8 x6)) (fp.neg (fp.neg x6)))))))(check-sat)