;  time  = {'mathsat': 3.7782583236694336, 'z3': 344.588}
;  terms = 92
;  score = 340.8097416763306
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.div RNE (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.div RNE x0 x7) (fp.add RNE x6 x8)) (fp.mul RNE (fp.mul RNE (fp.mul RNE x1 x1) (fp.max x4 x8)) (fp.mul RNE (fp.mul RNE x8 x7) (fp.roundToIntegral RNE x0)))) (fp.mul RNE (fp.max (fp.min (fp.mul RNE x9 x2) (fp.mul RNE x9 x8)) (fp.abs (fp.mul RNE x6 x8))) (fp.mul RNE (fp.sub RNE (fp.sqrt RNE x5) (fp.sqrt RNE x4)) (fp.mul RNE (fp.mul RNE x3 x9) (fp.max x9 x2))))) (fp.mul RNE (fp.add RNE (fp.add RNE (fp.neg x6) (fp.add RNE x5 (fp.abs x7))) (fp.mul RNE (fp.add RNE (fp.mul RNE x7 x6) (fp.mul RNE x9 x9)) (fp.sqrt RNE (fp.div RNE x9 x4)))) (fp.add RNE (fp.add RNE (fp.mul RNE x0 (fp.add RNE x2 x8)) (fp.sqrt RNE (fp.add RNE x9 x7))) (fp.mul RNE (fp.add RNE x1 (fp.add RNE x5 x0)) (fp.sub RNE x3 x1)))))))(check-sat)