;  time  = {'mathsat': 27.94572424888611, 'z3': 600}
;  terms = 123
;  score = 572.0542757511139
;  stdout= {'mathsat': 'sat', 'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.sub RNE (fp.sub RNE (fp.sub RNE (fp.min (fp.neg x1) (fp.sub RNE x2 x4)) (fp.abs (fp.max x9 x1))) (fp.div RNE (fp.add RNE (fp.div RNE x6 x7) (fp.neg x4)) (fp.max (fp.min x3 x9) (fp.div RNE x8 (fp.max x6 x3))))) (fp.sqrt RNE (fp.max (fp.sub RNE (fp.div RNE x4 x2) (fp.neg x8)) (fp.div RNE (fp.div RNE x4 x2) (fp.mul RNE x9 x9))))) (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.div RNE x9 x2) (fp.sqrt RNE (fp.abs x9))) (fp.div RNE (fp.sub RNE x5 x9) (fp.neg (fp.mul RNE x9 x0)))) (fp.div RNE (fp.div RNE (fp.sub RNE x1 x2) (fp.mul RNE (fp.sqrt RNE x2) (fp.neg x2))) (fp.div RNE (fp.sub RNE (fp.sqrt RNE x2) (fp.div RNE x7 x8)) (fp.mul RNE (fp.div RNE x9 x7) (fp.mul RNE x9 x8))))) (fp.div RNE (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE x0) (fp.div RNE x6 x4)) (fp.div RNE (fp.add RNE x4 x3) (fp.sqrt RNE x3))) (fp.sqrt RNE (fp.div RNE (fp.roundToIntegral RNE x8) (fp.sub RNE x2 x6)))) (fp.sqrt RNE (fp.div RNE (fp.div RNE (fp.div RNE x2 x1) (fp.sqrt RNE x5)) (fp.div RNE (fp.sqrt RNE x7) (fp.div RNE x1 x1))))))))(check-sat)