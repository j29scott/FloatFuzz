;  time  = {'z3': 299.279, 'mathsat': 24.833252429962158}
;  terms = 88
;  score = 274.44574757003784
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.sqrt RNE (fp.sub RNE (fp.add RNE (fp.min x5 x2) (fp.mul RNE x2 x3)) (fp.mul RNE (fp.div RNE x6 x9) (fp.max x8 x4)))) (fp.sub RNE (fp.add RNE (fp.sub RNE (fp.div RNE x1 x7) (fp.min x5 x4)) (fp.roundToIntegral RNE (fp.abs x3))) (fp.sub RNE (fp.abs (fp.sub RNE (fp.mul RNE x3 x7) (fp.sub RNE x8 x6))) (fp.neg (fp.sub RNE (fp.roundToIntegral RNE x2) (fp.neg x0)))))) (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.mul RNE (fp.neg x4) (fp.abs x8)) (fp.sqrt RNE (fp.div RNE x3 x2))) (fp.sqrt RNE (fp.sub RNE (fp.roundToIntegral RNE x4) (fp.roundToIntegral RNE x7)))) (fp.abs (fp.mul RNE (fp.max (fp.div RNE (fp.sqrt RNE x2) (fp.sqrt RNE x9)) (fp.min (fp.neg x1) (fp.sub RNE x3 x0))) (fp.sub RNE (fp.sqrt RNE (fp.max x3 x9)) (fp.div RNE (fp.sqrt RNE x2) (fp.mul RNE x3 x3))))))))(check-sat)