;  time  = {'mathsat': 11.045049905776978, 'z3': 269.847}
;  terms = 68
;  score = 258.801950094223
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.max (fp.max (fp.mul RNE (fp.mul RNE x0 x4) (fp.max x0 x0)) (fp.roundToIntegral RNE (fp.mul RNE x0 x1))) (fp.mul RNE (fp.roundToIntegral RNE (fp.sqrt RNE x0)) (fp.neg (fp.min x9 x8)))) (fp.sub RNE (fp.neg (fp.sqrt RNE (fp.roundToIntegral RNE (fp.add RNE x5 x0)))) (fp.abs (fp.div RNE (fp.div RNE (fp.sub RNE x7 x9) (fp.div RNE x7 x2)) (fp.add RNE (fp.max x6 x3) (fp.div RNE x9 x6)))))) (fp.neg (fp.add RNE (fp.abs (fp.sqrt RNE (fp.max x0 x9))) (fp.add RNE (fp.div RNE (fp.mul RNE x9 x8) (fp.max x0 x0)) (fp.div RNE (fp.add RNE x9 x6) (fp.div RNE x0 x6)))))))(check-sat)