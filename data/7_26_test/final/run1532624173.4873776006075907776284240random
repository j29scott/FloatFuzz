;  time  = {'z3': 153.391, 'mathsat': 4.992146730422974}
;  terms = 71
;  score = 148.39885326957702
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.roundToIntegral RNE (fp.div RNE (fp.min (fp.sqrt RNE (fp.roundToIntegral RNE x1)) (fp.mul RNE (fp.abs x6) (fp.div RNE x5 x3))) (fp.div RNE (fp.div RNE (fp.mul RNE x0 x2) (fp.sub RNE (fp.mul RNE x4 x3) (fp.mul RNE x8 x1))) (fp.roundToIntegral RNE (fp.neg x1))))) (fp.min (fp.sub RNE (fp.min (fp.roundToIntegral RNE (fp.div RNE x1 x0)) (fp.div RNE (fp.abs x3) (fp.max x6 x4))) (fp.min (fp.roundToIntegral RNE (fp.roundToIntegral RNE x0)) (fp.sub RNE (fp.max x3 x2) (fp.sqrt RNE x3)))) (fp.max (fp.neg (fp.sub RNE (fp.sqrt RNE x4) (fp.roundToIntegral RNE x3))) (fp.add RNE (fp.add RNE (fp.max x0 x5) (fp.abs x8)) (fp.sub RNE (fp.neg x4) (fp.add RNE x6 x3)))))))(check-sat)