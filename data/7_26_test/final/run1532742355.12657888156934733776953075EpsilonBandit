;  time  = {'z3': 600, 'mathsat': 31.044748783111572}
;  terms = 85
;  score = 568.9552512168884
;  stdout= {'z3': 'timeout\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.sqrt RNE x8)) (fp.roundToIntegral RNE (fp.div RNE x0 x6))) (fp.sqrt RNE (fp.add RNE (fp.add RNE x5 (fp.sqrt RNE x1)) (fp.neg x0)))) (fp.add RNE (fp.add RNE (fp.div RNE (fp.max x8 x4) (fp.mul RNE x2 x7)) (fp.roundToIntegral RNE (fp.sub RNE x7 x6))) (fp.add RNE (fp.min (fp.sub RNE (fp.add RNE x4 x4) (fp.mul RNE x6 x8)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x1))) (fp.add RNE (fp.roundToIntegral RNE (fp.max x7 x4)) (fp.mul RNE (fp.sqrt RNE x1) (fp.sub RNE x9 x7)))))) (fp.add RNE (fp.max (fp.abs (fp.sub RNE (fp.add RNE x2 (fp.div RNE x8 x0)) (fp.max x2 x5))) (fp.neg (fp.add RNE (fp.add RNE x6 x8) (fp.roundToIntegral RNE x7)))) (fp.roundToIntegral RNE (fp.div RNE (fp.neg (fp.abs (fp.div RNE x3 x6))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.sqrt RNE x4))))))))(check-sat)