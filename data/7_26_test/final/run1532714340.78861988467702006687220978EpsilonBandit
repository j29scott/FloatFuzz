;  time  = {'mathsat': 31.845606803894043, 'z3': 245.525}
;  terms = 105
;  score = 213.67939319610596
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.add RNE (fp.max (fp.div RNE (fp.abs x6) (fp.add RNE x0 x5)) (fp.add RNE (fp.sub RNE x0 x1) (fp.add RNE x5 x9))) (fp.div RNE (fp.add RNE (fp.add RNE x9 (fp.sub RNE x7 x4)) (fp.add RNE (fp.add RNE x6 x3) (fp.div RNE x8 x2))) (fp.div RNE (fp.roundToIntegral RNE x3) (fp.add RNE x1 x3)))) (fp.add RNE (fp.add RNE (fp.min (fp.sub RNE x8 x0) (fp.mul RNE x9 x8)) (fp.sub RNE (fp.mul RNE (fp.mul RNE x0 x0) (fp.min x1 x0)) (fp.abs (fp.min x1 x8)))) (fp.sqrt RNE (fp.mul RNE (fp.max x2 x6) (fp.roundToIntegral RNE x9))))) (fp.sqrt RNE (fp.add RNE (fp.sub RNE (fp.sub RNE (fp.add RNE x0 x5) (fp.abs x0)) (fp.max (fp.add RNE (fp.sub RNE x4 x2) (fp.add RNE x8 x5)) (fp.max (fp.sub RNE x2 x6) (fp.add RNE x0 x7)))) (fp.add RNE (fp.add RNE (fp.add RNE x6 x9) (fp.add RNE x3 (fp.sqrt RNE x4))) (fp.sub RNE (fp.max x2 x4) (fp.sub RNE x6 x0)))))))(check-sat)