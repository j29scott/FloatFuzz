;  time  = {'mathsat': 6.0744383335113525, 'z3': 532.259}
;  terms = 67
;  score = 526.1845616664887
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.sub RNE (fp.div RNE x6 x2) (fp.div RNE x8 (fp.div RNE x7 x8))) (fp.mul RNE (fp.sub RNE x3 (fp.min x6 x3)) (fp.mul RNE (fp.div RNE x8 x9) (fp.sub RNE x1 x4)))) (fp.div RNE (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x8 x5)) (fp.abs (fp.div RNE x8 x1))) (fp.abs (fp.div RNE (fp.add RNE x0 x4) (fp.mul RNE x4 x0))))) (fp.max (fp.roundToIntegral RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x4 x9) (fp.div RNE x4 x4)) (fp.add RNE (fp.sqrt RNE x8) (fp.roundToIntegral RNE x8)))) (fp.sqrt RNE (fp.neg (fp.add RNE (fp.sub RNE x1 x8) (fp.roundToIntegral RNE x6))))))))(check-sat)