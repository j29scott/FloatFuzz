;  time  = {'z3': 211.346, 'mathsat': 2.0786292552948}
;  terms = 76
;  score = 209.2673707447052
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.div RNE (fp.add RNE (fp.max (fp.min (fp.add RNE x5 (fp.div RNE x7 x2)) (fp.mul RNE x5 x4)) (fp.div RNE (fp.min x5 x9) (fp.add RNE x9 x7))) (fp.add RNE (fp.add RNE (fp.div RNE x9 x5) (fp.max x7 x5)) (fp.add RNE (fp.min (fp.roundToIntegral RNE x4) (fp.add RNE x6 x7)) (fp.mul RNE (fp.roundToIntegral RNE x0) (fp.roundToIntegral RNE x3))))) (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE (fp.min x2 x0)) (fp.max (fp.add RNE (fp.add RNE x6 x5) (fp.neg x7)) (fp.add RNE (fp.add RNE x6 x6) (fp.max x3 x4)))) (fp.add RNE (fp.mul RNE (fp.min x3 x3) (fp.mul RNE x4 x9)) (fp.add RNE (fp.add RNE x3 (fp.neg x5)) (fp.add RNE x1 x8)))))))(check-sat)