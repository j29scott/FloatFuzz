;  time  = {'z3': 191.706, 'mathsat': 2.4690744876861572}
;  terms = 103
;  score = 189.23692551231383
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.add RNE (fp.add RNE (fp.max (fp.neg x7) (fp.sqrt RNE x9)) (fp.neg (fp.neg x9))) (fp.add RNE (fp.add RNE (fp.mul RNE x6 x2) (fp.mul RNE (fp.max x8 x1) (fp.div RNE x3 x0))) (fp.add RNE (fp.roundToIntegral RNE (fp.min x6 x4)) (fp.add RNE (fp.roundToIntegral RNE x2) (fp.roundToIntegral RNE x8))))) (fp.add RNE (fp.sub RNE (fp.add RNE (fp.div RNE x1 x5) (fp.add RNE x4 x4)) (fp.div RNE (fp.sub RNE x4 x8) (fp.add RNE x8 (fp.max x9 x3)))) (fp.neg (fp.roundToIntegral RNE (fp.add RNE (fp.sub RNE x1 x9) (fp.add RNE x1 x8)))))) (fp.min (fp.min (fp.sqrt RNE (fp.add RNE (fp.min x8 x4) (fp.div RNE x9 x5))) (fp.add RNE (fp.add RNE (fp.max x3 x7) (fp.mul RNE x4 x3)) (fp.add RNE (fp.add RNE x4 x0) (fp.sqrt RNE x9)))) (fp.sub RNE (fp.neg (fp.add RNE (fp.roundToIntegral RNE x4) (fp.mul RNE x8 x9))) (fp.sqrt RNE (fp.add RNE (fp.abs x0) (fp.add RNE (fp.add RNE x1 x4) (fp.neg x3))))))))(check-sat)