;  time  = {'mathsat': 27.240962505340576, 'z3': 332.482}
;  terms = 137
;  score = 305.24103749465945
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.add RNE (fp.add RNE (fp.abs x7) (fp.add RNE x0 x3)) (fp.add RNE (fp.sub RNE x3 x7) (fp.add RNE x4 x1))) (fp.add RNE (fp.add RNE (fp.add RNE x0 (fp.mul RNE x9 x2)) (fp.neg x1)) (fp.div RNE (fp.div RNE (fp.div RNE x0 x7) (fp.div RNE x9 x2)) (fp.neg (fp.add RNE x9 x2))))) (fp.add RNE (fp.sub RNE (fp.add RNE (fp.add RNE x4 x8) (fp.add RNE x5 (fp.sub RNE x4 x4))) (fp.max (fp.add RNE x1 (fp.div RNE x7 x1)) (fp.max x5 x7))) (fp.min (fp.add RNE (fp.div RNE x5 x1) (fp.add RNE x5 x9)) (fp.mul RNE (fp.min x8 x1) (fp.roundToIntegral RNE x2))))) (fp.mul RNE (fp.add RNE (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE x1) (fp.add RNE x6 (fp.sub RNE x2 x9))) (fp.max (fp.min (fp.add RNE x3 x1) (fp.sqrt RNE x5)) (fp.add RNE (fp.abs x9) (fp.add RNE x9 x3)))) (fp.add RNE (fp.abs (fp.neg x2)) (fp.add RNE (fp.mul RNE (fp.add RNE x1 x2) (fp.add RNE x5 x1)) (fp.neg (fp.roundToIntegral RNE x5))))) (fp.add RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.add RNE x1 (fp.sqrt RNE x4)) (fp.add RNE x5 (fp.min x0 x6)))) (fp.div RNE (fp.sqrt RNE (fp.abs x7)) (fp.add RNE (fp.sub RNE x7 x1) (fp.min (fp.neg x8) (fp.sub RNE x0 x3))))))))(check-sat)