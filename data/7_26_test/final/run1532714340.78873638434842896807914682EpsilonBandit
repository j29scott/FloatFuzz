;  time  = {'mathsat': 3.8905344009399414, 'z3': 233.575}
;  terms = 97
;  score = 229.68446559906005
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.max (fp.abs (fp.add RNE (fp.add RNE (fp.neg x1) (fp.abs x4)) (fp.add RNE (fp.min x9 x4) (fp.add RNE x6 x0)))) (fp.min (fp.max (fp.add RNE (fp.mul RNE x4 x6) (fp.add RNE x1 (fp.min x2 x7))) (fp.abs (fp.sqrt RNE x8))) (fp.mul RNE (fp.roundToIntegral RNE (fp.add RNE x2 (fp.mul RNE x7 x8))) (fp.add RNE (fp.add RNE x0 x1) (fp.sqrt RNE x7))))) (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.sub RNE (fp.sqrt RNE x6) (fp.add RNE x1 x6)) (fp.add RNE (fp.neg x5) (fp.div RNE x6 x0))) (fp.div RNE (fp.mul RNE (fp.sub RNE x0 x8) (fp.roundToIntegral RNE x5)) (fp.mul RNE (fp.min x2 x2) (fp.sqrt RNE x1)))) (fp.max (fp.max (fp.add RNE (fp.sub RNE x4 x4) (fp.min x8 x1)) (fp.roundToIntegral RNE (fp.add RNE x9 (fp.add RNE x5 x0)))) (fp.min (fp.sqrt RNE (fp.div RNE x4 x3)) (fp.sub RNE (fp.div RNE x1 x2) (fp.abs x4)))))))(check-sat)