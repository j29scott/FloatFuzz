;  time  = {'mathsat': 12.69955825805664, 'z3': 200.788}
;  terms = 69
;  score = 188.08844174194337
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.min (fp.div RNE (fp.add RNE (fp.mul RNE x4 x9) (fp.sqrt RNE x7)) (fp.max (fp.mul RNE x5 x7) (fp.abs x4))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.sub RNE x0 x8)))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.max (fp.neg x2) (fp.sub RNE x7 x8))))) (fp.sub RNE (fp.add RNE (fp.min (fp.neg (fp.max x1 x5)) (fp.add RNE (fp.mul RNE x5 x2) (fp.max x3 x5))) (fp.add RNE (fp.sub RNE (fp.div RNE x3 x7) (fp.max x1 x6)) (fp.abs (fp.max x1 x3)))) (fp.roundToIntegral RNE (fp.add RNE (fp.add RNE (fp.add RNE x6 x4) (fp.neg x9)) (fp.max (fp.max x0 x1) (fp.roundToIntegral RNE x8)))))))(check-sat)