;  time  = {'mathsat': 5.804858922958374, 'z3': 172.377}
;  terms = 66
;  score = 166.57214107704164
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.roundToIntegral RNE (fp.neg (fp.add RNE (fp.sub RNE x8 x8) (fp.neg x0)))) (fp.min (fp.mul RNE (fp.mul RNE (fp.neg x2) (fp.add RNE x9 x0)) (fp.min (fp.max x3 (fp.div RNE x6 x5)) (fp.neg x4))) (fp.add RNE (fp.sqrt RNE (fp.add RNE x4 x0)) (fp.neg (fp.sub RNE x7 x3))))) (fp.mul RNE (fp.neg (fp.neg (fp.abs (fp.neg x1)))) (fp.div RNE (fp.div RNE (fp.min (fp.sqrt RNE x1) (fp.roundToIntegral RNE x4)) (fp.mul RNE (fp.sub RNE x1 x7) (fp.sub RNE x8 x9))) (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE x0) (fp.sub RNE x3 x6)) (fp.abs (fp.div RNE x3 x7)))))))(check-sat)