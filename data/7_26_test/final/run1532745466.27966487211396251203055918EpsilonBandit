;  time  = {'mathsat': 14.411044359207153, 'z3': 305.141}
;  terms = 106
;  score = 290.72995564079287
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.add RNE (fp.sub RNE (fp.add RNE x7 x8) (fp.max x0 x6)) (fp.add RNE (fp.abs x6) (fp.div RNE x6 x8))) (fp.add RNE (fp.div RNE (fp.min x8 x2) (fp.add RNE x4 (fp.max x4 x0))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x0))))) (fp.sqrt RNE (fp.add RNE (fp.max (fp.div RNE x4 x8) (fp.mul RNE x4 x4)) (fp.add RNE (fp.add RNE x5 (fp.add RNE x5 x4)) (fp.abs (fp.sqrt RNE x8)))))) (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE (fp.max (fp.min x5 x1) (fp.abs x6)) (fp.sub RNE (fp.add RNE (fp.sqrt RNE x7) (fp.abs x3)) (fp.sqrt RNE (fp.add RNE x7 x3))))) (fp.div RNE (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.neg x5) (fp.sqrt RNE x2)) (fp.sqrt RNE (fp.min x0 x2))) (fp.add RNE (fp.sub RNE (fp.div RNE x8 x2) (fp.sqrt RNE x1)) (fp.add RNE (fp.sqrt RNE x1) (fp.add RNE x4 x6)))) (fp.add RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.mul RNE x9 x8))) (fp.abs (fp.min (fp.add RNE x7 x1) (fp.abs x9))))))))(check-sat)