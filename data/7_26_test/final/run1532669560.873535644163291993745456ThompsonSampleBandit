;  time  = {'z3': 382.245, 'mathsat': 61.84514784812927}
;  terms = 77
;  score = 320.39985215187073
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isZero (fp.mul RNE (fp.mul RNE (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE x7) (fp.sub RNE x4 x0)) (fp.sqrt RNE (fp.mul RNE x9 x1))) (fp.sub RNE (fp.mul RNE (fp.div RNE (fp.roundToIntegral RNE x9) (fp.abs x5)) (fp.neg (fp.max x2 x6))) (fp.roundToIntegral RNE (fp.div RNE (fp.div RNE x7 x6) (fp.max x3 x1))))) (fp.div RNE (fp.mul RNE (fp.neg (fp.sqrt RNE (fp.add RNE x7 x4))) (fp.mul RNE (fp.add RNE (fp.max x3 x8) (fp.mul RNE x3 x8)) (fp.neg (fp.mul RNE x6 x5)))) (fp.sub RNE (fp.min (fp.sqrt RNE (fp.min x5 x4)) (fp.max (fp.sub RNE x6 x4) (fp.roundToIntegral RNE x7))) (fp.min (fp.max (fp.sub RNE x5 x1) (fp.roundToIntegral RNE x5)) (fp.min (fp.roundToIntegral RNE x6) (fp.sub RNE x4 x7))))))))(check-sat)