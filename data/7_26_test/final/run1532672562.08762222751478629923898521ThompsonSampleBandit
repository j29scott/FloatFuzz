;  time  = {'mathsat': 22.868006467819214, 'z3': 258.205}
;  terms = 109
;  score = 235.33699353218077
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.sub RNE (fp.sqrt RNE (fp.mul RNE (fp.sub RNE (fp.add RNE x7 (fp.mul RNE x4 x2)) (fp.neg x7)) (fp.roundToIntegral RNE (fp.mul RNE (fp.neg x8) (fp.sub RNE x0 x1))))) (fp.add RNE (fp.add RNE (fp.sqrt RNE (fp.add RNE x9 (fp.sqrt RNE x6))) (fp.sqrt RNE (fp.sqrt RNE x7))) (fp.min (fp.abs (fp.max (fp.add RNE x7 x7) (fp.mul RNE x1 x8))) (fp.mul RNE (fp.mul RNE (fp.div RNE x7 x7) (fp.sub RNE x8 x3)) (fp.abs (fp.mul RNE x9 x6)))))) (fp.sub RNE (fp.add RNE (fp.add RNE (fp.max (fp.sub RNE x3 x4) (fp.div RNE x8 x1)) (fp.mul RNE (fp.max x2 x9) (fp.sqrt RNE x1))) (fp.abs (fp.sqrt RNE (fp.max x3 x1)))) (fp.max (fp.add RNE (fp.mul RNE (fp.sub RNE x8 x8) (fp.sub RNE x5 x2)) (fp.add RNE (fp.sqrt RNE (fp.min x8 x3)) (fp.sub RNE (fp.add RNE x2 x0) (fp.add RNE x9 x2)))) (fp.div RNE (fp.add RNE (fp.max x6 x3) (fp.div RNE x5 x2)) (fp.add RNE (fp.max x6 x8) (fp.sub RNE x2 (fp.mul RNE x8 x4))))))))(check-sat)