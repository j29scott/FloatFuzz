;  time  = {'z3': 246.351, 'mathsat': 9.144794940948486}
;  terms = 83
;  score = 237.2062050590515
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.abs (fp.add RNE (fp.sub RNE (fp.max (fp.neg x8) (fp.sqrt RNE (fp.max x9 x4))) (fp.neg (fp.max x4 x2))) (fp.add RNE (fp.min (fp.sub RNE (fp.abs x2) (fp.sub RNE x8 x7)) (fp.max (fp.max x2 x7) (fp.abs x8))) (fp.sub RNE (fp.sub RNE (fp.div RNE x8 x0) (fp.div RNE x9 x8)) (fp.max (fp.add RNE x6 x1) (fp.sub RNE x7 x2)))))) (fp.mul RNE (fp.div RNE (fp.mul RNE (fp.sub RNE (fp.neg x3) (fp.sqrt RNE x6)) (fp.sub RNE (fp.mul RNE x8 x6) (fp.roundToIntegral RNE x3))) (fp.mul RNE (fp.max (fp.div RNE x4 x1) (fp.sub RNE x1 x2)) (fp.min (fp.mul RNE x3 x5) (fp.abs x1)))) (fp.abs (fp.max (fp.neg (fp.roundToIntegral RNE x9)) (fp.sub RNE (fp.roundToIntegral RNE x7) (fp.div RNE x5 x4)))))))(check-sat)