;  time  = {'z3': 349.031, 'mathsat': 10.661487340927124}
;  terms = 83
;  score = 338.3695126590729
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.mul RNE (fp.mul RNE (fp.add RNE (fp.add RNE (fp.add RNE x9 x0) (fp.div RNE (fp.div RNE x8 x8) (fp.roundToIntegral RNE x8))) (fp.add RNE (fp.max (fp.add RNE x5 x0) (fp.add RNE x8 x5)) (fp.add RNE (fp.add RNE x8 x6) (fp.roundToIntegral RNE x3)))) (fp.mul RNE (fp.add RNE (fp.sqrt RNE x3) (fp.add RNE (fp.div RNE x4 x8) (fp.sub RNE x9 x7))) (fp.add RNE (fp.sub RNE x0 x7) (fp.add RNE x6 x0)))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.add RNE x3 x6) (fp.min (fp.add RNE x2 x4) (fp.roundToIntegral RNE x4))) (fp.div RNE (fp.sqrt RNE (fp.neg x4)) (fp.abs (fp.div RNE x4 x6)))) (fp.div RNE (fp.add RNE (fp.div RNE x8 x0) (fp.div RNE (fp.roundToIntegral RNE x7) (fp.add RNE x3 x8))) (fp.sqrt RNE (fp.add RNE x9 (fp.sub RNE x8 x8))))))))(check-sat)