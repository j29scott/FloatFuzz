;  time  = {'z3': 253.476, 'mathsat': 3.755979299545288}
;  terms = 85
;  score = 249.7200207004547
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.add RNE x5 x7)) (fp.sqrt RNE (fp.neg x5))) (fp.min (fp.div RNE (fp.sqrt RNE x4) (fp.roundToIntegral RNE x4)) (fp.mul RNE (fp.sqrt RNE x4) (fp.neg x2)))) (fp.mul RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.sqrt RNE x2) (fp.div RNE x0 x9))) (fp.neg (fp.mul RNE (fp.neg x6) (fp.mul RNE x4 x6))))) (fp.div RNE (fp.max (fp.mul RNE (fp.neg (fp.add RNE x0 x3)) (fp.mul RNE (fp.abs x3) (fp.abs x5))) (fp.min (fp.mul RNE (fp.neg x7) (fp.roundToIntegral RNE x1)) (fp.min (fp.sub RNE x7 x8) (fp.roundToIntegral RNE x2)))) (fp.min (fp.max (fp.neg (fp.abs x5)) (fp.div RNE (fp.neg x8) (fp.mul RNE x3 x1))) (fp.max (fp.sub RNE (fp.roundToIntegral RNE x7) (fp.min x6 x4)) (fp.add RNE (fp.min x4 x3) (fp.abs x5)))))))(check-sat)