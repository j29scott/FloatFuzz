;  time  = {'z3': 266.738, 'mathsat': 5.7570741176605225}
;  terms = 102
;  score = 260.9809258823395
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.add RNE (fp.add RNE (fp.abs (fp.min (fp.add RNE x4 (fp.min x6 x7)) (fp.max x5 x5))) (fp.neg (fp.div RNE (fp.add RNE x0 (fp.max x8 x3)) (fp.max x5 x9)))) (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.add RNE x4 x6) (fp.div RNE (fp.div RNE x3 x2) (fp.abs x2))) (fp.sqrt RNE (fp.mul RNE x9 x6))) (fp.sub RNE (fp.add RNE (fp.max x4 x0) (fp.max (fp.roundToIntegral RNE x3) (fp.div RNE x1 x7))) (fp.abs (fp.max x6 x2))))) (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE (fp.min x5 x1) (fp.sub RNE x0 x4)) (fp.roundToIntegral RNE (fp.sub RNE x9 x6)))) (fp.mul RNE (fp.add RNE (fp.div RNE (fp.min x1 x1) (fp.min x9 x9)) (fp.sub RNE (fp.min (fp.add RNE x7 x5) (fp.sqrt RNE x4)) (fp.add RNE (fp.min x3 x8) (fp.sqrt RNE x3)))) (fp.add RNE (fp.mul RNE (fp.add RNE x8 x7) (fp.roundToIntegral RNE x8)) (fp.sqrt RNE (fp.sqrt RNE (fp.max x0 x0))))))))(check-sat)