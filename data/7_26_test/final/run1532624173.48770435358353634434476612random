;  time  = {'z3': 134.606, 'mathsat': 18.22135353088379}
;  terms = 75
;  score = 116.3846464691162
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.sqrt RNE (fp.sub RNE (fp.mul RNE (fp.min x9 x5) (fp.div RNE x2 x7)) (fp.div RNE (fp.max x4 x8) (fp.roundToIntegral RNE x1)))) (fp.mul RNE (fp.div RNE (fp.neg (fp.max x7 x8)) (fp.add RNE (fp.sqrt RNE x0) (fp.max x4 x6))) (fp.sub RNE (fp.max (fp.roundToIntegral RNE x4) (fp.min x3 x0)) (fp.roundToIntegral RNE (fp.min x5 x1))))) (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE (fp.sub RNE (fp.max x3 x9) (fp.max x2 (fp.add RNE x2 x6))) (fp.min (fp.neg x1) (fp.div RNE x1 x1)))) (fp.mul RNE (fp.div RNE (fp.min (fp.abs x1) (fp.abs x4)) (fp.sqrt RNE (fp.neg x4))) (fp.abs (fp.add RNE (fp.sqrt RNE x9) (fp.max x0 x5)))))))(check-sat)