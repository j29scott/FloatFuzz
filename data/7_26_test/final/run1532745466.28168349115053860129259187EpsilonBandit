;  time  = {'mathsat': 4.711384296417236, 'z3': 376.082}
;  terms = 131
;  score = 371.37061570358276
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.add RNE (fp.add RNE (fp.min (fp.add RNE x7 x1) (fp.add RNE x1 (fp.add RNE x8 x7))) (fp.mul RNE (fp.div RNE x9 x8) (fp.neg x6))) (fp.div RNE (fp.abs (fp.div RNE (fp.max x5 x7) (fp.add RNE x4 x6))) (fp.max (fp.roundToIntegral RNE (fp.sub RNE x1 x1)) (fp.sub RNE (fp.sub RNE x5 x7) (fp.sub RNE x4 x0))))) (fp.div RNE (fp.sub RNE (fp.abs (fp.div RNE x0 x8)) (fp.add RNE (fp.max x0 x2) (fp.add RNE x8 (fp.roundToIntegral RNE x2)))) (fp.sub RNE (fp.sub RNE (fp.add RNE x6 (fp.mul RNE x9 x9)) (fp.roundToIntegral RNE x1)) (fp.abs (fp.add RNE x6 x5))))) (fp.add RNE (fp.abs (fp.mul RNE (fp.abs (fp.abs x6)) (fp.div RNE (fp.mul RNE x4 x5) (fp.roundToIntegral RNE x2)))) (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.max (fp.min x5 x0) (fp.div RNE x3 x6)) (fp.add RNE (fp.neg x4) (fp.mul RNE x1 x1))) (fp.add RNE (fp.max (fp.add RNE x8 x6) (fp.neg x0)) (fp.add RNE (fp.mul RNE x9 x6) (fp.sqrt RNE x7)))) (fp.min (fp.add RNE (fp.sub RNE (fp.mul RNE x7 x9) (fp.add RNE x4 x8)) (fp.add RNE (fp.min x9 x5) (fp.div RNE x4 x1))) (fp.roundToIntegral RNE (fp.add RNE (fp.neg x9) (fp.add RNE x3 x8))))))))(check-sat)