;  time  = {'z3': 205.991, 'mathsat': 2.896101474761963}
;  terms = 89
;  score = 203.09489852523805
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.add RNE (fp.min (fp.add RNE (fp.roundToIntegral RNE (fp.mul RNE x8 x4)) (fp.min (fp.div RNE x7 x9) (fp.sqrt RNE (fp.div RNE x6 x7)))) (fp.add RNE (fp.sqrt RNE (fp.mul RNE x0 x3)) (fp.sub RNE (fp.min x4 x3) (fp.mul RNE x0 (fp.div RNE x0 x8))))) (fp.min (fp.neg (fp.add RNE (fp.sub RNE x6 x5) (fp.sqrt RNE x0))) (fp.add RNE (fp.add RNE (fp.max x6 x0) (fp.div RNE x5 (fp.max x0 x4))) (fp.add RNE (fp.roundToIntegral RNE x0) (fp.mul RNE x2 x3))))) (fp.add RNE (fp.abs (fp.max (fp.add RNE (fp.max x5 x2) (fp.min x9 x3)) (fp.sqrt RNE (fp.div RNE x4 x6)))) (fp.sub RNE (fp.add RNE (fp.add RNE (fp.mul RNE x8 x9) (fp.roundToIntegral RNE x4)) (fp.min (fp.neg x7) (fp.sqrt RNE x5))) (fp.max (fp.neg (fp.mul RNE x6 x5)) (fp.abs (fp.abs x9)))))))(check-sat)