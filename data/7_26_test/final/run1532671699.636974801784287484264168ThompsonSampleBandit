;  time  = {'z3': 364.655, 'mathsat': 9.50919508934021}
;  terms = 74
;  score = 355.14580491065976
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.add RNE (fp.abs (fp.roundToIntegral RNE (fp.sqrt RNE x9))) (fp.min (fp.sqrt RNE (fp.sub RNE x7 x7)) (fp.max (fp.roundToIntegral RNE x8) (fp.sub RNE x0 x3)))) (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.sub RNE x2 (fp.add RNE x0 x3)) (fp.add RNE x7 x5)) (fp.sqrt RNE (fp.sub RNE x0 x1))) (fp.sub RNE (fp.add RNE (fp.sub RNE x2 x4) (fp.sqrt RNE x4)) (fp.div RNE (fp.max x7 x5) (fp.div RNE x1 x9))))) (fp.neg (fp.div RNE (fp.sub RNE (fp.add RNE (fp.sub RNE x8 (fp.sqrt RNE x3)) (fp.div RNE x3 x2)) (fp.div RNE (fp.sub RNE x9 x4) (fp.roundToIntegral RNE x2))) (fp.abs (fp.sub RNE (fp.min x6 x8) (fp.mul RNE (fp.roundToIntegral RNE x4) (fp.sqrt RNE x5))))))))(check-sat)