;  time  = {'z3': 256.205, 'mathsat': 9.749070167541504}
;  terms = 98
;  score = 246.45592983245848
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.neg (fp.div RNE (fp.sqrt RNE (fp.abs x2)) (fp.add RNE (fp.add RNE x5 x2) (fp.add RNE x4 x7)))) (fp.add RNE (fp.roundToIntegral RNE (fp.max (fp.add RNE (fp.sqrt RNE x9) (fp.add RNE x7 x6)) (fp.roundToIntegral RNE (fp.sqrt RNE x6)))) (fp.add RNE (fp.div RNE (fp.add RNE (fp.neg x4) (fp.div RNE x5 x8)) (fp.roundToIntegral RNE (fp.sub RNE x2 x8))) (fp.min (fp.abs (fp.min x4 x7)) (fp.roundToIntegral RNE (fp.min x9 x4)))))) (fp.add RNE (fp.sub RNE (fp.add RNE (fp.max (fp.roundToIntegral RNE x6) (fp.mul RNE x5 x9)) (fp.neg (fp.add RNE x5 (fp.sqrt RNE x8)))) (fp.max (fp.mul RNE (fp.min x2 x1) (fp.sub RNE x1 x5)) (fp.roundToIntegral RNE (fp.add RNE x9 (fp.div RNE x0 x1))))) (fp.add RNE (fp.add RNE (fp.sub RNE (fp.min x6 x0) (fp.neg x5)) (fp.sub RNE (fp.add RNE x5 x3) (fp.add RNE x1 x1))) (fp.mul RNE (fp.sqrt RNE (fp.abs x0)) (fp.sqrt RNE (fp.add RNE x7 x2)))))))(check-sat)