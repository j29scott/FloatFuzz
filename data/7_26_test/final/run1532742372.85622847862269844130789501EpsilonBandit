;  time  = {'z3': 403.027, 'mathsat': 6.381457805633545}
;  terms = 80
;  score = 396.64554219436644
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNormal (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE (fp.add RNE (fp.div RNE x4 x1) (fp.max x7 x3))) (fp.mul RNE (fp.sub RNE (fp.sqrt RNE x2) (fp.add RNE x4 x4)) (fp.add RNE (fp.max x2 x9) (fp.roundToIntegral RNE (fp.add RNE x3 x4))))) (fp.add RNE (fp.mul RNE (fp.div RNE (fp.add RNE (fp.neg x3) (fp.mul RNE x2 x3)) (fp.mul RNE (fp.abs x0) (fp.div RNE x7 x3))) (fp.div RNE (fp.add RNE (fp.neg x9) (fp.mul RNE x4 x3)) (fp.add RNE (fp.add RNE x3 x1) (fp.add RNE x7 x3)))) (fp.div RNE (fp.add RNE (fp.neg (fp.roundToIntegral RNE x8)) (fp.add RNE (fp.div RNE x8 x6) (fp.roundToIntegral RNE x9))) (fp.add RNE (fp.add RNE (fp.min x6 x1) (fp.max x5 x3)) (fp.max (fp.min x5 x5) (fp.roundToIntegral RNE x6))))))))(check-sat)