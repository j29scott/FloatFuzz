;  time  = {'z3': 232.885, 'mathsat': 6.80096960067749}
;  terms = 165
;  score = 226.0840303993225
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.add RNE (fp.add RNE (fp.mul RNE (fp.add RNE x6 x5) (fp.mul RNE x8 x9)) (fp.add RNE (fp.min x2 x2) (fp.mul RNE x0 x5))) (fp.add RNE (fp.abs (fp.mul RNE x2 (fp.add RNE x4 x9))) (fp.min (fp.abs (fp.sub RNE x8 x9)) (fp.max (fp.min x8 x6) (fp.sub RNE x8 x1))))) (fp.min (fp.div RNE (fp.sub RNE (fp.div RNE (fp.sqrt RNE x2) (fp.add RNE x4 x4)) (fp.add RNE (fp.sub RNE x0 x6) (fp.abs x1))) (fp.abs (fp.div RNE (fp.sub RNE x1 x3) (fp.abs x4)))) (fp.sub RNE (fp.add RNE (fp.sqrt RNE (fp.mul RNE x2 x3)) (fp.roundToIntegral RNE (fp.abs x0))) (fp.sub RNE (fp.sub RNE (fp.max x8 x3) (fp.add RNE x0 x6)) (fp.roundToIntegral RNE (fp.min x2 x5)))))) (fp.mul RNE (fp.mul RNE (fp.add RNE (fp.max (fp.min x4 x3) (fp.sub RNE x4 x8)) (fp.mul RNE (fp.div RNE (fp.min x5 x2) (fp.add RNE x3 x9)) (fp.min (fp.min x4 x2) (fp.roundToIntegral RNE x2)))) (fp.add RNE (fp.roundToIntegral RNE (fp.add RNE (fp.mul RNE x7 x2) (fp.roundToIntegral RNE x6))) (fp.add RNE (fp.max (fp.max x3 x1) (fp.sqrt RNE x1)) (fp.mul RNE (fp.add RNE x6 x2) (fp.min x0 x5))))) (fp.add RNE (fp.add RNE (fp.min (fp.add RNE x7 x2) (fp.mul RNE x8 (fp.sub RNE x2 x8))) (fp.div RNE (fp.abs (fp.add RNE x2 x8)) (fp.sqrt RNE (fp.roundToIntegral RNE x6)))) (fp.min (fp.abs (fp.max (fp.sqrt RNE x0) (fp.add RNE x5 x1))) (fp.min (fp.sqrt RNE (fp.div RNE x6 x1)) (fp.mul RNE (fp.sub RNE x0 x1) (fp.sub RNE x1 x7))))))))(check-sat)