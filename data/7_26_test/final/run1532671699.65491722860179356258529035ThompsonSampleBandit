;  time  = {'mathsat': 70.84051728248596, 'z3': 449.851}
;  terms = 113
;  score = 379.01048271751404
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.min (fp.mul RNE (fp.add RNE (fp.add RNE x1 x7) (fp.add RNE x8 (fp.min x1 x1))) (fp.sqrt RNE (fp.add RNE x0 x2))) (fp.div RNE (fp.add RNE (fp.abs x8) (fp.add RNE (fp.abs x9) (fp.sqrt RNE x2))) (fp.sqrt RNE (fp.abs x2)))) (fp.add RNE (fp.max (fp.add RNE (fp.abs x2) (fp.div RNE (fp.sqrt RNE x5) (fp.neg x5))) (fp.add RNE (fp.mul RNE x1 x4) (fp.roundToIntegral RNE x0))) (fp.sqrt RNE (fp.min (fp.add RNE x9 x8) (fp.roundToIntegral RNE x6))))) (fp.min (fp.sub RNE (fp.max (fp.roundToIntegral RNE (fp.max x3 x4)) (fp.min (fp.mul RNE x7 x6) (fp.mul RNE x4 x8))) (fp.div RNE (fp.add RNE (fp.neg x2) (fp.neg (fp.max x1 x7))) (fp.sqrt RNE (fp.add RNE x7 x1)))) (fp.add RNE (fp.div RNE (fp.min (fp.sub RNE x2 x5) (fp.div RNE x0 x7)) (fp.min (fp.div RNE (fp.mul RNE x0 x4) (fp.div RNE x1 x2)) (fp.sub RNE (fp.add RNE x7 x9) (fp.neg x2)))) (fp.div RNE (fp.mul RNE (fp.add RNE x4 x6) (fp.add RNE x1 x7)) (fp.roundToIntegral RNE (fp.max x2 x4)))))))(check-sat)