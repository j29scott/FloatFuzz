;  time  = {'mathsat': 9.71208930015564, 'z3': 404.179}
;  terms = 76
;  score = 394.46691069984433
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.min (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.neg x0))) (fp.mul RNE (fp.max (fp.div RNE x3 x7) (fp.add RNE x3 x4)) (fp.max (fp.neg x0) (fp.max x3 x9)))) (fp.div RNE (fp.add RNE (fp.div RNE (fp.sub RNE x8 x9) (fp.mul RNE x4 x4)) (fp.max (fp.mul RNE x1 x3) (fp.sub RNE x5 x6))) (fp.add RNE (fp.add RNE (fp.neg x0) (fp.mul RNE (fp.sqrt RNE x5) (fp.add RNE x7 x5))) (fp.roundToIntegral RNE (fp.max x7 x2))))) (fp.roundToIntegral RNE (fp.div RNE (fp.min (fp.div RNE (fp.sub RNE x2 x0) (fp.div RNE x7 x0)) (fp.add RNE (fp.add RNE x4 x6) (fp.min x4 x1))) (fp.abs (fp.add RNE (fp.div RNE x4 x2) (fp.mul RNE x3 x2)))))))(check-sat)