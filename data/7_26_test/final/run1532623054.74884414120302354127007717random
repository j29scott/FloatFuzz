;  time  = {'mathsat': 68.82465863227844, 'z3': 415.237}
;  terms = 79
;  score = 346.4123413677216
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.min (fp.mul RNE (fp.sub RNE (fp.mul RNE x8 x3) (fp.div RNE x2 x6)) (fp.mul RNE (fp.roundToIntegral RNE x5) (fp.add RNE x3 x0))) (fp.div RNE (fp.div RNE (fp.sub RNE x9 x6) (fp.sqrt RNE (fp.sub RNE x9 x4))) (fp.add RNE (fp.sub RNE x0 x9) (fp.max x0 x6)))) (fp.neg (fp.max (fp.roundToIntegral RNE (fp.min x5 x6)) (fp.add RNE (fp.mul RNE x6 x3) (fp.mul RNE x5 x4))))) (fp.div RNE (fp.min (fp.add RNE (fp.div RNE (fp.add RNE x8 x5) (fp.neg x4)) (fp.sqrt RNE (fp.min x9 x6))) (fp.div RNE (fp.neg (fp.sqrt RNE x6)) (fp.sqrt RNE (fp.add RNE x1 x7)))) (fp.roundToIntegral RNE (fp.min (fp.div RNE (fp.neg x9) (fp.add RNE x6 x8)) (fp.sqrt RNE (fp.div RNE x5 x6)))))))(check-sat)