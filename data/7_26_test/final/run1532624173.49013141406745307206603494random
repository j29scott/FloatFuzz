;  time  = {'mathsat': 18.069876194000244, 'z3': 117.06}
;  terms = 56
;  score = 98.99012380599976
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.roundToIntegral RNE (fp.sqrt RNE (fp.div RNE (fp.div RNE (fp.sqrt RNE x2) (fp.div RNE x1 x0)) (fp.max (fp.roundToIntegral RNE x6) (fp.min x1 x3))))) (fp.min (fp.neg (fp.min (fp.mul RNE (fp.sqrt RNE x7) (fp.max (fp.add RNE x8 x1) (fp.mul RNE x3 x5))) (fp.roundToIntegral RNE (fp.min x6 x1)))) (fp.add RNE (fp.max (fp.div RNE (fp.add RNE x7 x3) (fp.div RNE x7 x4)) (fp.sub RNE (fp.sqrt RNE x8) (fp.min x5 x8))) (fp.sub RNE (fp.neg (fp.sub RNE x1 x6)) (fp.roundToIntegral RNE (fp.neg x3)))))))(check-sat)