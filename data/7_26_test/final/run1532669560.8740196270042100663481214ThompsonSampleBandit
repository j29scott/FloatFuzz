;  time  = {'mathsat': 6.133548974990845, 'z3': 315.47}
;  terms = 95
;  score = 309.3364510250092
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNaN (fp.div RNE (fp.div RNE (fp.div RNE (fp.sub RNE (fp.mul RNE x5 (fp.div RNE x5 x3)) (fp.add RNE (fp.div RNE x1 x1) (fp.div RNE x3 x7))) (fp.mul RNE (fp.mul RNE x3 (fp.div RNE x0 x8)) (fp.sub RNE x9 x9))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x0 x4) (fp.mul RNE x8 (fp.sub RNE x4 x3))) (fp.min (fp.mul RNE x8 (fp.mul RNE x8 x9)) (fp.mul RNE x4 x6)))) (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.div RNE x0 (fp.div RNE x6 x9)) (fp.sub RNE x9 (fp.abs x8))) (fp.div RNE (fp.div RNE (fp.div RNE x0 x7) (fp.add RNE x0 x5)) (fp.add RNE (fp.div RNE x2 x2) (fp.sub RNE x6 x2)))) (fp.sub RNE (fp.sub RNE (fp.mul RNE x9 x9) (fp.mul RNE x7 x8)) (fp.add RNE (fp.mul RNE (fp.mul RNE x4 x5) (fp.div RNE x4 x4)) (fp.sub RNE (fp.div RNE x6 x9) (fp.sub RNE x9 x2))))))))(check-sat)