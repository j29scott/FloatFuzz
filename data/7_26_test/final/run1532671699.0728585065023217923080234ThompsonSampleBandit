;  time  = {'mathsat': 6.745419263839722, 'z3': 478.622}
;  terms = 81
;  score = 471.8765807361603
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.div RNE (fp.max (fp.add RNE (fp.add RNE (fp.sqrt RNE x9) (fp.div RNE x1 (fp.neg x5))) (fp.div RNE (fp.sqrt RNE x2) (fp.neg (fp.div RNE x0 x2)))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE x3) (fp.mul RNE (fp.abs x4) (fp.add RNE x4 x3))) (fp.sub RNE (fp.sqrt RNE (fp.neg x2)) (fp.div RNE (fp.sqrt RNE x7) (fp.sub RNE x6 x0))))) (fp.div RNE (fp.mul RNE (fp.sqrt RNE (fp.div RNE x6 (fp.sqrt RNE x0))) (fp.mul RNE (fp.min (fp.abs x6) (fp.div RNE x7 x0)) (fp.div RNE (fp.max x5 x5) (fp.div RNE x6 x1)))) (fp.mul RNE (fp.max (fp.div RNE (fp.div RNE x7 x6) (fp.mul RNE x7 x5)) (fp.sub RNE (fp.div RNE x8 x7) (fp.roundToIntegral RNE x3))) (fp.neg (fp.div RNE (fp.neg x1) (fp.max x3 x5))))))))(check-sat)