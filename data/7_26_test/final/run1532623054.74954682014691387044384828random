;  time  = {'mathsat': 2.96549391746521, 'z3': 127.924}
;  terms = 69
;  score = 124.9585060825348
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.mul RNE (fp.mul RNE (fp.max (fp.mul RNE x0 x7) (fp.max x0 x0)) (fp.div RNE (fp.min x2 x5) (fp.mul RNE x9 (fp.div RNE x9 x0)))) (fp.min (fp.sub RNE (fp.max (fp.sqrt RNE x3) (fp.roundToIntegral RNE x5)) (fp.roundToIntegral RNE (fp.sqrt RNE x2))) (fp.mul RNE (fp.add RNE (fp.div RNE x5 x7) (fp.max x8 x5)) (fp.neg (fp.max x4 x5))))) (fp.sqrt RNE (fp.add RNE (fp.abs (fp.max x6 x3)) (fp.sqrt RNE (fp.div RNE x8 (fp.roundToIntegral RNE x6)))))) (fp.abs (fp.roundToIntegral RNE (fp.mul RNE (fp.add RNE (fp.sqrt RNE x8) (fp.sqrt RNE x2)) (fp.sub RNE (fp.max x5 (fp.sub RNE x4 x0)) (fp.abs x4)))))))(check-sat)