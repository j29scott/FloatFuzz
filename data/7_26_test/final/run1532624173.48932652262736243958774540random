;  time  = {'mathsat': 2.4264397621154785, 'z3': 254.789}
;  terms = 84
;  score = 252.3625602378845
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.min (fp.div RNE (fp.abs (fp.max (fp.neg x8) (fp.max x5 x0))) (fp.min (fp.abs (fp.sub RNE x9 x7)) (fp.div RNE (fp.abs x6) (fp.sqrt RNE x1)))) (fp.sqrt RNE (fp.min (fp.max (fp.sub RNE x1 x7) (fp.roundToIntegral RNE x2)) (fp.min (fp.neg x8) (fp.min x1 x8))))) (fp.min (fp.add RNE (fp.mul RNE (fp.add RNE (fp.div RNE x2 x7) (fp.roundToIntegral RNE x1)) (fp.mul RNE (fp.abs x1) (fp.neg x2))) (fp.max (fp.min (fp.add RNE x9 x5) (fp.sqrt RNE x5)) (fp.div RNE (fp.add RNE x8 x7) (fp.sub RNE x3 x9)))) (fp.roundToIntegral RNE (fp.sub RNE (fp.div RNE (fp.div RNE x4 x7) (fp.add RNE x0 x5)) (fp.mul RNE (fp.div RNE (fp.sqrt RNE x8) (fp.sqrt RNE x1)) (fp.sub RNE (fp.mul RNE x3 x3) (fp.min x3 x9))))))))(check-sat)