;  time  = {'mathsat': 2.704120635986328, 'z3': 219.658}
;  terms = 65
;  score = 216.95387936401366
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.mul RNE (fp.mul RNE (fp.sub RNE (fp.sub RNE (fp.neg x1) (fp.div RNE x7 x4)) (fp.mul RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x2)) (fp.roundToIntegral RNE (fp.div RNE x4 x0)))) (fp.neg (fp.sqrt RNE (fp.abs (fp.div RNE x1 x6))))) (fp.min (fp.sub RNE (fp.add RNE (fp.mul RNE x4 x9) (fp.roundToIntegral RNE (fp.mul RNE x7 x5))) (fp.min (fp.sqrt RNE x6) (fp.sqrt RNE x3))) (fp.neg (fp.roundToIntegral RNE (fp.abs x5))))) (fp.neg (fp.abs (fp.min (fp.sub RNE (fp.sub RNE x3 x5) (fp.add RNE x4 x5)) (fp.mul RNE (fp.div RNE (fp.min x3 x1) (fp.abs x3)) (fp.add RNE (fp.sqrt RNE x4) (fp.abs x2))))))))(check-sat)