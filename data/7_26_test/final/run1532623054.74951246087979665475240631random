;  time  = {'z3': 153.771, 'mathsat': 2.7486977577209473}
;  terms = 68
;  score = 151.02230224227904
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.abs (fp.roundToIntegral RNE (fp.max (fp.add RNE (fp.add RNE x5 x2) (fp.roundToIntegral RNE x2)) (fp.add RNE (fp.mul RNE x7 x8) (fp.div RNE x8 x3))))) (fp.mul RNE (fp.max (fp.add RNE (fp.neg (fp.sqrt RNE x0)) (fp.sub RNE (fp.add RNE x2 x8) (fp.div RNE x5 x9))) (fp.roundToIntegral RNE (fp.mul RNE (fp.max (fp.div RNE x3 x5) (fp.min x9 x0)) (fp.sub RNE (fp.sub RNE x9 x5) (fp.div RNE x4 x9))))) (fp.sqrt RNE (fp.sub RNE (fp.sub RNE (fp.min x3 x4) (fp.neg x6)) (fp.mul RNE (fp.add RNE (fp.add RNE x1 x2) (fp.sub RNE x6 x1)) (fp.min (fp.div RNE x0 x4) (fp.abs x7))))))))(check-sat)