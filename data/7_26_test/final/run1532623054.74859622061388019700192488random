;  time  = {'mathsat': 5.956916332244873, 'z3': 180.871}
;  terms = 72
;  score = 174.91408366775514
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.roundToIntegral RNE (fp.sqrt RNE (fp.min (fp.max x6 x4) (fp.sub RNE x8 x4)))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.div RNE (fp.add RNE x4 x2) (fp.max (fp.sub RNE x8 x0) (fp.roundToIntegral RNE x3)))))) (fp.div RNE (fp.sub RNE (fp.min (fp.div RNE (fp.roundToIntegral RNE x9) (fp.max x4 x0)) (fp.sub RNE (fp.max x8 x2) (fp.mul RNE x4 x9))) (fp.neg (fp.roundToIntegral RNE (fp.mul RNE x0 (fp.div RNE x0 x8))))) (fp.div RNE (fp.neg (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.min x5 x8)))) (fp.add RNE (fp.add RNE (fp.mul RNE (fp.min x8 x3) (fp.sub RNE x6 x7)) (fp.abs (fp.roundToIntegral RNE x0))) (fp.abs (fp.add RNE (fp.sub RNE x9 x8) (fp.abs x0))))))))(check-sat)