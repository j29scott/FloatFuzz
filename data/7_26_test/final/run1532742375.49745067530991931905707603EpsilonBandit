;  time  = {'mathsat': 2.1077957153320312, 'z3': 256.269}
;  terms = 55
;  score = 254.16120428466797
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNormal (fp.div RNE (fp.div RNE (fp.div RNE (fp.add RNE (fp.neg x3) (fp.neg x0)) (fp.add RNE (fp.abs x6) (fp.add RNE (fp.sqrt RNE x7) (fp.add RNE x0 x2)))) (fp.sub RNE (fp.max (fp.sqrt RNE x9) (fp.add RNE x6 (fp.mul RNE x7 x6))) (fp.add RNE (fp.div RNE x5 x6) (fp.add RNE x3 (fp.sub RNE x0 x1))))) (fp.min (fp.div RNE (fp.sqrt RNE (fp.add RNE x2 x9)) (fp.add RNE (fp.sub RNE x5 x4) (fp.add RNE x3 x1))) (fp.abs (fp.sub RNE (fp.sqrt RNE x1) (fp.neg x2)))))))(check-sat)