;  time  = {'z3': 310.523, 'mathsat': 9.058734655380249}
;  terms = 160
;  score = 301.4642653446198
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.add RNE (fp.add RNE (fp.neg (fp.add RNE x6 x3)) (fp.add RNE (fp.max x8 x3) (fp.max (fp.mul RNE x8 x8) (fp.sub RNE x3 x0)))) (fp.add RNE (fp.min (fp.neg x7) (fp.add RNE x8 (fp.roundToIntegral RNE x7))) (fp.add RNE (fp.abs (fp.mul RNE x5 x7)) (fp.add RNE (fp.add RNE x6 x6) (fp.add RNE x1 x6))))) (fp.add RNE (fp.sub RNE (fp.mul RNE (fp.add RNE x9 x7) (fp.div RNE x3 x2)) (fp.sub RNE (fp.add RNE x5 x4) (fp.add RNE x8 x6))) (fp.add RNE (fp.min (fp.add RNE x6 (fp.add RNE x5 x1)) (fp.abs x1)) (fp.min (fp.add RNE (fp.div RNE x1 x0) (fp.abs x6)) (fp.mul RNE (fp.neg x6) (fp.sqrt RNE x6)))))) (fp.add RNE (fp.add RNE (fp.abs (fp.add RNE (fp.add RNE x3 x8) (fp.roundToIntegral RNE (fp.mul RNE x1 x6)))) (fp.add RNE (fp.add RNE (fp.sub RNE x9 x4) (fp.min x2 x3)) (fp.add RNE (fp.sqrt RNE (fp.abs x1)) (fp.div RNE (fp.roundToIntegral RNE x8) (fp.mul RNE x4 x3))))) (fp.add RNE (fp.max (fp.mul RNE (fp.mul RNE (fp.max x4 x9) (fp.abs x6)) (fp.add RNE (fp.max x1 x8) (fp.min x5 x3))) (fp.sub RNE (fp.add RNE (fp.neg x9) (fp.sqrt RNE x7)) (fp.div RNE (fp.sqrt RNE x3) (fp.add RNE x4 x2)))) (fp.div RNE (fp.div RNE (fp.div RNE (fp.add RNE x4 x8) (fp.mul RNE x6 x4)) (fp.neg (fp.mul RNE x6 x1))) (fp.sub RNE (fp.max (fp.sub RNE x3 x6) (fp.add RNE x0 x1)) (fp.add RNE (fp.sqrt RNE x5) (fp.mul RNE x2 x2))))))))(check-sat)