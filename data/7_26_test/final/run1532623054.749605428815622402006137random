;  time  = {'z3': 199.475, 'mathsat': 10.955780506134033}
;  terms = 79
;  score = 188.51921949386596
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.sub RNE (fp.div RNE (fp.add RNE (fp.mul RNE (fp.abs x9) (fp.sqrt RNE x3)) (fp.div RNE (fp.add RNE x0 x1) (fp.mul RNE x3 x0))) (fp.mul RNE (fp.add RNE (fp.mul RNE x0 x9) (fp.abs x1)) (fp.sub RNE (fp.div RNE x0 x8) (fp.mul RNE x4 x4)))) (fp.neg (fp.sqrt RNE (fp.min (fp.mul RNE x2 x8) (fp.min x3 x3))))) (fp.add RNE (fp.mul RNE (fp.abs (fp.sub RNE (fp.min x9 x2) (fp.max x3 x5))) (fp.abs (fp.abs (fp.sqrt RNE x7)))) (fp.mul RNE (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.abs x7)) (fp.neg (fp.max x3 x2))) (fp.sub RNE (fp.div RNE (fp.add RNE x9 x8) (fp.roundToIntegral RNE x9)) (fp.roundToIntegral RNE (fp.mul RNE x7 x4)))) (fp.abs (fp.neg (fp.roundToIntegral RNE (fp.roundToIntegral RNE x7))))))))(check-sat)