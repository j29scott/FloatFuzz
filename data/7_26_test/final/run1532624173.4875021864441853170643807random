;  time  = {'mathsat': 1.7160329818725586, 'z3': 260.273}
;  terms = 71
;  score = 258.55696701812747
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sqrt RNE (fp.max (fp.roundToIntegral RNE (fp.add RNE (fp.min x3 x1) (fp.abs x5))) (fp.roundToIntegral RNE (fp.max (fp.div RNE x0 x1) (fp.abs x7))))) (fp.div RNE (fp.max (fp.sub RNE (fp.add RNE (fp.abs x9) (fp.add RNE x9 x8)) (fp.min (fp.mul RNE x4 x4) (fp.sub RNE x5 x0))) (fp.roundToIntegral RNE (fp.max (fp.roundToIntegral RNE x3) (fp.add RNE x1 x8)))) (fp.mul RNE (fp.add RNE (fp.add RNE (fp.min x5 x1) (fp.sub RNE x0 x7)) (fp.sub RNE (fp.sqrt RNE (fp.abs x0)) (fp.div RNE (fp.roundToIntegral RNE x3) (fp.max x0 x4)))) (fp.max (fp.mul RNE (fp.sub RNE x5 x6) (fp.add RNE x2 x3)) (fp.sqrt RNE (fp.mul RNE x9 x2)))))))(check-sat)