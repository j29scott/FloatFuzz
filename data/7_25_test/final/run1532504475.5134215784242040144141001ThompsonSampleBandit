;  time  = {'mathsat': 128.84550428390503, 'z3': 103.11}
;  terms = 94
;  score = 25.73550428390503
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.min (fp.sub RNE (fp.div RNE (fp.max (fp.sqrt RNE x7) (fp.max x4 x0)) (fp.abs (fp.mul RNE x5 x7))) (fp.abs (fp.neg (fp.div RNE x0 x1)))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.sub RNE x5 x6) (fp.mul RNE x6 x6)) (fp.div RNE (fp.sub RNE x2 x7) (fp.neg x6))) (fp.min (fp.abs (fp.mul RNE x7 x5)) (fp.max (fp.roundToIntegral RNE x0) (fp.sub RNE x3 x9))))) (fp.mul RNE (fp.min (fp.sub RNE (fp.neg (fp.sub RNE x3 x8)) (fp.min (fp.roundToIntegral RNE x8) (fp.abs x6))) (fp.sub RNE (fp.max (fp.min x3 x0) (fp.sub RNE x5 x7)) (fp.min (fp.neg x8) (fp.roundToIntegral RNE x9)))) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.div RNE x6 x3) (fp.add RNE x7 x1)) (fp.sub RNE (fp.max x5 x3) (fp.min x9 x6))) (fp.sqrt RNE (fp.sub RNE (fp.add RNE x4 x0) (fp.sub RNE x9 x8)))))))(check-sat)