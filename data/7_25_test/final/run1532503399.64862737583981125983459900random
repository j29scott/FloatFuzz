;  time  = {'mathsat': 3.1494317054748535, 'z3': 1.591}
;  terms = 70
;  score = 1.5584317054748535
;  stdout= {'mathsat': 'unsat', 'z3': 'unsat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.min (fp.sqrt RNE (fp.roundToIntegral RNE (fp.abs (fp.max x0 x5)))) (fp.abs (fp.mul RNE (fp.mul RNE (fp.sub RNE (fp.min x0 x4) (fp.max x7 x2)) (fp.neg (fp.mul RNE x3 x4))) (fp.min (fp.mul RNE (fp.add RNE x2 x5) (fp.div RNE x5 x9)) (fp.sqrt RNE (fp.mul RNE x4 x7)))))) (fp.sub RNE (fp.abs (fp.max (fp.neg (fp.div RNE x3 x0)) (fp.max (fp.mul RNE (fp.div RNE x5 x4) (fp.roundToIntegral RNE x4)) (fp.roundToIntegral RNE (fp.div RNE x7 x5))))) (fp.abs (fp.add RNE (fp.roundToIntegral RNE (fp.div RNE x4 (fp.sub RNE x0 x0))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE x0) (fp.div RNE x4 x1)) (fp.neg (fp.roundToIntegral RNE x2))))))))(check-sat)