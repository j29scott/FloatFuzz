;  time  = {'mathsat': 31.883808135986328, 'z3': 29.413}
;  terms = 86
;  score = 2.470808135986328
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.mul RNE (fp.max (fp.sqrt RNE (fp.div RNE x8 x1)) (fp.min (fp.min x1 x3) (fp.neg x6))) (fp.max (fp.sub RNE (fp.mul RNE x5 x3) (fp.max x7 x6)) (fp.mul RNE (fp.roundToIntegral RNE x7) (fp.min x2 x7)))) (fp.roundToIntegral RNE (fp.mul RNE (fp.min (fp.mul RNE x0 x6) (fp.mul RNE x2 x4)) (fp.add RNE (fp.min x1 x9) (fp.add RNE x3 x5))))) (fp.sub RNE (fp.sub RNE (fp.div RNE (fp.neg (fp.max x1 x6)) (fp.abs (fp.sub RNE x6 x3))) (fp.add RNE (fp.neg (fp.min x1 x6)) (fp.max (fp.sub RNE x9 x8) (fp.min x9 x2)))) (fp.mul RNE (fp.add RNE (fp.roundToIntegral RNE (fp.sub RNE x3 x3)) (fp.min (fp.mul RNE x6 x6) (fp.neg x4))) (fp.sqrt RNE (fp.div RNE (fp.neg x6) (fp.sub RNE x4 x6)))))))(check-sat)