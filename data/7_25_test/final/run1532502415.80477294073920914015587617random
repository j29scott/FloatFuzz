;  time  = {'z3': 5.088, 'mathsat': 2.153125047683716}
;  terms = 80
;  score = -2.9348749523162843
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.mul RNE (fp.max (fp.sub RNE (fp.add RNE x3 x0) (fp.min x7 x5)) (fp.sub RNE (fp.add RNE x4 x0) (fp.div RNE x6 x7))) (fp.mul RNE (fp.abs (fp.max x8 x4)) (fp.min (fp.abs x7) (fp.div RNE x5 x2)))) (fp.mul RNE (fp.min (fp.neg (fp.add RNE x7 x8)) (fp.add RNE (fp.sqrt RNE x7) (fp.div RNE x8 x8))) (fp.neg (fp.roundToIntegral RNE (fp.mul RNE x1 x6))))) (fp.max (fp.max (fp.neg (fp.sub RNE (fp.max x2 x3) (fp.min x1 x5))) (fp.sub RNE (fp.abs (fp.sub RNE x8 x6)) (fp.mul RNE (fp.sqrt RNE x4) (fp.mul RNE x3 x3)))) (fp.roundToIntegral RNE (fp.min (fp.neg (fp.max x4 x2)) (fp.div RNE (fp.add RNE x2 x5) (fp.add RNE x9 x5)))))))(check-sat)