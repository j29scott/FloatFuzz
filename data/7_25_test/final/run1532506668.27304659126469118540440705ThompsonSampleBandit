;  time  = {'z3': 22.128, 'mathsat': 274.0159721374512}
;  terms = 72
;  score = 251.8879721374512
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.max (fp.abs (fp.min (fp.sqrt RNE x8) (fp.div RNE x9 x8))) (fp.max (fp.mul RNE (fp.min x8 x0) (fp.abs x6)) (fp.sub RNE (fp.sqrt RNE x5) (fp.abs x0)))) (fp.mul RNE (fp.abs (fp.min (fp.max x9 x0) (fp.div RNE x2 x2))) (fp.sub RNE (fp.div RNE (fp.neg x1) (fp.abs x7)) (fp.sub RNE (fp.max x8 x0) (fp.min x9 x0))))) (fp.mul RNE (fp.max (fp.max (fp.min (fp.neg x2) (fp.min x0 x7)) (fp.abs (fp.sqrt RNE x8))) (fp.roundToIntegral RNE (fp.sub RNE (fp.max x1 x6) (fp.roundToIntegral RNE x3)))) (fp.sqrt RNE (fp.abs (fp.div RNE (fp.min x3 x8) (fp.max x1 x7)))))))(check-sat)