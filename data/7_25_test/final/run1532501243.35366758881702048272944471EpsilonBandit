;  time  = {'z3': 129.854, 'mathsat': 279.1658253669739}
;  terms = 70
;  score = 149.31182536697386
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.sqrt RNE (fp.sub RNE (fp.max (fp.mul RNE x7 x4) (fp.roundToIntegral RNE x2)) (fp.max (fp.neg x4) (fp.sub RNE x1 x1)))) (fp.max (fp.sqrt RNE (fp.mul RNE (fp.max x2 x3) (fp.roundToIntegral RNE x0))) (fp.min (fp.abs (fp.neg x9)) (fp.div RNE (fp.sqrt RNE x2) (fp.mul RNE x9 x9))))) (fp.add RNE (fp.sub RNE (fp.min (fp.sub RNE (fp.roundToIntegral RNE x6) (fp.abs x8)) (fp.div RNE (fp.neg x9) (fp.abs x6))) (fp.sqrt RNE (fp.sqrt RNE (fp.min x6 x9)))) (fp.min (fp.sub RNE (fp.abs (fp.min x3 x0)) (fp.sqrt RNE (fp.div RNE x3 x1))) (fp.sqrt RNE (fp.min (fp.max x4 x0) (fp.div RNE x2 x2)))))))(check-sat)