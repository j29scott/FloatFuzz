;  time  = {'mathsat': 20.63674235343933, 'z3': 19.385}
;  terms = 93
;  score = 1.2517423534393295
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.roundToIntegral RNE (fp.min (fp.add RNE (fp.abs x2) (fp.div RNE x3 x6)) (fp.div RNE (fp.sub RNE x1 x2) (fp.min x3 x0)))) (fp.mul RNE (fp.mul RNE (fp.div RNE (fp.abs x1) (fp.max x3 x0)) (fp.max (fp.mul RNE x0 (fp.add RNE x2 x8)) (fp.max x8 x7))) (fp.abs (fp.neg (fp.add RNE (fp.max x7 x2) (fp.max x9 x2)))))) (fp.div RNE (fp.min (fp.max (fp.min (fp.min x7 x6) (fp.abs x1)) (fp.abs (fp.abs x9))) (fp.max (fp.max (fp.min x5 x3) (fp.abs x8)) (fp.sqrt RNE (fp.min x6 x1)))) (fp.mul RNE (fp.mul RNE (fp.max (fp.add RNE x9 x3) (fp.neg x9)) (fp.neg (fp.sub RNE x1 x8))) (fp.add RNE (fp.min (fp.max x3 (fp.neg x7)) (fp.add RNE x0 x1)) (fp.max (fp.sqrt RNE x9) (fp.add RNE x9 x5)))))))(check-sat)