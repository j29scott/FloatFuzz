;  time  = {'mathsat': 1.533050298690796, 'z3': 1.089}
;  terms = 68
;  score = 0.44405029869079593
;  stdout= {'mathsat': 'unsat', 'z3': 'unsat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.div RNE (fp.add RNE (fp.mul RNE (fp.max x3 x3) (fp.min x9 x9)) (fp.div RNE (fp.add RNE x9 x3) (fp.add RNE x4 x1))) (fp.max (fp.min (fp.abs x0) (fp.sub RNE x8 x9)) (fp.abs (fp.roundToIntegral RNE x7)))) (fp.neg (fp.sub RNE (fp.neg (fp.neg x9)) (fp.div RNE (fp.abs x3) (fp.add RNE x1 x6))))) (fp.sub RNE (fp.mul RNE (fp.sub RNE (fp.roundToIntegral RNE (fp.sqrt RNE x2)) (fp.add RNE (fp.min x2 x9) (fp.min x1 x6))) (fp.neg (fp.sqrt RNE (fp.sqrt RNE x5)))) (fp.neg (fp.mul RNE (fp.mul RNE (fp.min x8 x3) (fp.sub RNE x6 x4)) (fp.sqrt RNE (fp.neg x5)))))))(check-sat)