;  time  = {'z3': 25.874, 'mathsat': 32.09171724319458}
;  terms = 70
;  score = 6.217717243194581
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.add RNE (fp.max (fp.neg (fp.mul RNE (fp.add RNE x8 x7) (fp.min x8 x7))) (fp.add RNE (fp.max (fp.roundToIntegral RNE x4) (fp.add RNE x7 x0)) (fp.roundToIntegral RNE (fp.div RNE x4 x2)))) (fp.abs (fp.add RNE (fp.add RNE (fp.max x5 x1) (fp.min x1 x2)) (fp.div RNE (fp.sqrt RNE x7) (fp.sub RNE x1 x0))))) (fp.add RNE (fp.neg (fp.div RNE (fp.roundToIntegral RNE (fp.div RNE x9 x9)) (fp.mul RNE (fp.mul RNE x0 x9) (fp.min x9 x8)))) (fp.max (fp.abs (fp.roundToIntegral RNE (fp.div RNE x0 x4))) (fp.sub RNE (fp.add RNE (fp.sqrt RNE x5) (fp.roundToIntegral RNE x3)) (fp.sub RNE (fp.div RNE x0 x1) (fp.min x3 x5)))))))(check-sat)