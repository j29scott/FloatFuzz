;  time  = {'mathsat': 210.5436553955078, 'z3': 177.423}
;  terms = 79
;  score = 33.12065539550781
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.min (fp.neg (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE x9) (fp.sub RNE x8 x3)) (fp.sub RNE (fp.min x0 x9) (fp.abs x7)))) (fp.add RNE (fp.div RNE (fp.min (fp.mul RNE x7 x5) (fp.sub RNE x8 x6)) (fp.min (fp.div RNE x6 x6) (fp.div RNE x7 x0))) (fp.min (fp.neg (fp.neg x1)) (fp.add RNE (fp.mul RNE x7 x1) (fp.sqrt RNE x5))))) (fp.max (fp.add RNE (fp.max (fp.mul RNE (fp.sqrt RNE x2) (fp.neg x9)) (fp.neg (fp.neg x0))) (fp.max (fp.max (fp.max x1 x3) (fp.div RNE x4 x2)) (fp.mul RNE (fp.sub RNE x1 x7) (fp.div RNE x6 x2)))) (fp.abs (fp.div RNE (fp.sqrt RNE (fp.neg x6)) (fp.sub RNE (fp.add RNE x1 x9) (fp.roundToIntegral RNE x5)))))))(check-sat)