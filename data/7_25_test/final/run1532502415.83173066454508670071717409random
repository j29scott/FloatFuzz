;  time  = {'mathsat': 27.870654582977295, 'z3': 26.631}
;  terms = 72
;  score = 1.2396545829772947
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.max (fp.add RNE (fp.add RNE (fp.min (fp.abs x4) (fp.add RNE x1 x0)) (fp.sub RNE (fp.div RNE x7 x9) (fp.mul RNE x3 x0))) (fp.abs (fp.max (fp.abs x2) (fp.add RNE x3 x6)))) (fp.max (fp.sqrt RNE (fp.min (fp.neg x6) (fp.mul RNE x6 x9))) (fp.roundToIntegral RNE (fp.min (fp.roundToIntegral RNE x4) (fp.max x2 x7))))) (fp.mul RNE (fp.sub RNE (fp.div RNE (fp.neg (fp.mul RNE x7 x6)) (fp.div RNE (fp.roundToIntegral RNE x0) (fp.roundToIntegral RNE (fp.sqrt RNE x1)))) (fp.sqrt RNE (fp.sub RNE (fp.max x4 x6) (fp.div RNE x4 x1)))) (fp.neg (fp.sub RNE (fp.min (fp.add RNE x1 x9) (fp.add RNE x2 x6)) (fp.roundToIntegral RNE (fp.abs x3)))))))(check-sat)