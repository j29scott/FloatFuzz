;  time  = {'z3': 57.537, 'mathsat': 71.003347158432}
;  terms = 75
;  score = 13.466347158432008
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.div RNE (fp.neg (fp.sqrt RNE (fp.mul RNE (fp.neg x1) (fp.add RNE x1 x7)))) (fp.sub RNE (fp.min (fp.max (fp.roundToIntegral RNE x6) (fp.roundToIntegral RNE x7)) (fp.roundToIntegral RNE (fp.div RNE x2 x5))) (fp.sqrt RNE (fp.add RNE (fp.abs x6) (fp.max x5 x4))))) (fp.min (fp.mul RNE (fp.add RNE (fp.sub RNE (fp.sub RNE x6 x4) (fp.abs x5)) (fp.abs (fp.roundToIntegral RNE x2))) (fp.abs (fp.sub RNE (fp.abs x2) (fp.sqrt RNE x0)))) (fp.add RNE (fp.mul RNE (fp.add RNE (fp.sub RNE x2 (fp.min x7 x6)) (fp.min x4 x5)) (fp.neg (fp.abs x7))) (fp.add RNE (fp.max (fp.div RNE x6 x8) (fp.min x8 x9)) (fp.mul RNE (fp.add RNE x1 x9) (fp.add RNE x5 x6)))))))(check-sat)