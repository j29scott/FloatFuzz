;  time  = {'mathsat': 83.80353808403015, 'z3': 66.44}
;  terms = 49
;  score = 17.363538084030154
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.mul RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.neg (fp.sub RNE x9 x5)))) (fp.div RNE (fp.add RNE (fp.max (fp.mul RNE x7 x6) (fp.roundToIntegral RNE x3)) (fp.neg (fp.sqrt RNE x4))) (fp.sub RNE (fp.mul RNE (fp.div RNE x0 x7) (fp.div RNE x4 x0)) (fp.add RNE (fp.roundToIntegral RNE x4) (fp.div RNE x8 x2))))) (fp.div RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.div RNE (fp.neg x9) (fp.neg x5)))) (fp.neg (fp.sqrt RNE (fp.min (fp.mul RNE x6 x0) (fp.roundToIntegral RNE x5)))))))(check-sat)