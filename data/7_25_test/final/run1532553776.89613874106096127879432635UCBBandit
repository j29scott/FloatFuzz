;  time  = {'mathsat': 54.67257833480835, 'z3': 27.836}
;  terms = 55
;  score = 26.83657833480835
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.abs (fp.max (fp.add RNE (fp.abs (fp.sub RNE x6 x2)) (fp.sqrt RNE (fp.sub RNE x9 x5))) (fp.mul RNE (fp.sub RNE (fp.add RNE x8 x2) (fp.abs x9)) (fp.roundToIntegral RNE (fp.sqrt RNE x1))))) (fp.max (fp.abs (fp.abs (fp.roundToIntegral RNE (fp.max x7 x8)))) (fp.sub RNE (fp.div RNE (fp.div RNE (fp.max x9 x1) (fp.add RNE x0 x5)) (fp.abs (fp.max x4 x2))) (fp.add RNE (fp.div RNE (fp.sub RNE x8 x1) (fp.neg x8)) (fp.min (fp.abs x3) (fp.min x1 x3)))))))(check-sat)