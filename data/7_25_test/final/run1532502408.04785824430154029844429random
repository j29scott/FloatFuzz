;  time  = {'mathsat': 3.8232123851776123, 'z3': 2.052}
;  terms = 80
;  score = 1.7712123851776123
;  stdout= {'mathsat': 'unsat', 'z3': 'unsat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.min (fp.add RNE (fp.abs (fp.mul RNE x2 x8)) (fp.min (fp.add RNE x0 (fp.min x3 x2)) (fp.sub RNE x1 (fp.sub RNE x2 x1)))) (fp.max (fp.div RNE (fp.min (fp.neg x4) (fp.roundToIntegral RNE x7)) (fp.abs (fp.sqrt RNE x2))) (fp.min (fp.div RNE (fp.max x1 x2) (fp.abs x7)) (fp.mul RNE (fp.min x6 x9) (fp.div RNE x7 x8))))) (fp.sub RNE (fp.roundToIntegral RNE (fp.div RNE (fp.sub RNE (fp.sqrt RNE x2) (fp.mul RNE x8 x8)) (fp.div RNE (fp.mul RNE x7 x6) (fp.sqrt RNE x8)))) (fp.sqrt RNE (fp.mul RNE (fp.div RNE (fp.max x5 x4) (fp.sqrt RNE x3)) (fp.div RNE (fp.div RNE x1 x4) (fp.sub RNE x2 x9)))))) (fp.abs (fp.sqrt RNE (fp.neg (fp.abs (fp.min x6 x1)))))))(check-sat)