;  time  = {'z3': 0.144, 'mathsat': 1.0975656509399414}
;  terms = 66
;  score = 0.9535656509399414
;  stdout= {'z3': 'unsat\n', 'mathsat': 'unsat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.mul RNE (fp.sub RNE (fp.min (fp.neg (fp.mul RNE x2 x2)) (fp.abs (fp.sqrt RNE x4))) (fp.sub RNE (fp.roundToIntegral RNE (fp.sub RNE x9 x9)) (fp.roundToIntegral RNE (fp.abs x4)))) (fp.add RNE (fp.sqrt RNE (fp.neg (fp.abs x7))) (fp.min (fp.div RNE (fp.sqrt RNE x3) (fp.sub RNE x6 x7)) (fp.max (fp.abs x6) (fp.abs x4))))) (fp.sub RNE (fp.sub RNE (fp.add RNE (fp.sqrt RNE (fp.add RNE x1 x2)) (fp.sqrt RNE (fp.add RNE x3 x2))) (fp.abs (fp.abs (fp.sub RNE x9 x2)))) (fp.roundToIntegral RNE (fp.max (fp.min (fp.roundToIntegral RNE x0) (fp.min x6 x4)) (fp.min (fp.mul RNE x1 x4) (fp.neg x4)))))))(check-sat)