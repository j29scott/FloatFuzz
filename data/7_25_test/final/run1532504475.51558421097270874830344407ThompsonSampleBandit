;  time  = {'z3': 0.142, 'mathsat': 2.279085397720337}
;  terms = 57
;  score = 2.137085397720337
;  stdout= {'z3': 'unsat\n', 'mathsat': 'unsat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.lt (fp.sqrt RNE (fp.roundToIntegral RNE (fp.max (fp.div RNE (fp.min x6 x5) (fp.abs x2)) (fp.abs (fp.roundToIntegral RNE x0))))) (fp.div RNE (fp.div RNE (fp.mul RNE (fp.abs (fp.mul RNE x5 x9)) (fp.max (fp.neg x3) (fp.sqrt RNE x8))) (fp.sqrt RNE (fp.neg (fp.abs x2)))) (fp.add RNE (fp.max (fp.div RNE (fp.sqrt RNE x1) (fp.neg x1)) (fp.add RNE (fp.max x5 x3) (fp.max x1 x9))) (fp.min (fp.sub RNE (fp.min x2 x8) (fp.add RNE x9 x6)) (fp.div RNE (fp.min x8 x4) (fp.abs x8)))))))(check-sat)