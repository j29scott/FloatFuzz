;  time  = {'mathsat': 21.296114444732666, 'z3': 5.202}
;  terms = 63
;  score = 16.094114444732668
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.mul RNE (fp.sub RNE (fp.mul RNE (fp.add RNE (fp.min x5 x3) (fp.roundToIntegral RNE x7)) (fp.sqrt RNE (fp.neg x5))) (fp.abs (fp.min (fp.min x0 x0) (fp.max x0 x6)))) (fp.mul RNE (fp.sqrt RNE (fp.mul RNE (fp.roundToIntegral RNE x0) (fp.roundToIntegral RNE x6))) (fp.mul RNE (fp.max (fp.sub RNE (fp.min x7 x1) (fp.sqrt RNE x3)) (fp.roundToIntegral RNE (fp.abs x3))) (fp.sqrt RNE (fp.sub RNE (fp.sqrt RNE x3) (fp.max x2 x2)))))) (fp.neg (fp.neg (fp.mul RNE (fp.add RNE (fp.add RNE x0 x0) (fp.min x3 (fp.sqrt RNE x6))) (fp.mul RNE (fp.abs x3) (fp.max x3 x6)))))))(check-sat)