;  time  = {'mathsat': 1.906710147857666, 'z3': 0.189}
;  terms = 96
;  score = 1.717710147857666
;  stdout= {'mathsat': 'unsat', 'z3': 'unsat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.max (fp.mul RNE (fp.div RNE (fp.neg (fp.add RNE x7 (fp.add RNE x3 x1))) (fp.add RNE (fp.sqrt RNE x3) (fp.max x4 x3))) (fp.max (fp.add RNE (fp.max x7 x8) (fp.add RNE x1 (fp.sub RNE x2 x0))) (fp.add RNE (fp.div RNE (fp.sqrt RNE x4) (fp.sub RNE x6 x8)) (fp.max (fp.neg x6) (fp.add RNE x4 x8))))) (fp.max (fp.max (fp.mul RNE (fp.roundToIntegral RNE (fp.add RNE x7 x4)) (fp.roundToIntegral RNE (fp.sub RNE x4 x5))) (fp.sub RNE (fp.mul RNE (fp.min x7 x7) (fp.add RNE x1 x4)) (fp.max (fp.mul RNE x4 x4) (fp.neg x0)))) (fp.mul RNE (fp.max (fp.sub RNE (fp.neg x8) (fp.div RNE x2 x9)) (fp.roundToIntegral RNE (fp.max x2 x0))) (fp.min (fp.min (fp.sqrt RNE x9) (fp.max x2 x4)) (fp.sub RNE (fp.max x0 x5) (fp.max x7 x9)))))) (fp.sqrt RNE (fp.neg (fp.abs (fp.abs (fp.abs x9)))))))(check-sat)