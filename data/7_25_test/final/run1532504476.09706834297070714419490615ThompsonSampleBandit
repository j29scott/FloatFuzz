;  time  = {'mathsat': 23.13334822654724, 'z3': 18.953}
;  terms = 63
;  score = 4.180348226547242
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.div RNE (fp.sub RNE (fp.sqrt RNE (fp.abs (fp.max x6 x4))) (fp.abs (fp.add RNE (fp.max x7 x2) (fp.add RNE x3 x3)))) (fp.sqrt RNE (fp.max (fp.add RNE (fp.neg x0) (fp.sub RNE x0 x3)) (fp.abs (fp.max x4 x4))))) (fp.min (fp.mul RNE (fp.neg (fp.add RNE (fp.max x9 x2) (fp.abs x4))) (fp.abs (fp.min (fp.sub RNE x9 x9) (fp.sqrt RNE x0)))) (fp.max (fp.roundToIntegral RNE (fp.min (fp.abs x0) (fp.abs x8))) (fp.sub RNE (fp.roundToIntegral RNE (fp.max x4 x9)) (fp.div RNE (fp.min x8 x8) (fp.max x6 x5)))))))(check-sat)