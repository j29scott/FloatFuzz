;  time  = {'mathsat': 84.01933360099792, 'z3': 56.928}
;  terms = 74
;  score = 27.091333600997928
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.max (fp.max (fp.min (fp.add RNE x1 x0) (fp.sub RNE x0 x8)) (fp.add RNE (fp.neg x8) (fp.min x6 x0))) (fp.roundToIntegral RNE (fp.neg (fp.div RNE x4 x2)))) (fp.sqrt RNE (fp.min (fp.add RNE (fp.sqrt RNE x8) (fp.neg x3)) (fp.add RNE (fp.max x7 x1) (fp.roundToIntegral RNE x9))))) (fp.sub RNE (fp.div RNE (fp.div RNE (fp.min (fp.max x0 x0) (fp.abs x9)) (fp.abs (fp.add RNE x2 x5))) (fp.abs (fp.neg (fp.max x6 x2)))) (fp.div RNE (fp.roundToIntegral RNE (fp.max (fp.sub RNE x0 x4) (fp.neg x8))) (fp.max (fp.div RNE (fp.roundToIntegral RNE x4) (fp.neg x9)) (fp.max (fp.add RNE x9 x7) (fp.max x5 x8)))))))(check-sat)