;  time  = {'z3': 39.754, 'mathsat': 61.632734060287476}
;  terms = 71
;  score = 21.878734060287478
;  stdout= {'z3': 'sat\n', 'mathsat': 'sat'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.min (fp.add RNE (fp.min (fp.sqrt RNE (fp.sqrt RNE x8)) (fp.sub RNE (fp.roundToIntegral RNE x2) (fp.add RNE x7 x4))) (fp.mul RNE (fp.add RNE (fp.mul RNE x7 x2) (fp.roundToIntegral RNE x4)) (fp.sqrt RNE (fp.min x4 (fp.div RNE x5 x0))))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.sqrt RNE x1))))) (fp.mul RNE (fp.div RNE (fp.abs (fp.abs (fp.neg x4))) (fp.add RNE (fp.div RNE (fp.roundToIntegral RNE x2) (fp.sub RNE x9 x2)) (fp.min (fp.max x4 x7) (fp.min x8 x8)))) (fp.max (fp.abs (fp.mul RNE (fp.div RNE x7 x1) (fp.sub RNE x8 x7))) (fp.add RNE (fp.div RNE (fp.sqrt RNE x0) (fp.add RNE x0 x7)) (fp.abs (fp.div RNE x4 x0)))))))(check-sat)