;  time  = {'mathsat': 83.84169578552246, 'z3': 64.653}
;  terms = 66
;  score = 19.188695785522455
;  stdout= {'mathsat': 'sat', 'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.min (fp.roundToIntegral RNE (fp.abs x2)) (fp.sqrt RNE (fp.div RNE x1 x9))) (fp.add RNE (fp.sub RNE (fp.sqrt RNE x4) (fp.add RNE x3 x4)) (fp.sub RNE (fp.max x7 x7) (fp.abs x3)))) (fp.sqrt RNE (fp.roundToIntegral RNE (fp.add RNE (fp.max x9 x9) (fp.mul RNE x1 x5))))) (fp.add RNE (fp.add RNE (fp.sqrt RNE (fp.div RNE (fp.mul RNE x6 x7) (fp.max x1 x3))) (fp.add RNE (fp.abs (fp.div RNE x9 x5)) (fp.min (fp.abs x5) (fp.abs x9)))) (fp.roundToIntegral RNE (fp.min (fp.add RNE (fp.roundToIntegral RNE x6) (fp.sqrt RNE x1)) (fp.max (fp.sqrt RNE x4) (fp.min x7 x2)))))))(check-sat)