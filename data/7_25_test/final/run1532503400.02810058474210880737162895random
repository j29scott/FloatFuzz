;  time  = {'mathsat': 6.060193300247192, 'z3': 0.253}
;  terms = 100
;  score = 5.807193300247192
;  stdout= {'mathsat': 'unsat', 'z3': 'unsat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.geq (fp.div RNE (fp.sub RNE (fp.max (fp.roundToIntegral RNE (fp.add RNE x1 x3)) (fp.mul RNE (fp.mul RNE x8 x5) (fp.div RNE (fp.roundToIntegral RNE x4) (fp.mul RNE x4 x9)))) (fp.add RNE (fp.max (fp.sqrt RNE x6) (fp.div RNE x8 x4)) (fp.mul RNE (fp.sub RNE x1 (fp.sqrt RNE x9)) (fp.neg x4)))) (fp.add RNE (fp.div RNE (fp.max (fp.add RNE (fp.neg x6) (fp.max x1 x2)) (fp.add RNE (fp.sub RNE x5 x8) (fp.min x6 x3))) (fp.div RNE (fp.min (fp.div RNE x8 x5) (fp.div RNE x8 x5)) (fp.div RNE (fp.neg x6) (fp.add RNE x2 x5)))) (fp.sqrt RNE (fp.div RNE (fp.sub RNE (fp.sub RNE x1 x2) (fp.add RNE x9 x4)) (fp.max (fp.roundToIntegral RNE x3) (fp.neg x1)))))) (fp.mul RNE (fp.div RNE (fp.sqrt RNE (fp.div RNE (fp.div RNE x1 x7) (fp.div RNE x7 x9))) (fp.abs (fp.add RNE (fp.add RNE x3 (fp.div RNE x1 x8)) (fp.neg x1)))) (fp.sqrt RNE (fp.neg (fp.abs (fp.abs x1)))))))(check-sat)