;  time  = {'z3': 600}
;  terms = 112
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.leq (fp.div RNE (fp.mul RNE (fp.div RNE (fp.neg (fp.max x7 (fp.div RNE x1 x9))) (fp.sub RNE (fp.sqrt RNE x3) (fp.max x4 x3))) (fp.div RNE (fp.mul RNE (fp.max x7 x8) (fp.roundToIntegral RNE x1)) (fp.roundToIntegral RNE (fp.neg (fp.div RNE x1 x8))))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.div RNE (fp.min x4 x7) (fp.sqrt RNE x0)) (fp.div RNE (fp.roundToIntegral RNE x5) (fp.sub RNE x2 x8))) (fp.neg (fp.div RNE (fp.min x3 x6) (fp.min x7 x9)))) (fp.mul RNE (fp.div RNE (fp.neg (fp.sub RNE x4 x1)) (fp.div RNE (fp.abs x7) (fp.sqrt RNE x3))) (fp.mul RNE (fp.sqrt RNE (fp.sub RNE x2 x1)) (fp.max (fp.add RNE x0 x9) (fp.abs x6)))))) (fp.sqrt RNE (fp.max (fp.abs (fp.max (fp.max x9 (fp.max x2 x2)) (fp.sub RNE (fp.div RNE x8 x7) (fp.mul RNE x7 x5)))) (fp.div RNE (fp.add RNE (fp.mul RNE (fp.max x7 x7) (fp.mul RNE x4 x2)) (fp.max (fp.div RNE x2 x2) (fp.neg x3))) (fp.neg (fp.max (fp.max x1 x4) (fp.div RNE x2 x9))))))))(check-sat)