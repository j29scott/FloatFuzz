;  time  = {'z3': 600}
;  terms = 66
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.add RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE x1))) (fp.div RNE (fp.abs (fp.add RNE x1 x6)) (fp.add RNE (fp.sub RNE x7 x5) (fp.roundToIntegral RNE x9)))) (fp.div RNE (fp.min (fp.sqrt RNE (fp.min x2 x1)) (fp.max (fp.max x8 x5) (fp.abs x2))) (fp.div RNE (fp.abs (fp.max x1 x4)) (fp.sub RNE (fp.div RNE x0 x2) (fp.roundToIntegral RNE x5))))) (fp.sqrt RNE (fp.max (fp.div RNE (fp.add RNE (fp.roundToIntegral RNE x6) (fp.neg x7)) (fp.div RNE (fp.div RNE x7 x1) (fp.sqrt RNE x1))) (fp.div RNE (fp.min (fp.neg x3) (fp.mul RNE x4 x3)) (fp.sqrt RNE (fp.sub RNE x9 x3)))))))(check-sat)