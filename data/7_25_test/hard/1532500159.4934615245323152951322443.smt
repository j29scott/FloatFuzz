;  time  = {'z3': 600}
;  terms = 93
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.sub RNE (fp.min (fp.div RNE (fp.sqrt RNE (fp.div RNE x7 x1)) (fp.mul RNE (fp.neg x9) (fp.div RNE x5 x0))) (fp.add RNE (fp.sqrt RNE (fp.mul RNE x1 x4)) (fp.add RNE (fp.neg x6) (fp.sub RNE x1 x0)))) (fp.mul RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.min x4 x0)) (fp.sub RNE (fp.abs x2) (fp.min x3 x8))) (fp.div RNE (fp.mul RNE (fp.roundToIntegral RNE x1) (fp.min x2 x4)) (fp.mul RNE (fp.neg x0) (fp.add RNE x8 x6))))) (fp.div RNE (fp.sub RNE (fp.min (fp.neg (fp.max x1 x6)) (fp.add RNE (fp.max x9 x3) (fp.mul RNE x8 x5))) (fp.div RNE (fp.min (fp.max x3 x9) (fp.abs x1)) (fp.abs (fp.div RNE x7 x9)))) (fp.sub RNE (fp.max (fp.add RNE (fp.sub RNE x0 x1) (fp.abs x0)) (fp.div RNE (fp.sqrt RNE x4) (fp.sub RNE x7 x2))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.abs x0)))))))(check-sat)