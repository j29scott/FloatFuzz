;  time  = {'z3': 600}
;  terms = 56
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isSubnormal (fp.mul RNE (fp.sub RNE (fp.sqrt RNE (fp.roundToIntegral RNE (fp.mul RNE x9 x6))) (fp.mul RNE (fp.neg (fp.abs x7)) (fp.add RNE (fp.div RNE (fp.max x4 x2) (fp.mul RNE x1 x7)) (fp.roundToIntegral RNE (fp.max x9 x9))))) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE x1 (fp.abs x9)) (fp.sqrt RNE (fp.sub RNE x6 x8))) (fp.div RNE (fp.abs x9) (fp.neg x1))) (fp.div RNE (fp.roundToIntegral RNE (fp.mul RNE (fp.roundToIntegral RNE x0) (fp.max x6 x2))) (fp.neg (fp.mul RNE (fp.max x8 x1) (fp.mul RNE x1 x5))))))))(check-sat)