;  time  = {'z3': 600}
;  terms = 76
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.roundToIntegral RNE (fp.sub RNE (fp.add RNE (fp.abs (fp.add RNE x4 x2)) (fp.roundToIntegral RNE (fp.roundToIntegral RNE x5))) (fp.sub RNE (fp.add RNE (fp.mul RNE x3 x7) (fp.sqrt RNE x8)) (fp.abs (fp.max x5 x8))))) (fp.mul RNE (fp.min (fp.div RNE (fp.max (fp.min x6 x6) (fp.abs x0)) (fp.neg (fp.add RNE x3 x1))) (fp.sub RNE (fp.div RNE (fp.mul RNE x7 x2) (fp.abs x3)) (fp.max (fp.roundToIntegral RNE x6) (fp.abs x1)))) (fp.div RNE (fp.add RNE (fp.sub RNE (fp.div RNE x7 x5) (fp.mul RNE x0 x6)) (fp.div RNE (fp.div RNE x7 x1) (fp.neg x7))) (fp.add RNE (fp.sub RNE (fp.abs x3) (fp.sub RNE x1 x6)) (fp.max (fp.mul RNE x4 x6) (fp.div RNE x4 x9)))))))(check-sat)