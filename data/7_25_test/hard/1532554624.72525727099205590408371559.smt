;  time  = {'z3': 600}
;  terms = 77
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.add RNE (fp.max (fp.mul RNE (fp.sqrt RNE (fp.mul RNE x5 x9)) (fp.mul RNE (fp.sqrt RNE x0) (fp.sqrt RNE x6))) (fp.neg (fp.sub RNE (fp.roundToIntegral RNE x9) (fp.sqrt RNE x7)))) (fp.min (fp.min (fp.sqrt RNE (fp.neg x2)) (fp.min (fp.abs x5) (fp.sub RNE x0 x7))) (fp.neg (fp.mul RNE (fp.min x9 x0) (fp.min x3 x5))))) (fp.div RNE (fp.abs (fp.max (fp.abs (fp.sub RNE x9 x2)) (fp.add RNE (fp.mul RNE x9 x6) (fp.div RNE x3 x9)))) (fp.add RNE (fp.min (fp.abs (fp.roundToIntegral RNE x6)) (fp.mul RNE (fp.add RNE x2 x8) (fp.min x6 x1))) (fp.min (fp.div RNE (fp.div RNE x1 x2) (fp.min x7 x7)) (fp.max (fp.roundToIntegral RNE x4) (fp.sqrt RNE x7)))))))(check-sat)