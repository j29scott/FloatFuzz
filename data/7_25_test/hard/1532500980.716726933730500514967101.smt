;  time  = {'z3': 600}
;  terms = 82
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.max (fp.sqrt RNE (fp.sqrt RNE (fp.mul RNE (fp.add RNE x5 x3) (fp.max x6 x5)))) (fp.max (fp.neg (fp.mul RNE (fp.mul RNE x9 x8) (fp.abs x8))) (fp.neg (fp.sub RNE (fp.mul RNE x3 x9) (fp.roundToIntegral RNE x7))))) (fp.min (fp.sub RNE (fp.min (fp.sqrt RNE (fp.max x1 x2)) (fp.sub RNE (fp.neg x2) (fp.min x7 x6))) (fp.add RNE (fp.max (fp.add RNE x3 x5) (fp.sub RNE x6 x0)) (fp.min (fp.add RNE x2 x4) (fp.mul RNE x3 x5)))) (fp.div RNE (fp.add RNE (fp.add RNE (fp.max x1 x7) (fp.sub RNE x4 x2)) (fp.mul RNE (fp.max x7 x7) (fp.add RNE x8 x3))) (fp.sub RNE (fp.neg (fp.div RNE x9 x3)) (fp.add RNE (fp.mul RNE x1 x6) (fp.div RNE x4 x0)))))))(check-sat)