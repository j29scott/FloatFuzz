;  time  = {'z3': 600}
;  terms = 68
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.isNegative (fp.div RNE (fp.div RNE (fp.div RNE (fp.abs (fp.mul RNE x7 x3)) (fp.div RNE (fp.min (fp.max x0 x4) (fp.sub RNE x6 x3)) (fp.sqrt RNE (fp.mul RNE x4 x0)))) (fp.div RNE (fp.max (fp.div RNE x0 (fp.min x2 x6)) (fp.div RNE x4 x9)) (fp.add RNE (fp.sqrt RNE (fp.div RNE x5 x0)) (fp.roundToIntegral RNE (fp.add RNE x8 x4))))) (fp.mul RNE (fp.mul RNE (fp.roundToIntegral RNE (fp.sub RNE (fp.abs x3) (fp.div RNE x1 x0))) (fp.div RNE (fp.neg (fp.neg x3)) (fp.min (fp.div RNE x4 x7) (fp.abs x3)))) (fp.sub RNE (fp.roundToIntegral RNE (fp.abs (fp.roundToIntegral RNE x1))) (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.div RNE x2 x3))))))))(check-sat)