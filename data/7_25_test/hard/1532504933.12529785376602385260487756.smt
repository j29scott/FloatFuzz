;  time  = {'z3': 559.768}
;  terms = 73
;  score = 559.768
;  stdout= {'z3': 'sat\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.gt (fp.div RNE (fp.div RNE (fp.min (fp.div RNE (fp.neg x7) (fp.div RNE x0 x2)) (fp.min (fp.min x2 x7) (fp.div RNE x4 x4))) (fp.neg (fp.abs (fp.roundToIntegral RNE x7)))) (fp.div RNE (fp.sub RNE (fp.div RNE (fp.mul RNE x5 x3) (fp.neg x6)) (fp.max (fp.neg x4) (fp.sub RNE x3 x9))) (fp.div RNE (fp.div RNE (fp.abs x9) (fp.abs x6)) (fp.neg (fp.add RNE x8 x8))))) (fp.sqrt RNE (fp.add RNE (fp.sub RNE (fp.min (fp.roundToIntegral RNE x2) (fp.sub RNE x2 x4)) (fp.mul RNE (fp.mul RNE x5 x2) (fp.roundToIntegral RNE x1))) (fp.min (fp.mul RNE (fp.div RNE x5 x0) (fp.sqrt RNE x4)) (fp.min (fp.div RNE x9 x2) (fp.neg x5)))))))(check-sat)