;  time  = {'z3': 600}
;  terms = 106
;  score = 600
;  stdout= {'z3': 'timeout\n'}
(set-logic QF_FP)
(declare-const x0 (_ FloatingPoint 8 24))
(declare-const x1 (_ FloatingPoint 8 24))
(declare-const x2 (_ FloatingPoint 8 24))
(declare-const x3 (_ FloatingPoint 8 24))
(declare-const x4 (_ FloatingPoint 8 24))
(declare-const x5 (_ FloatingPoint 8 24))
(declare-const x6 (_ FloatingPoint 8 24))
(declare-const x7 (_ FloatingPoint 8 24))
(declare-const x8 (_ FloatingPoint 8 24))
(declare-const x9 (_ FloatingPoint 8 24))
(assert (not (fp.isNaN x0)))
(assert (not (fp.isInfinite x0)))
(assert (not (fp.isZero x0)))
(assert (not (fp.isNaN x1)))
(assert (not (fp.isInfinite x1)))
(assert (not (fp.isZero x1)))
(assert (not (fp.isNaN x2)))
(assert (not (fp.isInfinite x2)))
(assert (not (fp.isZero x2)))
(assert (not (fp.isNaN x3)))
(assert (not (fp.isInfinite x3)))
(assert (not (fp.isZero x3)))
(assert (not (fp.isNaN x4)))
(assert (not (fp.isInfinite x4)))
(assert (not (fp.isZero x4)))
(assert (not (fp.isNaN x5)))
(assert (not (fp.isInfinite x5)))
(assert (not (fp.isZero x5)))
(assert (not (fp.isNaN x6)))
(assert (not (fp.isInfinite x6)))
(assert (not (fp.isZero x6)))
(assert (not (fp.isNaN x7)))
(assert (not (fp.isInfinite x7)))
(assert (not (fp.isZero x7)))
(assert (not (fp.isNaN x8)))
(assert (not (fp.isInfinite x8)))
(assert (not (fp.isZero x8)))
(assert (not (fp.isNaN x9)))
(assert (not (fp.isInfinite x9)))
(assert (not (fp.isZero x9)))
(assert (fp.eq (fp.abs (fp.mul RNE (fp.abs (fp.abs (fp.abs x8))) (fp.mul RNE (fp.add RNE (fp.max (fp.mul RNE x5 x5) (fp.min x8 x2)) (fp.min (fp.abs x2) (fp.roundToIntegral RNE x1))) (fp.sub RNE (fp.max (fp.roundToIntegral RNE x9) (fp.sub RNE x4 x8)) (fp.neg (fp.div RNE x9 x8)))))) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE x7 (fp.min x3 x8)) (fp.add RNE x2 x5)) (fp.div RNE (fp.mul RNE (fp.mul RNE x8 x5) (fp.abs x8)) (fp.mul RNE (fp.add RNE x3 x2) (fp.mul RNE x7 x6)))) (fp.roundToIntegral RNE (fp.sqrt RNE (fp.mul RNE (fp.mul RNE x5 x4) (fp.min x2 x2))))) (fp.mul RNE (fp.max (fp.div RNE (fp.neg (fp.sub RNE x0 x6)) (fp.max (fp.max x9 x1) (fp.mul RNE x6 x3))) (fp.roundToIntegral RNE (fp.neg (fp.div RNE x9 x0)))) (fp.div RNE (fp.roundToIntegral RNE (fp.roundToIntegral RNE (fp.max x8 x7))) (fp.mul RNE (fp.mul RNE (fp.add RNE x7 x5) (fp.sqrt RNE x5)) (fp.min (fp.mul RNE x5 x9) (fp.sub RNE x7 x4))))))))(check-sat)